
Nucleo_F767ZI_Sensor_Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c078  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800c278  0800c278  0001c278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c58c  0800c58c  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800c58c  0800c58c  0001c58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c594  0800c594  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c594  0800c594  0001c594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c598  0800c598  0001c598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800c59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000072fc  20000260  0800c7fc  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000755c  0800c7fc  0002755c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   000220b2  00000000  00000000  0002028e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d75  00000000  00000000  00042340  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f0  00000000  00000000  000460b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  000478a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c8b7  00000000  00000000  00048ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015d89  00000000  00000000  00075777  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106bd1  00000000  00000000  0008b500  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001920d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000714c  00000000  00000000  0019214c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000260 	.word	0x20000260
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c260 	.word	0x0800c260

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000264 	.word	0x20000264
 800023c:	0800c260 	.word	0x0800c260

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 fe77 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f806 	bl	800062c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000620:	f008 fb7c 	bl	8008d1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_InitTick+0x54>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x58>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fe91 	bl	8001372 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	e00e      	b.n	8000678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d80a      	bhi.n	8000676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	f04f 30ff 	mov.w	r0, #4294967295
 8000668:	f000 fe59 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <HAL_InitTick+0x5c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000088 	.word	0x20000088
 8000684:	20000004 	.word	0x20000004
 8000688:	20000000 	.word	0x20000000

0800068c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_IncTick+0x20>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_IncTick+0x24>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_IncTick+0x24>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000004 	.word	0x20000004
 80006b0:	200002a8 	.word	0x200002a8

080006b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <HAL_GetTick+0x14>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	200002a8 	.word	0x200002a8

080006cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff ffee 	bl	80006b4 <HAL_GetTick>
 80006d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e4:	d005      	beq.n	80006f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_Delay+0x40>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f2:	bf00      	nop
 80006f4:	f7ff ffde 	bl	80006b4 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	d8f7      	bhi.n	80006f4 <HAL_Delay+0x28>
  {
  }
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e031      	b.n	800078a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	2b00      	cmp	r3, #0
 800072c:	d109      	bne.n	8000742 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f008 fb18 	bl	8008d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	2b00      	cmp	r3, #0
 800074c:	d116      	bne.n	800077c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_ADC_Init+0x84>)
 8000754:	4013      	ands	r3, r2
 8000756:	f043 0202 	orr.w	r2, r3, #2
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 fbfe 	bl	8000f60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f023 0303 	bic.w	r3, r3, #3
 8000772:	f043 0201 	orr.w	r2, r3, #1
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	641a      	str	r2, [r3, #64]	; 0x40
 800077a:	e001      	b.n	8000780 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	ffffeefd 	.word	0xffffeefd

08000798 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d101      	bne.n	80007b2 <HAL_ADC_Start+0x1a>
 80007ae:	2302      	movs	r3, #2
 80007b0:	e0a0      	b.n	80008f4 <HAL_ADC_Start+0x15c>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d018      	beq.n	80007fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f042 0201 	orr.w	r2, r2, #1
 80007d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80007d8:	4b49      	ldr	r3, [pc, #292]	; (8000900 <HAL_ADC_Start+0x168>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a49      	ldr	r2, [pc, #292]	; (8000904 <HAL_ADC_Start+0x16c>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9a      	lsrs	r2, r3, #18
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f9      	bne.n	80007ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	2b01      	cmp	r3, #1
 8000806:	d174      	bne.n	80008f2 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080c:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <HAL_ADC_Start+0x170>)
 800080e:	4013      	ands	r3, r2
 8000810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000822:	2b00      	cmp	r3, #0
 8000824:	d007      	beq.n	8000836 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800082e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800083e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000842:	d106      	bne.n	8000852 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	f023 0206 	bic.w	r2, r3, #6
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	645a      	str	r2, [r3, #68]	; 0x44
 8000850:	e002      	b.n	8000858 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000868:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <HAL_ADC_Start+0x174>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10f      	bne.n	8000896 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d136      	bne.n	80008f2 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	e02d      	b.n	80008f2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <HAL_ADC_Start+0x178>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10e      	bne.n	80008be <HAL_ADC_Start+0x126>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d107      	bne.n	80008be <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	689a      	ldr	r2, [r3, #8]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008bc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_ADC_Start+0x174>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d113      	bne.n	80008f2 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <HAL_ADC_Start+0x17c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d10e      	bne.n	80008f2 <HAL_ADC_Start+0x15a>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d107      	bne.n	80008f2 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008f0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	20000088 	.word	0x20000088
 8000904:	431bde83 	.word	0x431bde83
 8000908:	fffff8fe 	.word	0xfffff8fe
 800090c:	40012300 	.word	0x40012300
 8000910:	40012000 	.word	0x40012000
 8000914:	40012200 	.word	0x40012200

08000918 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000934:	d113      	bne.n	800095e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000944:	d10b      	bne.n	800095e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f043 0220 	orr.w	r2, r3, #32
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e05c      	b.n	8000a18 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800095e:	f7ff fea9 	bl	80006b4 <HAL_GetTick>
 8000962:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000964:	e01a      	b.n	800099c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d016      	beq.n	800099c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d007      	beq.n	8000984 <HAL_ADC_PollForConversion+0x6c>
 8000974:	f7ff fe9e 	bl	80006b4 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d20b      	bcs.n	800099c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f043 0204 	orr.w	r2, r3, #4
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000998:	2303      	movs	r3, #3
 800099a:	e03d      	b.n	8000a18 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d1dd      	bne.n	8000966 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f06f 0212 	mvn.w	r2, #18
 80009b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d123      	bne.n	8000a16 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11f      	bne.n	8000a16 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d111      	bne.n	8000a16 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d105      	bne.n	8000a16 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f043 0201 	orr.w	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	2300      	movne	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	2b20      	cmp	r3, #32
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d049      	beq.n	8000af6 <HAL_ADC_IRQHandler+0xd6>
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d046      	beq.n	8000af6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d105      	bne.n	8000a80 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d12b      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d127      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d119      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 0220 	bic.w	r2, r2, #32
 8000ac0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d105      	bne.n	8000ae6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f043 0201 	orr.w	r2, r3, #1
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f8e8 	bl	8000cbc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f06f 0212 	mvn.w	r2, #18
 8000af4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	2b80      	cmp	r3, #128	; 0x80
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d057      	beq.n	8000bd8 <HAL_ADC_IRQHandler+0x1b8>
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d054      	beq.n	8000bd8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d105      	bne.n	8000b46 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d139      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d12b      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d124      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d11d      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d119      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ba2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d105      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f043 0201 	orr.w	r2, r3, #1
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 fac3 	bl	8001154 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f06f 020c 	mvn.w	r2, #12
 8000bd6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	bf0c      	ite	eq
 8000be6:	2301      	moveq	r3, #1
 8000be8:	2300      	movne	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	2b40      	cmp	r3, #64	; 0x40
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d017      	beq.n	8000c3a <HAL_ADC_IRQHandler+0x21a>
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d014      	beq.n	8000c3a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10d      	bne.n	8000c3a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f850 	bl	8000cd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f06f 0201 	mvn.w	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0320 	and.w	r3, r3, #32
 8000c44:	2b20      	cmp	r3, #32
 8000c46:	bf0c      	ite	eq
 8000c48:	2301      	moveq	r3, #1
 8000c4a:	2300      	movne	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c5e:	bf0c      	ite	eq
 8000c60:	2301      	moveq	r3, #1
 8000c62:	2300      	movne	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d015      	beq.n	8000c9a <HAL_ADC_IRQHandler+0x27a>
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d012      	beq.n	8000c9a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	f043 0202 	orr.w	r2, r3, #2
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f06f 0220 	mvn.w	r2, #32
 8000c88:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f82a 	bl	8000ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f06f 0220 	mvn.w	r2, #32
 8000c98:	601a      	str	r2, [r3, #0]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1c>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e115      	b.n	8000f40 <HAL_ADC_ConfigChannel+0x248>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b09      	cmp	r3, #9
 8000d22:	d935      	bls.n	8000d90 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68d9      	ldr	r1, [r3, #12]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	3b1e      	subs	r3, #30
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43da      	mvns	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	400a      	ands	r2, r1
 8000d48:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a7f      	ldr	r2, [pc, #508]	; (8000f4c <HAL_ADC_ConfigChannel+0x254>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d10a      	bne.n	8000d6a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68d9      	ldr	r1, [r3, #12]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	061a      	lsls	r2, r3, #24
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	e035      	b.n	8000dd6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68d9      	ldr	r1, [r3, #12]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4403      	add	r3, r0
 8000d82:	3b1e      	subs	r3, #30
 8000d84:	409a      	lsls	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	e022      	b.n	8000dd6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6919      	ldr	r1, [r3, #16]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	2207      	movs	r2, #7
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	400a      	ands	r2, r1
 8000db2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6919      	ldr	r1, [r3, #16]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4403      	add	r3, r0
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d824      	bhi.n	8000e28 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	3b05      	subs	r3, #5
 8000df0:	221f      	movs	r2, #31
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	3b05      	subs	r3, #5
 8000e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
 8000e26:	e04c      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b0c      	cmp	r3, #12
 8000e2e:	d824      	bhi.n	8000e7a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b23      	subs	r3, #35	; 0x23
 8000e42:	221f      	movs	r2, #31
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43da      	mvns	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	400a      	ands	r2, r1
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b23      	subs	r3, #35	; 0x23
 8000e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
 8000e78:	e023      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b41      	subs	r3, #65	; 0x41
 8000e8c:	221f      	movs	r2, #31
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	400a      	ands	r2, r1
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b41      	subs	r3, #65	; 0x41
 8000eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <HAL_ADC_ConfigChannel+0x258>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d109      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x1e8>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d105      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_ADC_ConfigChannel+0x25c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <HAL_ADC_ConfigChannel+0x25c>)
 8000eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ede:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <HAL_ADC_ConfigChannel+0x258>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d125      	bne.n	8000f36 <HAL_ADC_ConfigChannel+0x23e>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_ADC_ConfigChannel+0x254>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d003      	beq.n	8000efc <HAL_ADC_ConfigChannel+0x204>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b11      	cmp	r3, #17
 8000efa:	d11c      	bne.n	8000f36 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_ADC_ConfigChannel+0x25c>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <HAL_ADC_ConfigChannel+0x25c>)
 8000f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f06:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_ADC_ConfigChannel+0x254>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d111      	bne.n	8000f36 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_ADC_ConfigChannel+0x260>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_ADC_ConfigChannel+0x264>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	0c9a      	lsrs	r2, r3, #18
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000f28:	e002      	b.n	8000f30 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f9      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	10000012 	.word	0x10000012
 8000f50:	40012000 	.word	0x40012000
 8000f54:	40012300 	.word	0x40012300
 8000f58:	20000088 	.word	0x20000088
 8000f5c:	431bde83 	.word	0x431bde83

08000f60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000f68:	4b78      	ldr	r3, [pc, #480]	; (800114c <ADC_Init+0x1ec>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a77      	ldr	r2, [pc, #476]	; (800114c <ADC_Init+0x1ec>)
 8000f6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000f74:	4b75      	ldr	r3, [pc, #468]	; (800114c <ADC_Init+0x1ec>)
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4973      	ldr	r1, [pc, #460]	; (800114c <ADC_Init+0x1ec>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	021a      	lsls	r2, r3, #8
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6899      	ldr	r1, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	4a58      	ldr	r2, [pc, #352]	; (8001150 <ADC_Init+0x1f0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d022      	beq.n	800103a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6899      	ldr	r1, [r3, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6899      	ldr	r1, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	e00f      	b.n	800105a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001058:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0202 	bic.w	r2, r2, #2
 8001068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6899      	ldr	r1, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	005a      	lsls	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01b      	beq.n	80010c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001096:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80010a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6859      	ldr	r1, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	3b01      	subs	r3, #1
 80010b4:	035a      	lsls	r2, r3, #13
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	e007      	b.n	80010d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	051a      	lsls	r2, r3, #20
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6899      	ldr	r1, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001112:	025a      	lsls	r2, r3, #9
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800112a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6899      	ldr	r1, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	029a      	lsls	r2, r3, #10
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	609a      	str	r2, [r3, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40012300 	.word	0x40012300
 8001150:	0f000001 	.word	0x0f000001

08001154 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <__NVIC_SetPriorityGrouping+0x40>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	4313      	orrs	r3, r2
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	05fa0000 	.word	0x05fa0000

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff3e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff31 	bl	80011cc <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff f98c 	bl	80006b4 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e099      	b.n	80014dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c8:	e00f      	b.n	80013ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ca:	f7ff f973 	bl	80006b4 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d908      	bls.n	80013ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e078      	b.n	80014dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e8      	bne.n	80013ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_DMA_Init+0x158>)
 8001404:	4013      	ands	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2b04      	cmp	r3, #4
 8001442:	d107      	bne.n	8001454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4313      	orrs	r3, r2
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f023 0307 	bic.w	r3, r3, #7
 800146a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4313      	orrs	r3, r2
 8001474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	2b04      	cmp	r3, #4
 800147c:	d117      	bne.n	80014ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4313      	orrs	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00e      	beq.n	80014ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fa99 	bl	80019c8 <DMA_CheckFifoParam>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2240      	movs	r2, #64	; 0x40
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014aa:	2301      	movs	r3, #1
 80014ac:	e016      	b.n	80014dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fa50 	bl	800195c <DMA_CalcBaseAndBitshift>
 80014bc:	4603      	mov	r3, r0
 80014be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	223f      	movs	r2, #63	; 0x3f
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	e010803f 	.word	0xe010803f

080014e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_DMA_Start_IT+0x26>
 800150a:	2302      	movs	r3, #2
 800150c:	e048      	b.n	80015a0 <HAL_DMA_Start_IT+0xb8>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d137      	bne.n	8001592 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f9e2 	bl	8001900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	223f      	movs	r2, #63	; 0x3f
 8001542:	409a      	lsls	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0216 	orr.w	r2, r2, #22
 8001556:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001566:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0208 	orr.w	r2, r2, #8
 800157e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e005      	b.n	800159e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800159a:	2302      	movs	r3, #2
 800159c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800159e:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d004      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00c      	b.n	80015e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2205      	movs	r2, #5
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0201 	bic.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <HAL_DMA_IRQHandler+0x258>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a92      	ldr	r2, [pc, #584]	; (8001848 <HAL_DMA_IRQHandler+0x25c>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0a9b      	lsrs	r3, r3, #10
 8001604:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2208      	movs	r2, #8
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01a      	beq.n	8001658 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0204 	bic.w	r2, r2, #4
 800163e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	2208      	movs	r2, #8
 8001646:	409a      	lsls	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	f043 0201 	orr.w	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	2201      	movs	r2, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d012      	beq.n	800168e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2201      	movs	r2, #1
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f043 0202 	orr.w	r2, r3, #2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001692:	2204      	movs	r2, #4
 8001694:	409a      	lsls	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d012      	beq.n	80016c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	2204      	movs	r2, #4
 80016b2:	409a      	lsls	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	f043 0204 	orr.w	r2, r3, #4
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	2210      	movs	r2, #16
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d043      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03c      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2210      	movs	r2, #16
 80016e8:	409a      	lsls	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d018      	beq.n	800172e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d108      	bne.n	800171c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	2b00      	cmp	r3, #0
 8001710:	d024      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
 800171a:	e01f      	b.n	800175c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01b      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
 800172c:	e016      	b.n	800175c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0208 	bic.w	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	2220      	movs	r2, #32
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 808e 	beq.w	800188a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8086 	beq.w	800188a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	2220      	movs	r2, #32
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b05      	cmp	r3, #5
 8001794:	d136      	bne.n	8001804 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0216 	bic.w	r2, r2, #22
 80017a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x1da>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0208 	bic.w	r2, r2, #8
 80017d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	223f      	movs	r2, #63	; 0x3f
 80017dc:	409a      	lsls	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d07d      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
        }
        return;
 8001802:	e078      	b.n	80018f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d01c      	beq.n	800184c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d108      	bne.n	8001832 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	2b00      	cmp	r3, #0
 8001826:	d030      	beq.n	800188a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
 8001830:	e02b      	b.n	800188a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d027      	beq.n	800188a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
 8001842:	e022      	b.n	800188a <HAL_DMA_IRQHandler+0x29e>
 8001844:	20000088 	.word	0x20000088
 8001848:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10f      	bne.n	800187a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0210 	bic.w	r2, r2, #16
 8001868:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	2b00      	cmp	r3, #0
 8001890:	d032      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d022      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2205      	movs	r2, #5
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3301      	adds	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d307      	bcc.n	80018d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f2      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x2ca>
 80018d0:	e000      	b.n	80018d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
 80018f4:	e000      	b.n	80018f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018f6:	bf00      	nop
    }
  }
}
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop

08001900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800191c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b40      	cmp	r3, #64	; 0x40
 800192c:	d108      	bne.n	8001940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800193e:	e007      	b.n	8001950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3b10      	subs	r3, #16
 800196c:	4a13      	ldr	r2, [pc, #76]	; (80019bc <DMA_CalcBaseAndBitshift+0x60>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <DMA_CalcBaseAndBitshift+0x64>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d908      	bls.n	800199c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001992:	4013      	ands	r3, r2
 8001994:	1d1a      	adds	r2, r3, #4
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	659a      	str	r2, [r3, #88]	; 0x58
 800199a:	e006      	b.n	80019aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <DMA_CalcBaseAndBitshift+0x68>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	aaaaaaab 	.word	0xaaaaaaab
 80019c0:	0800c2a0 	.word	0x0800c2a0
 80019c4:	fffffc00 	.word	0xfffffc00

080019c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11f      	bne.n	8001a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d855      	bhi.n	8001a94 <DMA_CheckFifoParam+0xcc>
 80019e8:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <DMA_CheckFifoParam+0x28>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a13 	.word	0x08001a13
 80019f8:	08001a01 	.word	0x08001a01
 80019fc:	08001a95 	.word	0x08001a95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d045      	beq.n	8001a98 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a10:	e042      	b.n	8001a98 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a1a:	d13f      	bne.n	8001a9c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a20:	e03c      	b.n	8001a9c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a2a:	d121      	bne.n	8001a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d836      	bhi.n	8001aa0 <DMA_CheckFifoParam+0xd8>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <DMA_CheckFifoParam+0x70>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a4f 	.word	0x08001a4f
 8001a40:	08001a49 	.word	0x08001a49
 8001a44:	08001a61 	.word	0x08001a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4c:	e02f      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d024      	beq.n	8001aa4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5e:	e021      	b.n	8001aa4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a68:	d11e      	bne.n	8001aa8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a6e:	e01b      	b.n	8001aa8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d902      	bls.n	8001a7c <DMA_CheckFifoParam+0xb4>
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d003      	beq.n	8001a82 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a7a:	e018      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a80:	e015      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00e      	beq.n	8001aac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
      break;
 8001a92:	e00b      	b.n	8001aac <DMA_CheckFifoParam+0xe4>
      break;
 8001a94:	bf00      	nop
 8001a96:	e00a      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;
 8001a98:	bf00      	nop
 8001a9a:	e008      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;
 8001a9c:	bf00      	nop
 8001a9e:	e006      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;
 8001aa0:	bf00      	nop
 8001aa2:	e004      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;
 8001aa4:	bf00      	nop
 8001aa6:	e002      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;   
 8001aa8:	bf00      	nop
 8001aaa:	e000      	b.n	8001aae <DMA_CheckFifoParam+0xe6>
      break;
 8001aac:	bf00      	nop
    }
  } 
  
  return status; 
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e175      	b.n	8001dc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8164 	bne.w	8001dc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x4e>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d123      	bne.n	8001b52 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	69b9      	ldr	r1, [r7, #24]
 8001b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_GPIO_Init+0xea>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80be 	beq.w	8001dc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <HAL_GPIO_Init+0x320>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a64      	ldr	r2, [pc, #400]	; (8001ddc <HAL_GPIO_Init+0x320>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <HAL_GPIO_Init+0x320>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c5e:	4a60      	ldr	r2, [pc, #384]	; (8001de0 <HAL_GPIO_Init+0x324>)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a57      	ldr	r2, [pc, #348]	; (8001de4 <HAL_GPIO_Init+0x328>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d037      	beq.n	8001cfa <HAL_GPIO_Init+0x23e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a56      	ldr	r2, [pc, #344]	; (8001de8 <HAL_GPIO_Init+0x32c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d031      	beq.n	8001cf6 <HAL_GPIO_Init+0x23a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a55      	ldr	r2, [pc, #340]	; (8001dec <HAL_GPIO_Init+0x330>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d02b      	beq.n	8001cf2 <HAL_GPIO_Init+0x236>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <HAL_GPIO_Init+0x334>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d025      	beq.n	8001cee <HAL_GPIO_Init+0x232>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <HAL_GPIO_Init+0x338>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01f      	beq.n	8001cea <HAL_GPIO_Init+0x22e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x33c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x22a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x340>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x226>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <HAL_GPIO_Init+0x344>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x222>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <HAL_GPIO_Init+0x348>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x21e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4e      	ldr	r2, [pc, #312]	; (8001e08 <HAL_GPIO_Init+0x34c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x21a>
 8001cd2:	2309      	movs	r3, #9
 8001cd4:	e012      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	e010      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cda:	2308      	movs	r3, #8
 8001cdc:	e00e      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e00c      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x240>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d0c:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_GPIO_Init+0x324>)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3e:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d68:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dbc:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	f67f ae86 	bls.w	8001adc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3724      	adds	r7, #36	; 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021c00 	.word	0x40021c00
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40022400 	.word	0x40022400
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f806 	bl	8001e74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07f      	b.n	8001f9e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f006 fff4 	bl	8008ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2224      	movs	r2, #36	; 0x24
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001edc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	e006      	b.n	8001f14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d104      	bne.n	8001f26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_I2C_Init+0x11c>)
 8001f32:	430b      	orrs	r3, r1
 8001f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	ea42 0103 	orr.w	r1, r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	021a      	lsls	r2, r3, #8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69d9      	ldr	r1, [r3, #28]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	02008000 	.word	0x02008000

08001fac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	817b      	strh	r3, [r7, #10]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	f040 80da 	bne.w	8002182 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_I2C_Master_Transmit+0x30>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e0d3      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1d8>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fb66 	bl	80006b4 <HAL_GetTick>
 8001fe8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2319      	movs	r3, #25
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fe6c 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0be      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2221      	movs	r2, #33	; 0x21
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2210      	movs	r2, #16
 8002012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	893a      	ldrh	r2, [r7, #8]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2bff      	cmp	r3, #255	; 0xff
 8002036:	d90e      	bls.n	8002056 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	22ff      	movs	r2, #255	; 0xff
 800203c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	b2da      	uxtb	r2, r3
 8002044:	8979      	ldrh	r1, [r7, #10]
 8002046:	4b51      	ldr	r3, [pc, #324]	; (800218c <HAL_I2C_Master_Transmit+0x1e0>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 ffce 	bl	8002ff0 <I2C_TransferConfig>
 8002054:	e06c      	b.n	8002130 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	b2da      	uxtb	r2, r3
 8002066:	8979      	ldrh	r1, [r7, #10]
 8002068:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_I2C_Master_Transmit+0x1e0>)
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 ffbd 	bl	8002ff0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002076:	e05b      	b.n	8002130 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fe69 	bl	8002d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e07b      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d034      	beq.n	8002130 <HAL_I2C_Master_Transmit+0x184>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d130      	bne.n	8002130 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	2200      	movs	r2, #0
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fdfb 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e04d      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2bff      	cmp	r3, #255	; 0xff
 80020f0:	d90e      	bls.n	8002110 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	22ff      	movs	r2, #255	; 0xff
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	8979      	ldrh	r1, [r7, #10]
 8002100:	2300      	movs	r3, #0
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 ff71 	bl	8002ff0 <I2C_TransferConfig>
 800210e:	e00f      	b.n	8002130 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	b2da      	uxtb	r2, r3
 8002120:	8979      	ldrh	r1, [r7, #10]
 8002122:	2300      	movs	r3, #0
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 ff60 	bl	8002ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d19e      	bne.n	8002078 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	6a39      	ldr	r1, [r7, #32]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fe48 	bl	8002dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e01a      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2220      	movs	r2, #32
 8002154:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_I2C_Master_Transmit+0x1e4>)
 8002162:	400b      	ands	r3, r1
 8002164:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
  }
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	80002000 	.word	0x80002000
 8002190:	fe00e800 	.word	0xfe00e800

08002194 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
 80021a4:	4613      	mov	r3, r2
 80021a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	f040 80db 	bne.w	800236c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2C_Master_Receive+0x30>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0d4      	b.n	800236e <HAL_I2C_Master_Receive+0x1da>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021cc:	f7fe fa72 	bl	80006b4 <HAL_GetTick>
 80021d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2319      	movs	r3, #25
 80021d8:	2201      	movs	r2, #1
 80021da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fd78 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0bf      	b.n	800236e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2222      	movs	r2, #34	; 0x22
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2210      	movs	r2, #16
 80021fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	893a      	ldrh	r2, [r7, #8]
 800220e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2bff      	cmp	r3, #255	; 0xff
 800221e:	d90e      	bls.n	800223e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	b2da      	uxtb	r2, r3
 800222c:	8979      	ldrh	r1, [r7, #10]
 800222e:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_I2C_Master_Receive+0x1e4>)
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 feda 	bl	8002ff0 <I2C_TransferConfig>
 800223c:	e06d      	b.n	800231a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	b2da      	uxtb	r2, r3
 800224e:	8979      	ldrh	r1, [r7, #10]
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_I2C_Master_Receive+0x1e4>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fec9 	bl	8002ff0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800225e:	e05c      	b.n	800231a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	6a39      	ldr	r1, [r7, #32]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fdf1 	bl	8002e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e07c      	b.n	800236e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d034      	beq.n	800231a <HAL_I2C_Master_Receive+0x186>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d130      	bne.n	800231a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2200      	movs	r2, #0
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fd06 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e04d      	b.n	800236e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2bff      	cmp	r3, #255	; 0xff
 80022da:	d90e      	bls.n	80022fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	22ff      	movs	r2, #255	; 0xff
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	8979      	ldrh	r1, [r7, #10]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fe7c 	bl	8002ff0 <I2C_TransferConfig>
 80022f8:	e00f      	b.n	800231a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	b2da      	uxtb	r2, r3
 800230a:	8979      	ldrh	r1, [r7, #10]
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fe6b 	bl	8002ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d19d      	bne.n	8002260 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	6a39      	ldr	r1, [r7, #32]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fd53 	bl	8002dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e01a      	b.n	800236e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2220      	movs	r2, #32
 800233e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_I2C_Master_Receive+0x1e8>)
 800234c:	400b      	ands	r3, r1
 800234e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	80002400 	.word	0x80002400
 800237c:	fe00e800 	.word	0xfe00e800

08002380 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
  }
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d010      	beq.n	80023fa <HAL_I2C_ER_IRQHandler+0x46>
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	09db      	lsrs	r3, r3, #7
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	0a9b      	lsrs	r3, r3, #10
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_I2C_ER_IRQHandler+0x74>
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	09db      	lsrs	r3, r3, #7
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f043 0208 	orr.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002426:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	0a5b      	lsrs	r3, r3, #9
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <HAL_I2C_ER_IRQHandler+0xa2>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	09db      	lsrs	r3, r3, #7
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f043 0202 	orr.w	r2, r3, #2
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002454:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 030b 	and.w	r3, r3, #11
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002466:	68f9      	ldr	r1, [r7, #12]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fb2b 	bl	8002ac4 <I2C_ITError>
  }
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70fb      	strb	r3, [r7, #3]
 80024aa:	4613      	mov	r3, r2
 80024ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <I2C_Slave_ISR_IT+0x24>
 8002502:	2302      	movs	r3, #2
 8002504:	e0f0      	b.n	80026e8 <I2C_Slave_ISR_IT+0x206>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d04d      	beq.n	80025b6 <I2C_Slave_ISR_IT+0xd4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d047      	beq.n	80025b6 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d128      	bne.n	8002582 <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b28      	cmp	r3, #40	; 0x28
 800253a:	d108      	bne.n	800254e <I2C_Slave_ISR_IT+0x6c>
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002542:	d104      	bne.n	800254e <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002544:	6979      	ldr	r1, [r7, #20]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa68 	bl	8002a1c <I2C_ITListenCplt>
 800254c:	e032      	b.n	80025b4 <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b29      	cmp	r3, #41	; 0x29
 8002558:	d10e      	bne.n	8002578 <I2C_Slave_ISR_IT+0x96>
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002560:	d00a      	beq.n	8002578 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2210      	movs	r2, #16
 8002568:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fb6a 	bl	8002c44 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f93f 	bl	80027f4 <I2C_ITSlaveSeqCplt>
 8002576:	e01d      	b.n	80025b4 <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2210      	movs	r2, #16
 800257e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002580:	e09a      	b.n	80026b8 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2210      	movs	r2, #16
 8002588:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0204 	orr.w	r2, r3, #4
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <I2C_Slave_ISR_IT+0xc4>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a2:	f040 8089 	bne.w	80026b8 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4619      	mov	r1, r3
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fa89 	bl	8002ac4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025b2:	e081      	b.n	80026b8 <I2C_Slave_ISR_IT+0x1d6>
 80025b4:	e080      	b.n	80026b8 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d034      	beq.n	800262c <I2C_Slave_ISR_IT+0x14a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d02e      	beq.n	800262c <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01c      	beq.n	8002612 <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d14f      	bne.n	80026bc <I2C_Slave_ISR_IT+0x1da>
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002622:	d04b      	beq.n	80026bc <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f8e5 	bl	80027f4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800262a:	e047      	b.n	80026bc <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	08db      	lsrs	r3, r3, #3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <I2C_Slave_ISR_IT+0x16c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	08db      	lsrs	r3, r3, #3
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002644:	6979      	ldr	r1, [r7, #20]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f852 	bl	80026f0 <I2C_ITAddrCplt>
 800264c:	e037      	b.n	80026be <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d031      	beq.n	80026be <I2C_Slave_ISR_IT+0x1dc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d02b      	beq.n	80026be <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
 80026a0:	e00d      	b.n	80026be <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d002      	beq.n	80026b0 <I2C_Slave_ISR_IT+0x1ce>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f89f 	bl	80027f4 <I2C_ITSlaveSeqCplt>
 80026b6:	e002      	b.n	80026be <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 80026b8:	bf00      	nop
 80026ba:	e000      	b.n	80026be <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 80026bc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <I2C_Slave_ISR_IT+0x1fc>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026d6:	6979      	ldr	r1, [r7, #20]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f8c9 	bl	8002870 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002706:	2b28      	cmp	r3, #40	; 0x28
 8002708:	d168      	bne.n	80027dc <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	b29b      	uxth	r3, r3
 8002724:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002728:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002736:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002744:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d137      	bne.n	80027be <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800274e:	897b      	ldrh	r3, [r7, #10]
 8002750:	09db      	lsrs	r3, r3, #7
 8002752:	b29a      	uxth	r2, r3
 8002754:	89bb      	ldrh	r3, [r7, #12]
 8002756:	4053      	eors	r3, r2
 8002758:	b29b      	uxth	r3, r3
 800275a:	f003 0306 	and.w	r3, r3, #6
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11c      	bne.n	800279c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	2b02      	cmp	r3, #2
 8002776:	d139      	bne.n	80027ec <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2208      	movs	r2, #8
 8002784:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800278e:	89ba      	ldrh	r2, [r7, #12]
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fe82 	bl	800249e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800279a:	e027      	b.n	80027ec <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800279c:	893b      	ldrh	r3, [r7, #8]
 800279e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027a0:	2104      	movs	r1, #4
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc52 	bl	800304c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027b0:	89ba      	ldrh	r2, [r7, #12]
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fe71 	bl	800249e <HAL_I2C_AddrCallback>
}
 80027bc:	e016      	b.n	80027ec <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027be:	2104      	movs	r1, #4
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fc43 	bl	800304c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027ce:	89ba      	ldrh	r2, [r7, #12]
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fe62 	bl	800249e <HAL_I2C_AddrCallback>
}
 80027da:	e007      	b.n	80027ec <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2208      	movs	r2, #8
 80027e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b29      	cmp	r3, #41	; 0x29
 800280e:	d112      	bne.n	8002836 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2228      	movs	r2, #40	; 0x28
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2221      	movs	r2, #33	; 0x21
 800281c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800281e:	2101      	movs	r1, #1
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fc13 	bl	800304c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fe21 	bl	8002476 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002834:	e017      	b.n	8002866 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b2a      	cmp	r3, #42	; 0x2a
 8002840:	d111      	bne.n	8002866 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2228      	movs	r2, #40	; 0x28
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2222      	movs	r2, #34	; 0x22
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002850:	2102      	movs	r1, #2
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fbfa 	bl	800304c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fe12 	bl	800248a <HAL_I2C_SlaveRxCpltCallback>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2220      	movs	r2, #32
 800288c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800288e:	2107      	movs	r1, #7
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fbdb 	bl	800304c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <I2C_ITSlaveCplt+0x1a4>)
 80028b2:	400b      	ands	r3, r1
 80028b4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9c4 	bl	8002c44 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	0b9b      	lsrs	r3, r3, #14
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d018      	beq.n	8002902 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028de:	e010      	b.n	8002902 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0bdb      	lsrs	r3, r3, #15
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d020      	beq.n	8002950 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00c      	beq.n	8002950 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f043 0204 	orr.w	r2, r3, #4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	2b00      	cmp	r3, #0
 8002980:	d010      	beq.n	80029a4 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f89b 	bl	8002ac4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b28      	cmp	r3, #40	; 0x28
 8002998:	d138      	bne.n	8002a0c <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f83d 	bl	8002a1c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029a2:	e033      	b.n	8002a0c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029ac:	d011      	beq.n	80029d2 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff20 	bl	80027f4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <I2C_ITSlaveCplt+0x1a8>)
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fd75 	bl	80024ba <HAL_I2C_ListenCpltCallback>
}
 80029d0:	e01c      	b.n	8002a0c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b22      	cmp	r3, #34	; 0x22
 80029dc:	d10b      	bne.n	80029f6 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fd4b 	bl	800248a <HAL_I2C_SlaveRxCpltCallback>
}
 80029f4:	e00a      	b.n	8002a0c <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fd35 	bl	8002476 <HAL_I2C_SlaveTxCpltCallback>
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	fe00e800 	.word	0xfe00e800
 8002a18:	ffff0000 	.word	0xffff0000

08002a1c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <I2C_ITListenCplt+0xa4>)
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d022      	beq.n	8002a9a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a9a:	2107      	movs	r1, #7
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fad5 	bl	800304c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fd01 	bl	80024ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	ffff0000 	.word	0xffff0000

08002ac4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad4:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a55      	ldr	r2, [pc, #340]	; (8002c38 <I2C_ITError+0x174>)
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b28      	cmp	r3, #40	; 0x28
 8002afa:	d005      	beq.n	8002b08 <I2C_ITError+0x44>
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b29      	cmp	r3, #41	; 0x29
 8002b00:	d002      	beq.n	8002b08 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b2a      	cmp	r3, #42	; 0x2a
 8002b06:	d10e      	bne.n	8002b26 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b08:	2103      	movs	r1, #3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa9e 	bl	800304c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2228      	movs	r2, #40	; 0x28
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a46      	ldr	r2, [pc, #280]	; (8002c3c <I2C_ITError+0x178>)
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
 8002b24:	e013      	b.n	8002b4e <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b26:	2107      	movs	r1, #7
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fa8f 	bl	800304c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b60      	cmp	r3, #96	; 0x60
 8002b38:	d003      	beq.n	8002b42 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5c:	d123      	bne.n	8002ba6 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d05c      	beq.n	8002c30 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <I2C_ITError+0x17c>)
 8002b7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fd0c 	bl	80015a8 <HAL_DMA_Abort_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04c      	beq.n	8002c30 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ba4:	e044      	b.n	8002c30 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d123      	bne.n	8002bfe <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc4:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d030      	beq.n	8002c30 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <I2C_ITError+0x17c>)
 8002bd4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fce0 	bl	80015a8 <HAL_DMA_Abort_IT>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d020      	beq.n	8002c30 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4798      	blx	r3
}
 8002bfc:	e018      	b.n	8002c30 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b60      	cmp	r3, #96	; 0x60
 8002c08:	d10b      	bne.n	8002c22 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fc57 	bl	80024ce <HAL_I2C_AbortCpltCallback>
}
 8002c20:	e006      	b.n	8002c30 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f003 fe94 	bl	8006958 <HAL_I2C_ErrorCallback>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	ffff0000 	.word	0xffff0000
 8002c3c:	080024e3 	.word	0x080024e3
 8002c40:	08002c8d 	.word	0x08002c8d

08002c44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d103      	bne.n	8002c62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d007      	beq.n	8002c80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	619a      	str	r2, [r3, #24]
  }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b60      	cmp	r3, #96	; 0x60
 8002cb4:	d107      	bne.n	8002cc6 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff fc05 	bl	80024ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cc4:	e002      	b.n	8002ccc <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f003 fe46 	bl	8006958 <HAL_I2C_ErrorCallback>
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce4:	e022      	b.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d01e      	beq.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fd fce1 	bl	80006b4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d113      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e00f      	b.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d0cd      	beq.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d60:	e02c      	b.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f8dc 	bl	8002f24 <I2C_IsAcknowledgeFailed>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e02a      	b.n	8002dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d01e      	beq.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7fd fc99 	bl	80006b4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d113      	bne.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e007      	b.n	8002dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d1cb      	bne.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de0:	e028      	b.n	8002e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f89c 	bl	8002f24 <I2C_IsAcknowledgeFailed>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e026      	b.n	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fd fc5d 	bl	80006b4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d113      	bne.n	8002e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d1cf      	bne.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e58:	e055      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f860 	bl	8002f24 <I2C_IsAcknowledgeFailed>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e053      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d129      	bne.n	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d105      	bne.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e03f      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002eaa:	400b      	ands	r3, r1
 8002eac:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e022      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7fd fbf0 	bl	80006b4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e007      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d1a2      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	fe00e800 	.word	0xfe00e800

08002f24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d151      	bne.n	8002fe2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3e:	e022      	b.n	8002f86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d01e      	beq.n	8002f86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7fd fbb4 	bl	80006b4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_IsAcknowledgeFailed+0x3a>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e02e      	b.n	8002fe4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d1d5      	bne.n	8002f40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fe4d 	bl	8002c44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <I2C_IsAcknowledgeFailed+0xc8>)
 8002fb6:	400b      	ands	r3, r1
 8002fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	fe00e800 	.word	0xfe00e800

08002ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	4613      	mov	r3, r2
 8003000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	0d5b      	lsrs	r3, r3, #21
 800300c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <I2C_TransferConfig+0x58>)
 8003012:	430b      	orrs	r3, r1
 8003014:	43db      	mvns	r3, r3
 8003016:	ea02 0103 	and.w	r1, r2, r3
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003020:	7a7b      	ldrb	r3, [r7, #9]
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	03ff63ff 	.word	0x03ff63ff

0800304c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00f      	beq.n	8003086 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800306c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800307a:	2b28      	cmp	r3, #40	; 0x28
 800307c:	d003      	beq.n	8003086 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003084:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00f      	beq.n	80030b0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003096:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030a4:	2b28      	cmp	r3, #40	; 0x28
 80030a6:	d003      	beq.n	80030b0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80030ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	f003 0311 	and.w	r3, r3, #17
 80030c8:	2b11      	cmp	r3, #17
 80030ca:	d103      	bne.n	80030d4 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80030d4:	887b      	ldrh	r3, [r7, #2]
 80030d6:	f003 0312 	and.w	r3, r3, #18
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d103      	bne.n	80030e6 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f043 0320 	orr.w	r3, r3, #32
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	f003 0312 	and.w	r3, r3, #18
 80030ec:	2b12      	cmp	r3, #18
 80030ee:	d103      	bne.n	80030f8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43da      	mvns	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	400a      	ands	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	d138      	bne.n	800319e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003136:	2302      	movs	r3, #2
 8003138:	e032      	b.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2224      	movs	r2, #36	; 0x24
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003168:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
  }
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d139      	bne.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e033      	b.n	8003238 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	; 0x24
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003236:	2302      	movs	r3, #2
  }
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003252:	6013      	str	r3, [r2, #0]
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40007000 	.word	0x40007000

08003264 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a22      	ldr	r2, [pc, #136]	; (80032fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_PWREx_EnableOverDrive+0x98>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_PWREx_EnableOverDrive+0x9c>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003292:	f7fd fa0f 	bl	80006b4 <HAL_GetTick>
 8003296:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003298:	e009      	b.n	80032ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800329a:	f7fd fa0b 	bl	80006b4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a8:	d901      	bls.n	80032ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e022      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d1ee      	bne.n	800329a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c8:	f7fd f9f4 	bl	80006b4 <HAL_GetTick>
 80032cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ce:	e009      	b.n	80032e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d0:	f7fd f9f0 	bl	80006b4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032de:	d901      	bls.n	80032e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e007      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f0:	d1ee      	bne.n	80032d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	40007000 	.word	0x40007000

08003304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e25a      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8087 	beq.w	8003436 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003328:	4b96      	ldr	r3, [pc, #600]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b04      	cmp	r3, #4
 8003332:	d00c      	beq.n	800334e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003334:	4b93      	ldr	r3, [pc, #588]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d112      	bne.n	8003366 <HAL_RCC_OscConfig+0x62>
 8003340:	4b90      	ldr	r3, [pc, #576]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334c:	d10b      	bne.n	8003366 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334e:	4b8d      	ldr	r3, [pc, #564]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d06c      	beq.n	8003434 <HAL_RCC_OscConfig+0x130>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d168      	bne.n	8003434 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e234      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x7a>
 8003370:	4b84      	ldr	r3, [pc, #528]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a83      	ldr	r2, [pc, #524]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	e02e      	b.n	80033dc <HAL_RCC_OscConfig+0xd8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x9c>
 8003386:	4b7f      	ldr	r3, [pc, #508]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7e      	ldr	r2, [pc, #504]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7b      	ldr	r2, [pc, #492]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xd8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0xc0>
 80033aa:	4b76      	ldr	r3, [pc, #472]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a75      	ldr	r2, [pc, #468]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b73      	ldr	r3, [pc, #460]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a72      	ldr	r2, [pc, #456]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xd8>
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b6c      	ldr	r3, [pc, #432]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a6b      	ldr	r2, [pc, #428]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fd f966 	bl	80006b4 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fd f962 	bl	80006b4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1e8      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b61      	ldr	r3, [pc, #388]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xe8>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd f952 	bl	80006b4 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fd f94e 	bl	80006b4 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1d4      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x110>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d069      	beq.n	8003516 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003442:	4b50      	ldr	r3, [pc, #320]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x190>
 800345a:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x17a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1a8      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b41      	ldr	r3, [pc, #260]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	493d      	ldr	r1, [pc, #244]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e040      	b.n	8003516 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d023      	beq.n	80034e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fd f904 	bl	80006b4 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b0:	f7fd f900 	bl	80006b4 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e186      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ce:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4929      	ldr	r1, [pc, #164]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
 80034e2:	e018      	b.n	8003516 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd f8e0 	bl	80006b4 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f8:	f7fd f8dc 	bl	80006b4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e162      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d038      	beq.n	8003594 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d019      	beq.n	800355e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	4a15      	ldr	r2, [pc, #84]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd f8bd 	bl	80006b4 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353e:	f7fd f8b9 	bl	80006b4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e13f      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x23a>
 800355c:	e01a      	b.n	8003594 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_RCC_OscConfig+0x280>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356a:	f7fd f8a3 	bl	80006b4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003572:	f7fd f89f 	bl	80006b4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d903      	bls.n	8003588 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e125      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
 8003584:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	4b93      	ldr	r3, [pc, #588]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800358a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ee      	bne.n	8003572 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a0 	beq.w	80036e2 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b8d      	ldr	r3, [pc, #564]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	4b8a      	ldr	r3, [pc, #552]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	4a89      	ldr	r2, [pc, #548]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80035b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ba:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ca:	4b84      	ldr	r3, [pc, #528]	; (80037dc <HAL_RCC_OscConfig+0x4d8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d118      	bne.n	8003608 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035d6:	4b81      	ldr	r3, [pc, #516]	; (80037dc <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_RCC_OscConfig+0x4d8>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e2:	f7fd f867 	bl	80006b4 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035ea:	f7fd f863 	bl	80006b4 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b64      	cmp	r3, #100	; 0x64
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0e9      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fc:	4b77      	ldr	r3, [pc, #476]	; (80037dc <HAL_RCC_OscConfig+0x4d8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x31a>
 8003610:	4b71      	ldr	r3, [pc, #452]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a70      	ldr	r2, [pc, #448]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
 800361c:	e02d      	b.n	800367a <HAL_RCC_OscConfig+0x376>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x33c>
 8003626:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a6b      	ldr	r2, [pc, #428]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	4b69      	ldr	r3, [pc, #420]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a68      	ldr	r2, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	e01c      	b.n	800367a <HAL_RCC_OscConfig+0x376>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d10c      	bne.n	8003662 <HAL_RCC_OscConfig+0x35e>
 8003648:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a62      	ldr	r2, [pc, #392]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	4b60      	ldr	r3, [pc, #384]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a5f      	ldr	r2, [pc, #380]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	e00b      	b.n	800367a <HAL_RCC_OscConfig+0x376>
 8003662:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a5c      	ldr	r2, [pc, #368]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	4b5a      	ldr	r3, [pc, #360]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a59      	ldr	r2, [pc, #356]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d013      	beq.n	80036aa <HAL_RCC_OscConfig+0x3a6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fd f817 	bl	80006b4 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x398>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fd f813 	bl	80006b4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b32      	cmp	r3, #50	; 0x32
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e099      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x386>
 80036a8:	e012      	b.n	80036d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fd f803 	bl	80006b4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fc ffff 	bl	80006b4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b32      	cmp	r3, #50	; 0x32
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e085      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a3f      	ldr	r2, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d071      	beq.n	80037ce <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d069      	beq.n	80037ca <HAL_RCC_OscConfig+0x4c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d14b      	bne.n	8003796 <HAL_RCC_OscConfig+0x492>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fc ffd3 	bl	80006b4 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003712:	f7fc ffcf 	bl	80006b4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x420>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e055      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x40e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	019b      	lsls	r3, r3, #6
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	3b01      	subs	r3, #1
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	071b      	lsls	r3, r3, #28
 800375c:	491e      	ldr	r1, [pc, #120]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fc ffa1 	bl	80006b4 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fc ff9d 	bl	80006b4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e023      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x472>
 8003794:	e01b      	b.n	80037ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 800379c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fc ff87 	bl	80006b4 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x4b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fc ff83 	bl	80006b4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e009      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x4d4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x4a6>
 80037c8:	e001      	b.n	80037ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_RCC_OscConfig+0x4cc>
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000

080037e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0ce      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b69      	ldr	r3, [pc, #420]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 020f 	bic.w	r2, r3, #15
 800380e:	4964      	ldr	r1, [pc, #400]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b62      	ldr	r3, [pc, #392]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b6      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b52      	ldr	r3, [pc, #328]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a51      	ldr	r2, [pc, #324]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494c      	ldr	r1, [pc, #304]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d040      	beq.n	8003904 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d115      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07d      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	4b40      	ldr	r3, [pc, #256]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e071      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e069      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c2:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4935      	ldr	r1, [pc, #212]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fc feee 	bl	80006b4 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fc feea 	bl	80006b4 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e051      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 020c 	and.w	r2, r3, #12
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	d1eb      	bne.n	80038dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003904:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d210      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 020f 	bic.w	r2, r3, #15
 800391a:	4921      	ldr	r1, [pc, #132]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e030      	b.n	8003996 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4915      	ldr	r1, [pc, #84]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490d      	ldr	r1, [pc, #52]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f81d 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003976:	4601      	mov	r1, r0
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	5cd3      	ldrb	r3, [r2, r3]
 8003986:	fa21 f303 	lsr.w	r3, r1, r3
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <HAL_RCC_ClockConfig+0x1cc>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800398e:	2000      	movs	r0, #0
 8003990:	f7fc fe4c 	bl	800062c <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00
 80039a4:	40023800 	.word	0x40023800
 80039a8:	0800c2a8 	.word	0x0800c2a8
 80039ac:	20000088 	.word	0x20000088

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	2300      	movs	r3, #0
 80039c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c6:	4b63      	ldr	r3, [pc, #396]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d007      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x32>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d008      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x38>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 80b4 	bne.w	8003b44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039de:	60bb      	str	r3, [r7, #8]
       break;
 80039e0:	e0b3      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039e2:	4b5e      	ldr	r3, [pc, #376]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039e4:	60bb      	str	r3, [r7, #8]
      break;
 80039e6:	e0b0      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e8:	4b5a      	ldr	r3, [pc, #360]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039f2:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04a      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fe:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	f04f 0400 	mov.w	r4, #0
 8003a08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	ea03 0501 	and.w	r5, r3, r1
 8003a14:	ea04 0602 	and.w	r6, r4, r2
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	f04f 0400 	mov.w	r4, #0
 8003a24:	0154      	lsls	r4, r2, #5
 8003a26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a2a:	014b      	lsls	r3, r1, #5
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4622      	mov	r2, r4
 8003a30:	1b49      	subs	r1, r1, r5
 8003a32:	eb62 0206 	sbc.w	r2, r2, r6
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	0194      	lsls	r4, r2, #6
 8003a40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a44:	018b      	lsls	r3, r1, #6
 8003a46:	1a5b      	subs	r3, r3, r1
 8003a48:	eb64 0402 	sbc.w	r4, r4, r2
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	00e2      	lsls	r2, r4, #3
 8003a56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a5a:	00d9      	lsls	r1, r3, #3
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4614      	mov	r4, r2
 8003a60:	195b      	adds	r3, r3, r5
 8003a62:	eb44 0406 	adc.w	r4, r4, r6
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	0262      	lsls	r2, r4, #9
 8003a70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a74:	0259      	lsls	r1, r3, #9
 8003a76:	460b      	mov	r3, r1
 8003a78:	4614      	mov	r4, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f04f 0400 	mov.w	r4, #0
 8003a84:	461a      	mov	r2, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	f7fc fc42 	bl	8000310 <__aeabi_uldivmod>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e049      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a94:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	f04f 0400 	mov.w	r4, #0
 8003a9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	ea03 0501 	and.w	r5, r3, r1
 8003aaa:	ea04 0602 	and.w	r6, r4, r2
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	f04f 0400 	mov.w	r4, #0
 8003aba:	0154      	lsls	r4, r2, #5
 8003abc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ac0:	014b      	lsls	r3, r1, #5
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	1b49      	subs	r1, r1, r5
 8003ac8:	eb62 0206 	sbc.w	r2, r2, r6
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	0194      	lsls	r4, r2, #6
 8003ad6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ada:	018b      	lsls	r3, r1, #6
 8003adc:	1a5b      	subs	r3, r3, r1
 8003ade:	eb64 0402 	sbc.w	r4, r4, r2
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	00e2      	lsls	r2, r4, #3
 8003aec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003af0:	00d9      	lsls	r1, r3, #3
 8003af2:	460b      	mov	r3, r1
 8003af4:	4614      	mov	r4, r2
 8003af6:	195b      	adds	r3, r3, r5
 8003af8:	eb44 0406 	adc.w	r4, r4, r6
 8003afc:	f04f 0100 	mov.w	r1, #0
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	02a2      	lsls	r2, r4, #10
 8003b06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b0a:	0299      	lsls	r1, r3, #10
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4614      	mov	r4, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	4621      	mov	r1, r4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f04f 0400 	mov.w	r4, #0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	f7fc fbf7 	bl	8000310 <__aeabi_uldivmod>
 8003b22:	4603      	mov	r3, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	60bb      	str	r3, [r7, #8]
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b46:	60bb      	str	r3, [r7, #8]
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b54:	40023800 	.word	0x40023800
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	007a1200 	.word	0x007a1200

08003b60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000088 	.word	0x20000088

08003b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b7c:	f7ff fff0 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b80:	4601      	mov	r1, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0a9b      	lsrs	r3, r3, #10
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4a03      	ldr	r2, [pc, #12]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0800c2b8 	.word	0x0800c2b8

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ba4:	f7ff ffdc 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0b5b      	lsrs	r3, r3, #13
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4a03      	ldr	r2, [pc, #12]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	0800c2b8 	.word	0x0800c2b8

08003bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bf0:	4b68      	ldr	r3, [pc, #416]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a67      	ldr	r2, [pc, #412]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bfa:	6093      	str	r3, [r2, #8]
 8003bfc:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	4963      	ldr	r1, [pc, #396]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c22:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	4958      	ldr	r1, [pc, #352]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c40:	d101      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c5e:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4949      	ldr	r1, [pc, #292]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8089 	beq.w	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cc4:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a33      	ldr	r2, [pc, #204]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fc fcf0 	bl	80006b4 <HAL_GetTick>
 8003cd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fc fcec 	bl	80006b4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e38b      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cea:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf6:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d033      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d02c      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d112      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fc fcb4 	bl	80006b4 <HAL_GetTick>
 8003d4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fc fcb0 	bl	80006b4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b32      	cmp	r3, #50	; 0x32
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x19a>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e34f      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7a:	d111      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	4901      	ldr	r1, [pc, #4]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
 8003d92:	e00b      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	0ffffcff 	.word	0x0ffffcff
 8003da0:	4bb3      	ldr	r3, [pc, #716]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4ab2      	ldr	r2, [pc, #712]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003da6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003daa:	6093      	str	r3, [r2, #8]
 8003dac:	4bb0      	ldr	r3, [pc, #704]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	49ad      	ldr	r1, [pc, #692]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d010      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dca:	4ba9      	ldr	r3, [pc, #676]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd0:	4aa7      	ldr	r2, [pc, #668]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003dda:	4ba5      	ldr	r3, [pc, #660]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003ddc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	49a2      	ldr	r1, [pc, #648]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df8:	4b9d      	ldr	r3, [pc, #628]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e06:	499a      	ldr	r1, [pc, #616]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x268>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e1a:	4b95      	ldr	r3, [pc, #596]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e28:	4991      	ldr	r1, [pc, #580]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e3c:	4b8c      	ldr	r3, [pc, #560]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4a:	4989      	ldr	r1, [pc, #548]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e5e:	4b84      	ldr	r3, [pc, #528]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4980      	ldr	r1, [pc, #512]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e80:	4b7b      	ldr	r3, [pc, #492]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	4978      	ldr	r1, [pc, #480]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea2:	4b73      	ldr	r3, [pc, #460]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f023 020c 	bic.w	r2, r3, #12
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	496f      	ldr	r1, [pc, #444]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec4:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	4967      	ldr	r1, [pc, #412]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee6:	4b62      	ldr	r3, [pc, #392]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	495e      	ldr	r1, [pc, #376]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f08:	4b59      	ldr	r3, [pc, #356]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	4956      	ldr	r1, [pc, #344]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f2a:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	494d      	ldr	r1, [pc, #308]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f4c:	4b48      	ldr	r3, [pc, #288]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	4945      	ldr	r1, [pc, #276]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	493c      	ldr	r1, [pc, #240]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f90:	4b37      	ldr	r3, [pc, #220]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f9e:	4934      	ldr	r1, [pc, #208]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d011      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fb2:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc0:	492b      	ldr	r1, [pc, #172]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      pllsaiused = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    pllsaiused = 1;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004000:	491b      	ldr	r1, [pc, #108]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004014:	4b16      	ldr	r3, [pc, #88]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004024:	4912      	ldr	r1, [pc, #72]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x488>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004048:	4909      	ldr	r1, [pc, #36]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800405e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004062:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	4985      	ldr	r1, [pc, #532]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004088:	4b80      	ldr	r3, [pc, #512]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800408a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004098:	497c      	ldr	r1, [pc, #496]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d005      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ae:	f040 80d6 	bne.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x696>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040b2:	4b76      	ldr	r3, [pc, #472]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a75      	ldr	r2, [pc, #468]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80040b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040be:	f7fc faf9 	bl	80006b4 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040c6:	f7fc faf5 	bl	80006b4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b64      	cmp	r3, #100	; 0x64
 80040d2:	d901      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x510>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e194      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040d8:	4b6c      	ldr	r3, [pc, #432]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f0      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d021      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d11d      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040f8:	4b64      	ldr	r3, [pc, #400]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004106:	4b61      	ldr	r3, [pc, #388]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410c:	0e1b      	lsrs	r3, r3, #24
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	019a      	lsls	r2, r3, #6
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	071b      	lsls	r3, r3, #28
 800412c:	4957      	ldr	r1, [pc, #348]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x598>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02e      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415e:	d129      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004160:	4b4a      	ldr	r3, [pc, #296]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004174:	0f1b      	lsrs	r3, r3, #28
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	019a      	lsls	r2, r3, #6
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	431a      	orrs	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	071b      	lsls	r3, r3, #28
 8004194:	493d      	ldr	r1, [pc, #244]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800419e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a2:	f023 021f 	bic.w	r2, r3, #31
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4937      	ldr	r1, [pc, #220]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x634>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c6:	0e1b      	lsrs	r3, r3, #24
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d4:	0f1b      	lsrs	r3, r3, #28
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	019a      	lsls	r2, r3, #6
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	431a      	orrs	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	431a      	orrs	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	071b      	lsls	r3, r3, #28
 80041f4:	4925      	ldr	r1, [pc, #148]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d011      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x664>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	019a      	lsls	r2, r3, #6
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	061b      	lsls	r3, r3, #24
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	071b      	lsls	r3, r3, #28
 8004224:	4919      	ldr	r1, [pc, #100]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800422c:	4b17      	ldr	r3, [pc, #92]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fc fa3c 	bl	80006b4 <HAL_GetTick>
 800423c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004240:	f7fc fa38 	bl	80006b4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0d7      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x678>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 80cd 	bne.w	8004400 <HAL_RCCEx_PeriphCLKConfig+0x838>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800426c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004272:	f7fc fa1f 	bl	80006b4 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800427a:	f7fc fa1b 	bl	80006b4 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	; 0x64
 8004286:	d903      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0ba      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800428c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004290:	4b5e      	ldr	r3, [pc, #376]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800429c:	d0ed      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x6b2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02e      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x754>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d12a      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x754>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042c6:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042d4:	4b4d      	ldr	r3, [pc, #308]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	0f1b      	lsrs	r3, r3, #28
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	019a      	lsls	r2, r3, #6
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	061b      	lsls	r3, r3, #24
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	071b      	lsls	r3, r3, #28
 80042fa:	4944      	ldr	r1, [pc, #272]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004302:	4b42      	ldr	r3, [pc, #264]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004308:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	493d      	ldr	r1, [pc, #244]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d022      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800432c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004330:	d11d      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004340:	4b32      	ldr	r3, [pc, #200]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	0f1b      	lsrs	r3, r3, #28
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	019a      	lsls	r2, r3, #6
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	4929      	ldr	r1, [pc, #164]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d028      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x804>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800437a:	4b24      	ldr	r3, [pc, #144]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	019a      	lsls	r2, r3, #6
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	431a      	orrs	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	061b      	lsls	r3, r3, #24
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	071b      	lsls	r3, r3, #28
 80043ae:	4917      	ldr	r1, [pc, #92]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4911      	ldr	r1, [pc, #68]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0e      	ldr	r2, [pc, #56]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d8:	f7fc f96c 	bl	80006b4 <HAL_GetTick>
 80043dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x82a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043e0:	f7fc f968 	bl	80006b4 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e007      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043fe:	d1ef      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800

08004410 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e06b      	b.n	80044fa <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7f5b      	ldrb	r3, [r3, #29]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f004 fdde 	bl	8008ff4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	22ca      	movs	r2, #202	; 0xca
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2253      	movs	r2, #83	; 0x53
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa96 	bl	8004980 <RTC_EnterInitMode>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2204      	movs	r2, #4
 8004466:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e046      	b.n	80044fa <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <HAL_RTC_Init+0xf4>)
 8004478:	400b      	ands	r3, r1
 800447a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68d2      	ldr	r2, [r2, #12]
 80044a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6919      	ldr	r1, [r3, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	041a      	lsls	r2, r3, #16
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0208 	bic.w	r2, r2, #8
 80044d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	ff8fffbf 	.word	0xff8fffbf

08004508 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	7f1b      	ldrb	r3, [r3, #28]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_RTC_SetTime+0x1c>
 8004520:	2302      	movs	r3, #2
 8004522:	e0a8      	b.n	8004676 <HAL_RTC_SetTime+0x16e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2202      	movs	r2, #2
 800452e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d126      	bne.n	8004584 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fa42 	bl	80049d8 <RTC_ByteToBcd2>
 8004554:	4603      	mov	r3, r0
 8004556:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fa3b 	bl	80049d8 <RTC_ByteToBcd2>
 8004562:	4603      	mov	r3, r0
 8004564:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004566:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	789b      	ldrb	r3, [r3, #2]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa33 	bl	80049d8 <RTC_ByteToBcd2>
 8004572:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004574:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	7b1b      	ldrb	r3, [r3, #12]
 800457c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e018      	b.n	80045b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80045a4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80045aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	7b1b      	ldrb	r3, [r3, #12]
 80045b0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	22ca      	movs	r2, #202	; 0xca
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2253      	movs	r2, #83	; 0x53
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f9da 	bl	8004980 <RTC_EnterInitMode>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	22ff      	movs	r2, #255	; 0xff
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2204      	movs	r2, #4
 80045de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e045      	b.n	8004676 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	4b23      	ldr	r3, [pc, #140]	; (8004680 <HAL_RTC_SetTime+0x178>)
 80045f2:	400b      	ands	r3, r1
 80045f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004604:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6899      	ldr	r1, [r3, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800462c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d111      	bne.n	8004660 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f977 	bl	8004930 <HAL_RTC_WaitForSynchro>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2204      	movs	r2, #4
 8004654:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e00a      	b.n	8004676 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	22ff      	movs	r2, #255	; 0xff
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd90      	pop	{r4, r7, pc}
 800467e:	bf00      	nop
 8004680:	007f7f7f 	.word	0x007f7f7f

08004684 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RTC_GetTime+0xb8>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11a      	bne.n	8004732 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f987 	bl	8004a14 <RTC_Bcd2ToByte>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f97e 	bl	8004a14 <RTC_Bcd2ToByte>
 8004718:	4603      	mov	r3, r0
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	789b      	ldrb	r3, [r3, #2]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f975 	bl	8004a14 <RTC_Bcd2ToByte>
 800472a:	4603      	mov	r3, r0
 800472c:	461a      	mov	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	007f7f7f 	.word	0x007f7f7f

08004740 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	7f1b      	ldrb	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_RTC_SetDate+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e092      	b.n	8004882 <HAL_RTC_SetDate+0x142>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10e      	bne.n	800478c <HAL_RTC_SetDate+0x4c>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	f023 0310 	bic.w	r3, r3, #16
 8004782:	b2db      	uxtb	r3, r3
 8004784:	330a      	adds	r3, #10
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11c      	bne.n	80047cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	78db      	ldrb	r3, [r3, #3]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f91e 	bl	80049d8 <RTC_ByteToBcd2>
 800479c:	4603      	mov	r3, r0
 800479e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f917 	bl	80049d8 <RTC_ByteToBcd2>
 80047aa:	4603      	mov	r3, r0
 80047ac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80047ae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	789b      	ldrb	r3, [r3, #2]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f90f 	bl	80049d8 <RTC_ByteToBcd2>
 80047ba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80047bc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e00e      	b.n	80047ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	78db      	ldrb	r3, [r3, #3]
 80047d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80047d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80047de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	22ca      	movs	r2, #202	; 0xca
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2253      	movs	r2, #83	; 0x53
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f8c0 	bl	8004980 <RTC_EnterInitMode>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2204      	movs	r2, #4
 8004812:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e031      	b.n	8004882 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_RTC_SetDate+0x14c>)
 8004826:	400b      	ands	r3, r1
 8004828:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004838:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d111      	bne.n	800486c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f871 	bl	8004930 <HAL_RTC_WaitForSynchro>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	22ff      	movs	r2, #255	; 0xff
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2204      	movs	r2, #4
 8004860:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e00a      	b.n	8004882 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	22ff      	movs	r2, #255	; 0xff
 8004872:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004880:	2300      	movs	r3, #0
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	bd90      	pop	{r4, r7, pc}
 800488a:	bf00      	nop
 800488c:	00ffff3f 	.word	0x00ffff3f

08004890 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	4b21      	ldr	r3, [pc, #132]	; (800492c <HAL_RTC_GetDate+0x9c>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	0b5b      	lsrs	r3, r3, #13
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11a      	bne.n	8004920 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	78db      	ldrb	r3, [r3, #3]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f890 	bl	8004a14 <RTC_Bcd2ToByte>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 f887 	bl	8004a14 <RTC_Bcd2ToByte>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	789b      	ldrb	r3, [r3, #2]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f87e 	bl	8004a14 <RTC_Bcd2ToByte>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	00ffff3f 	.word	0x00ffff3f

08004930 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800494a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800494c:	f7fb feb2 	bl	80006b4 <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004952:	e009      	b.n	8004968 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004954:	f7fb feae 	bl	80006b4 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004962:	d901      	bls.n	8004968 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e007      	b.n	8004978 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0ee      	beq.n	8004954 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d119      	bne.n	80049ce <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049a4:	f7fb fe86 	bl	80006b4 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049aa:	e009      	b.n	80049c0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049ac:	f7fb fe82 	bl	80006b4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ba:	d901      	bls.n	80049c0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e007      	b.n	80049d0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ee      	beq.n	80049ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80049e6:	e005      	b.n	80049f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	3b0a      	subs	r3, #10
 80049f2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	2b09      	cmp	r3, #9
 80049f8:	d8f6      	bhi.n	80049e8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	b2db      	uxtb	r3, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	b2db      	uxtb	r3, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e084      	b.n	8004b6c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f004 fad3 	bl	8009028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a98:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa2:	d902      	bls.n	8004aaa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e002      	b.n	8004ab0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ab8:	d007      	beq.n	8004aca <HAL_SPI_Init+0x7a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ada:	d903      	bls.n	8004ae4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ae2:	e002      	b.n	8004aea <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	ea42 0103 	orr.w	r1, r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f003 0204 	and.w	r2, r3, #4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	ea42 0103 	orr.w	r1, r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b82:	2301      	movs	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x26>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e1fb      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x41e>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba2:	f7fb fd87 	bl	80006b4 <HAL_GetTick>
 8004ba6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bb6:	887b      	ldrh	r3, [r7, #2]
 8004bb8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bbe:	7efb      	ldrb	r3, [r7, #27]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d00e      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x6e>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bca:	d106      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x66>
 8004bd4:	7efb      	ldrb	r3, [r7, #27]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d003      	beq.n	8004be2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004be0:	e1cd      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x80>
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bfa:	e1c0      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d003      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	887a      	ldrh	r2, [r7, #2]
 8004c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	887a      	ldrh	r2, [r7, #2]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c52:	d802      	bhi.n	8004c5a <HAL_SPI_TransmitReceive+0xe6>
 8004c54:	8a3b      	ldrh	r3, [r7, #16]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d908      	bls.n	8004c6c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	e007      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d007      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca2:	d97c      	bls.n	8004d9e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x13e>
 8004cac:	8a7b      	ldrh	r3, [r7, #18]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d169      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd6:	e056      	b.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d11b      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x1aa>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d016      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x1aa>
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d113      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11c      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x1f2>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	b292      	uxth	r2, r2
 8004d44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	1c9a      	adds	r2, r3, #2
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d62:	2301      	movs	r3, #1
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d66:	f7fb fca5 	bl	80006b4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d807      	bhi.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d003      	beq.n	8004d86 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d84:	e0fb      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1a3      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x164>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d19d      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x164>
 8004d9c:	e0df      	b.n	8004f5e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x23a>
 8004da6:	8a7b      	ldrh	r3, [r7, #18]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	f040 80cb 	bne.w	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d912      	bls.n	8004dde <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	881a      	ldrh	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b02      	subs	r3, #2
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ddc:	e0b2      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e04:	e09e      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d134      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x30a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02f      	beq.n	8004e7e <HAL_SPI_TransmitReceive+0x30a>
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d12c      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d912      	bls.n	8004e54 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	881a      	ldrh	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	1c9a      	adds	r2, r3, #2
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b02      	subs	r3, #2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e52:	e012      	b.n	8004e7a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	7812      	ldrb	r2, [r2, #0]
 8004e60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d148      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x3aa>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d042      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d923      	bls.n	8004eec <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	b292      	uxth	r2, r2
 8004eb0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	1c9a      	adds	r2, r3, #2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b02      	subs	r3, #2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d81f      	bhi.n	8004f1a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	e016      	b.n	8004f1a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f103 020c 	add.w	r2, r3, #12
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f1e:	f7fb fbc9 	bl	80006b4 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d803      	bhi.n	8004f36 <HAL_SPI_TransmitReceive+0x3c2>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x3c8>
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f42:	e01c      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f47f af5b 	bne.w	8004e06 <HAL_SPI_TransmitReceive+0x292>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af54 	bne.w	8004e06 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f8f0 	bl	8005148 <SPI_EndRxTxTransaction>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d006      	beq.n	8004f7c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60
 8004f7a:	e000      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004f7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3728      	adds	r7, #40	; 0x28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004faa:	e04c      	b.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d048      	beq.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fb4:	f7fb fb7e 	bl	80006b4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d902      	bls.n	8004fca <SPI_WaitFlagStateUntilTimeout+0x30>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d13d      	bne.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe2:	d111      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fec:	d004      	beq.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d107      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d10f      	bne.n	8005032 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e00f      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	429a      	cmp	r2, r3
 8005062:	d1a3      	bne.n	8004fac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800507c:	e057      	b.n	800512e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005084:	d106      	bne.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d048      	beq.n	800512e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800509c:	f7fb fb0a 	bl	80006b4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d902      	bls.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d13d      	bne.n	800512e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ca:	d111      	bne.n	80050f0 <SPI_WaitFifoStateUntilTimeout+0x82>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	d004      	beq.n	80050e0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050de:	d107      	bne.n	80050f0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f8:	d10f      	bne.n	800511a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e008      	b.n	8005140 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d19f      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2200      	movs	r2, #0
 800515c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff ff84 	bl	800506e <SPI_WaitFifoStateUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e027      	b.n	80051cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff ff07 	bl	8004f9a <SPI_WaitFlagStateUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e014      	b.n	80051cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ff5d 	bl	800506e <SPI_WaitFifoStateUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e000      	b.n	80051cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01d      	b.n	8005222 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f003 ffda 	bl	80091b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 f97c 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <HAL_TIM_Base_Start_IT+0x50>)
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b06      	cmp	r3, #6
 8005254:	d00b      	beq.n	800526e <HAL_TIM_Base_Start_IT+0x42>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525c:	d007      	beq.n	800526e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	00010007 	.word	0x00010007

08005280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0202 	mvn.w	r2, #2
 80052ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f905 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8f7 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f908 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0204 	mvn.w	r2, #4
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8db 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f8cd 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f8de 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b08      	cmp	r3, #8
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b08      	cmp	r3, #8
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0208 	mvn.w	r2, #8
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2204      	movs	r2, #4
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8b1 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8a3 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8b4 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b10      	cmp	r3, #16
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b10      	cmp	r3, #16
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0210 	mvn.w	r2, #16
 80053a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2208      	movs	r2, #8
 80053ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f887 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f879 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f88a 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10e      	bne.n	8005404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0201 	mvn.w	r2, #1
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f003 fc76 	bl	8008cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d10e      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d107      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f976 	bl	800571c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543e:	d10e      	bne.n	800545e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d107      	bne.n	800545e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f969 	bl	8005730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d10e      	bne.n	800548a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d107      	bne.n	800548a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f838 	bl	80054fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b20      	cmp	r3, #32
 8005496:	d10e      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d107      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0220 	mvn.w	r2, #32
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f929 	bl	8005708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a40      	ldr	r2, [pc, #256]	; (8005624 <TIM_Base_SetConfig+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d00f      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3d      	ldr	r2, [pc, #244]	; (8005628 <TIM_Base_SetConfig+0x118>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3c      	ldr	r2, [pc, #240]	; (800562c <TIM_Base_SetConfig+0x11c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <TIM_Base_SetConfig+0x120>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3a      	ldr	r2, [pc, #232]	; (8005634 <TIM_Base_SetConfig+0x124>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2f      	ldr	r2, [pc, #188]	; (8005624 <TIM_Base_SetConfig+0x114>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d027      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <TIM_Base_SetConfig+0x118>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d023      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2b      	ldr	r2, [pc, #172]	; (800562c <TIM_Base_SetConfig+0x11c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <TIM_Base_SetConfig+0x120>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a29      	ldr	r2, [pc, #164]	; (8005634 <TIM_Base_SetConfig+0x124>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d017      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a28      	ldr	r2, [pc, #160]	; (8005638 <TIM_Base_SetConfig+0x128>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a27      	ldr	r2, [pc, #156]	; (800563c <TIM_Base_SetConfig+0x12c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a26      	ldr	r2, [pc, #152]	; (8005640 <TIM_Base_SetConfig+0x130>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <TIM_Base_SetConfig+0x134>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a24      	ldr	r2, [pc, #144]	; (8005648 <TIM_Base_SetConfig+0x138>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a23      	ldr	r2, [pc, #140]	; (800564c <TIM_Base_SetConfig+0x13c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <TIM_Base_SetConfig+0x114>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <TIM_Base_SetConfig+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	615a      	str	r2, [r3, #20]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000
 8005628:	40000400 	.word	0x40000400
 800562c:	40000800 	.word	0x40000800
 8005630:	40000c00 	.word	0x40000c00
 8005634:	40010400 	.word	0x40010400
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800
 8005644:	40001800 	.word	0x40001800
 8005648:	40001c00 	.word	0x40001c00
 800564c:	40002000 	.word	0x40002000

08005650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005664:	2302      	movs	r3, #2
 8005666:	e045      	b.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40010000 	.word	0x40010000
 8005704:	40010400 	.word	0x40010400

08005708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e040      	b.n	80057d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f003 fd6c 	bl	8009244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2224      	movs	r2, #36	; 0x24
 8005770:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa66 	bl	8005c54 <UART_SetConfig>
 8005788:	4603      	mov	r3, r0
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e022      	b.n	80057d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fcfe 	bl	800619c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057be:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fd85 	bl	80062e0 <UART_CheckIdleState>
 80057d6:	4603      	mov	r3, r0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d164      	bne.n	80058c0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_UART_Transmit_DMA+0x22>
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e05d      	b.n	80058c2 <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UART_Transmit_DMA+0x34>
 8005810:	2302      	movs	r3, #2
 8005812:	e056      	b.n	80058c2 <HAL_UART_Transmit_DMA+0xe2>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2221      	movs	r2, #33	; 0x21
 800583c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005842:	2b00      	cmp	r3, #0
 8005844:	d02a      	beq.n	800589c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800584a:	4a20      	ldr	r2, [pc, #128]	; (80058cc <HAL_UART_Transmit_DMA+0xec>)
 800584c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005852:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_UART_Transmit_DMA+0xf0>)
 8005854:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_UART_Transmit_DMA+0xf4>)
 800585c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005862:	2200      	movs	r2, #0
 8005864:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586e:	4619      	mov	r1, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3328      	adds	r3, #40	; 0x28
 8005876:	461a      	mov	r2, r3
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	f7fb fe35 	bl	80014e8 <HAL_DMA_Start_IT>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2210      	movs	r2, #16
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e012      	b.n	80058c2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2240      	movs	r2, #64	; 0x40
 80058a2:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	08006439 	.word	0x08006439
 80058d0:	08006489 	.word	0x08006489
 80058d4:	08006525 	.word	0x08006525

080058d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d16c      	bne.n	80059c8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_UART_Receive_DMA+0x22>
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e065      	b.n	80059ca <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_UART_Receive_DMA+0x34>
 8005908:	2302      	movs	r3, #2
 800590a:	e05e      	b.n	80059ca <HAL_UART_Receive_DMA+0xf2>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	88fa      	ldrh	r2, [r7, #6]
 800591e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2222      	movs	r2, #34	; 0x22
 800592c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02a      	beq.n	800598c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593a:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <HAL_UART_Receive_DMA+0xfc>)
 800593c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005942:	4a25      	ldr	r2, [pc, #148]	; (80059d8 <HAL_UART_Receive_DMA+0x100>)
 8005944:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800594a:	4a24      	ldr	r2, [pc, #144]	; (80059dc <HAL_UART_Receive_DMA+0x104>)
 800594c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005952:	2200      	movs	r2, #0
 8005954:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3324      	adds	r3, #36	; 0x24
 8005960:	4619      	mov	r1, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	461a      	mov	r2, r3
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	f7fb fdbd 	bl	80014e8 <HAL_DMA_Start_IT>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2210      	movs	r2, #16
 8005978:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e01e      	b.n	80059ca <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	080064a5 	.word	0x080064a5
 80059d8:	08006509 	.word	0x08006509
 80059dc:	08006525 	.word	0x08006525

080059e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d113      	bne.n	8005a36 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00e      	beq.n	8005a36 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80eb 	beq.w	8005c02 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
      }
      return;
 8005a34:	e0e5      	b.n	8005c02 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80c0 	beq.w	8005bbe <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80b5 	beq.w	8005bbe <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00e      	beq.n	8005a7c <HAL_UART_IRQHandler+0x9c>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d009      	beq.n	8005a7c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a74:	f043 0201 	orr.w	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00e      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xc4>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2202      	movs	r2, #2
 8005a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a9c:	f043 0204 	orr.w	r2, r3, #4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <HAL_UART_IRQHandler+0xec>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2204      	movs	r2, #4
 8005abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	f043 0202 	orr.w	r2, r3, #2
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2208      	movs	r2, #8
 8005af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af6:	f043 0208 	orr.w	r2, r3, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d07f      	beq.n	8005c06 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d004      	beq.n	8005b48 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d031      	beq.n	8005bac <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fc55 	bl	80063f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d123      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d013      	beq.n	8005b9c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b78:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <HAL_UART_IRQHandler+0x234>)
 8005b7a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fb fd11 	bl	80015a8 <HAL_DMA_Abort_IT>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d016      	beq.n	8005bba <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b96:	4610      	mov	r0, r2
 8005b98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9a:	e00e      	b.n	8005bba <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f84f 	bl	8005c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba2:	e00a      	b.n	8005bba <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f84b 	bl	8005c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005baa:	e006      	b.n	8005bba <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f847 	bl	8005c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005bb8:	e025      	b.n	8005c06 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bba:	bf00      	nop
    return;
 8005bbc:	e023      	b.n	8005c06 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d017      	beq.n	8005c0a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
    }
    return;
 8005be2:	e012      	b.n	8005c0a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00e      	beq.n	8005c0c <HAL_UART_IRQHandler+0x22c>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fce5 	bl	80065c8 <UART_EndTransmit_IT>
    return;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <HAL_UART_IRQHandler+0x22c>
      return;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <HAL_UART_IRQHandler+0x22c>
    return;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <HAL_UART_IRQHandler+0x22c>
    return;
 8005c0a:	bf00      	nop
  }

}
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	0800659d 	.word	0x0800659d

08005c18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4bb1      	ldr	r3, [pc, #708]	; (8005f48 <UART_SetConfig+0x2f4>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	6939      	ldr	r1, [r7, #16]
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a9f      	ldr	r2, [pc, #636]	; (8005f4c <UART_SetConfig+0x2f8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d121      	bne.n	8005d18 <UART_SetConfig+0xc4>
 8005cd4:	4b9e      	ldr	r3, [pc, #632]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d816      	bhi.n	8005d10 <UART_SetConfig+0xbc>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <UART_SetConfig+0x94>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005cf9 	.word	0x08005cf9
 8005cec:	08005d05 	.word	0x08005d05
 8005cf0:	08005cff 	.word	0x08005cff
 8005cf4:	08005d0b 	.word	0x08005d0b
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e151      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e14e      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d04:	2304      	movs	r3, #4
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e14b      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	77fb      	strb	r3, [r7, #31]
 8005d0e:	e148      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d10:	2310      	movs	r3, #16
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	bf00      	nop
 8005d16:	e144      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a8d      	ldr	r2, [pc, #564]	; (8005f54 <UART_SetConfig+0x300>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d134      	bne.n	8005d8c <UART_SetConfig+0x138>
 8005d22:	4b8b      	ldr	r3, [pc, #556]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f003 030c 	and.w	r3, r3, #12
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d829      	bhi.n	8005d84 <UART_SetConfig+0x130>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0xe4>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005d85 	.word	0x08005d85
 8005d40:	08005d85 	.word	0x08005d85
 8005d44:	08005d85 	.word	0x08005d85
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d85 	.word	0x08005d85
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005d85 	.word	0x08005d85
 8005d58:	08005d73 	.word	0x08005d73
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d7f 	.word	0x08005d7f
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e117      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d72:	2302      	movs	r3, #2
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e114      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e111      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e10e      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d84:	2310      	movs	r3, #16
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	bf00      	nop
 8005d8a:	e10a      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a71      	ldr	r2, [pc, #452]	; (8005f58 <UART_SetConfig+0x304>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d120      	bne.n	8005dd8 <UART_SetConfig+0x184>
 8005d96:	4b6e      	ldr	r3, [pc, #440]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d00f      	beq.n	8005dc4 <UART_SetConfig+0x170>
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d802      	bhi.n	8005dae <UART_SetConfig+0x15a>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <UART_SetConfig+0x164>
 8005dac:	e010      	b.n	8005dd0 <UART_SetConfig+0x17c>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d005      	beq.n	8005dbe <UART_SetConfig+0x16a>
 8005db2:	2b30      	cmp	r3, #48	; 0x30
 8005db4:	d009      	beq.n	8005dca <UART_SetConfig+0x176>
 8005db6:	e00b      	b.n	8005dd0 <UART_SetConfig+0x17c>
 8005db8:	2300      	movs	r3, #0
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e0f1      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e0ee      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e0eb      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e0e8      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	bf00      	nop
 8005dd6:	e0e4      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a5f      	ldr	r2, [pc, #380]	; (8005f5c <UART_SetConfig+0x308>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d120      	bne.n	8005e24 <UART_SetConfig+0x1d0>
 8005de2:	4b5b      	ldr	r3, [pc, #364]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d00f      	beq.n	8005e10 <UART_SetConfig+0x1bc>
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d802      	bhi.n	8005dfa <UART_SetConfig+0x1a6>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <UART_SetConfig+0x1b0>
 8005df8:	e010      	b.n	8005e1c <UART_SetConfig+0x1c8>
 8005dfa:	2b80      	cmp	r3, #128	; 0x80
 8005dfc:	d005      	beq.n	8005e0a <UART_SetConfig+0x1b6>
 8005dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8005e00:	d009      	beq.n	8005e16 <UART_SetConfig+0x1c2>
 8005e02:	e00b      	b.n	8005e1c <UART_SetConfig+0x1c8>
 8005e04:	2300      	movs	r3, #0
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e0cb      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e0c8      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e10:	2304      	movs	r3, #4
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e0c5      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e16:	2308      	movs	r3, #8
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e0c2      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	77fb      	strb	r3, [r7, #31]
 8005e20:	bf00      	nop
 8005e22:	e0be      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a4d      	ldr	r2, [pc, #308]	; (8005f60 <UART_SetConfig+0x30c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d124      	bne.n	8005e78 <UART_SetConfig+0x224>
 8005e2e:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3c:	d012      	beq.n	8005e64 <UART_SetConfig+0x210>
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d802      	bhi.n	8005e4a <UART_SetConfig+0x1f6>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <UART_SetConfig+0x204>
 8005e48:	e012      	b.n	8005e70 <UART_SetConfig+0x21c>
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4e:	d006      	beq.n	8005e5e <UART_SetConfig+0x20a>
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e54:	d009      	beq.n	8005e6a <UART_SetConfig+0x216>
 8005e56:	e00b      	b.n	8005e70 <UART_SetConfig+0x21c>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e0a1      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e09e      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e09b      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e098      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	bf00      	nop
 8005e76:	e094      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a39      	ldr	r2, [pc, #228]	; (8005f64 <UART_SetConfig+0x310>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d124      	bne.n	8005ecc <UART_SetConfig+0x278>
 8005e82:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	d012      	beq.n	8005eb8 <UART_SetConfig+0x264>
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e96:	d802      	bhi.n	8005e9e <UART_SetConfig+0x24a>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <UART_SetConfig+0x258>
 8005e9c:	e012      	b.n	8005ec4 <UART_SetConfig+0x270>
 8005e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea2:	d006      	beq.n	8005eb2 <UART_SetConfig+0x25e>
 8005ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea8:	d009      	beq.n	8005ebe <UART_SetConfig+0x26a>
 8005eaa:	e00b      	b.n	8005ec4 <UART_SetConfig+0x270>
 8005eac:	2301      	movs	r3, #1
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e077      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e074      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e071      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e06e      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	bf00      	nop
 8005eca:	e06a      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <UART_SetConfig+0x314>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d124      	bne.n	8005f20 <UART_SetConfig+0x2cc>
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005edc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee4:	d012      	beq.n	8005f0c <UART_SetConfig+0x2b8>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d802      	bhi.n	8005ef2 <UART_SetConfig+0x29e>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <UART_SetConfig+0x2ac>
 8005ef0:	e012      	b.n	8005f18 <UART_SetConfig+0x2c4>
 8005ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef6:	d006      	beq.n	8005f06 <UART_SetConfig+0x2b2>
 8005ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005efc:	d009      	beq.n	8005f12 <UART_SetConfig+0x2be>
 8005efe:	e00b      	b.n	8005f18 <UART_SetConfig+0x2c4>
 8005f00:	2300      	movs	r3, #0
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e04d      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e04a      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e047      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f12:	2308      	movs	r3, #8
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e044      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	bf00      	nop
 8005f1e:	e040      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a11      	ldr	r2, [pc, #68]	; (8005f6c <UART_SetConfig+0x318>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d139      	bne.n	8005f9e <UART_SetConfig+0x34a>
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <UART_SetConfig+0x2fc>)
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f38:	d027      	beq.n	8005f8a <UART_SetConfig+0x336>
 8005f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3e:	d817      	bhi.n	8005f70 <UART_SetConfig+0x31c>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01c      	beq.n	8005f7e <UART_SetConfig+0x32a>
 8005f44:	e027      	b.n	8005f96 <UART_SetConfig+0x342>
 8005f46:	bf00      	nop
 8005f48:	efff69f3 	.word	0xefff69f3
 8005f4c:	40011000 	.word	0x40011000
 8005f50:	40023800 	.word	0x40023800
 8005f54:	40004400 	.word	0x40004400
 8005f58:	40004800 	.word	0x40004800
 8005f5c:	40004c00 	.word	0x40004c00
 8005f60:	40005000 	.word	0x40005000
 8005f64:	40011400 	.word	0x40011400
 8005f68:	40007800 	.word	0x40007800
 8005f6c:	40007c00 	.word	0x40007c00
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f74:	d006      	beq.n	8005f84 <UART_SetConfig+0x330>
 8005f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f7a:	d009      	beq.n	8005f90 <UART_SetConfig+0x33c>
 8005f7c:	e00b      	b.n	8005f96 <UART_SetConfig+0x342>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e00e      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f84:	2302      	movs	r3, #2
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e00b      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f8a:	2304      	movs	r3, #4
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e008      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f90:	2308      	movs	r3, #8
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e005      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f96:	2310      	movs	r3, #16
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	bf00      	nop
 8005f9c:	e001      	b.n	8005fa2 <UART_SetConfig+0x34e>
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005faa:	d17c      	bne.n	80060a6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8005fac:	7ffb      	ldrb	r3, [r7, #31]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d859      	bhi.n	8006066 <UART_SetConfig+0x412>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x364>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005ffb 	.word	0x08005ffb
 8005fc0:	08006019 	.word	0x08006019
 8005fc4:	08006067 	.word	0x08006067
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08006067 	.word	0x08006067
 8005fd0:	08006067 	.word	0x08006067
 8005fd4:	08006067 	.word	0x08006067
 8005fd8:	0800604f 	.word	0x0800604f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005fdc:	f7fd fdcc 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	005a      	lsls	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	441a      	add	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	61bb      	str	r3, [r7, #24]
        break;
 8005ff8:	e038      	b.n	800606c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005ffa:	f7fd fdd1 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8005ffe:	4603      	mov	r3, r0
 8006000:	005a      	lsls	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	b29b      	uxth	r3, r3
 8006014:	61bb      	str	r3, [r7, #24]
        break;
 8006016:	e029      	b.n	800606c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	085a      	lsrs	r2, r3, #1
 800601e:	4b5d      	ldr	r3, [pc, #372]	; (8006194 <UART_SetConfig+0x540>)
 8006020:	4413      	add	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6852      	ldr	r2, [r2, #4]
 8006026:	fbb3 f3f2 	udiv	r3, r3, r2
 800602a:	b29b      	uxth	r3, r3
 800602c:	61bb      	str	r3, [r7, #24]
        break;
 800602e:	e01d      	b.n	800606c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006030:	f7fd fcbe 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8006034:	4603      	mov	r3, r0
 8006036:	005a      	lsls	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	b29b      	uxth	r3, r3
 800604a:	61bb      	str	r3, [r7, #24]
        break;
 800604c:	e00e      	b.n	800606c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	b29b      	uxth	r3, r3
 8006062:	61bb      	str	r3, [r7, #24]
        break;
 8006064:	e002      	b.n	800606c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
        break;
 800606a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d916      	bls.n	80060a0 <UART_SetConfig+0x44c>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006078:	d212      	bcs.n	80060a0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f023 030f 	bic.w	r3, r3, #15
 8006082:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	b29b      	uxth	r3, r3
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	b29a      	uxth	r2, r3
 8006090:	89fb      	ldrh	r3, [r7, #14]
 8006092:	4313      	orrs	r3, r2
 8006094:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	89fa      	ldrh	r2, [r7, #14]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e06e      	b.n	800617e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
 80060a4:	e06b      	b.n	800617e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80060a6:	7ffb      	ldrb	r3, [r7, #31]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d857      	bhi.n	800615c <UART_SetConfig+0x508>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0x460>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	080060f5 	.word	0x080060f5
 80060bc:	08006111 	.word	0x08006111
 80060c0:	0800615d 	.word	0x0800615d
 80060c4:	08006129 	.word	0x08006129
 80060c8:	0800615d 	.word	0x0800615d
 80060cc:	0800615d 	.word	0x0800615d
 80060d0:	0800615d 	.word	0x0800615d
 80060d4:	08006145 	.word	0x08006145
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80060d8:	f7fd fd4e 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 80060dc:	4602      	mov	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	441a      	add	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	61bb      	str	r3, [r7, #24]
        break;
 80060f2:	e036      	b.n	8006162 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80060f4:	f7fd fd54 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	441a      	add	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	61bb      	str	r3, [r7, #24]
        break;
 800610e:	e028      	b.n	8006162 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	085a      	lsrs	r2, r3, #1
 8006116:	4b20      	ldr	r3, [pc, #128]	; (8006198 <UART_SetConfig+0x544>)
 8006118:	4413      	add	r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6852      	ldr	r2, [r2, #4]
 800611e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006122:	b29b      	uxth	r3, r3
 8006124:	61bb      	str	r3, [r7, #24]
        break;
 8006126:	e01c      	b.n	8006162 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006128:	f7fd fc42 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	b29b      	uxth	r3, r3
 8006140:	61bb      	str	r3, [r7, #24]
        break;
 8006142:	e00e      	b.n	8006162 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	fbb2 f3f3 	udiv	r3, r2, r3
 8006156:	b29b      	uxth	r3, r3
 8006158:	61bb      	str	r3, [r7, #24]
        break;
 800615a:	e002      	b.n	8006162 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	75fb      	strb	r3, [r7, #23]
        break;
 8006160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b0f      	cmp	r3, #15
 8006166:	d908      	bls.n	800617a <UART_SetConfig+0x526>
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616e:	d204      	bcs.n	800617a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	e001      	b.n	800617e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	01e84800 	.word	0x01e84800
 8006198:	00f42400 	.word	0x00f42400

0800619c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629a:	d10a      	bne.n	80062b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062ee:	f7fa f9e1 	bl	80006b4 <HAL_GetTick>
 80062f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d10e      	bne.n	8006320 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f814 	bl	800633e <UART_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e00a      	b.n	8006336 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	603b      	str	r3, [r7, #0]
 800634a:	4613      	mov	r3, r2
 800634c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634e:	e02a      	b.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d026      	beq.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006358:	f7fa f9ac 	bl	80006b4 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <UART_WaitOnFlagUntilTimeout+0x30>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d11b      	bne.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800637c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e00f      	b.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4013      	ands	r3, r2
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d0c5      	beq.n	8006350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063e4:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800640e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644e:	d014      	beq.n	800647a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006466:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006476:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006478:	e002      	b.n	8006480 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f001 fac8 	bl	8007a10 <HAL_UART_TxCpltCallback>
}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fbbe 	bl	8005c18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ba:	d01e      	beq.n	80064fa <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f001 fa78 	bl	80079f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f7ff fb88 	bl	8005c2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006536:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800653c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d109      	bne.n	8006560 <UART_DMAError+0x3c>
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b21      	cmp	r3, #33	; 0x21
 8006550:	d106      	bne.n	8006560 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800655a:	6978      	ldr	r0, [r7, #20]
 800655c:	f7ff ff37 	bl	80063ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d109      	bne.n	8006582 <UART_DMAError+0x5e>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b22      	cmp	r3, #34	; 0x22
 8006572:	d106      	bne.n	8006582 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800657c:	6978      	ldr	r0, [r7, #20]
 800657e:	f7ff ff3b 	bl	80063f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006586:	f043 0210 	orr.w	r2, r3, #16
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658e:	6978      	ldr	r0, [r7, #20]
 8006590:	f7ff fb56 	bl	8005c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006594:	bf00      	nop
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7ff fb40 	bl	8005c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 fa0f 	bl	8007a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <ADC_initBuffer>:
  * @param 	adc_data pointer the to user ADC-data structure
  * @retval NONE
  *
  */
static void ADC_initBuffer(Sensor_ADCDataType *adc_data)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
	//TODO: Asserts

	//Init DataBuf
	for(uint8_t i = 0; i < ADC_DATA_BUF_SIZE ; i++)
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	e007      	b.n	8006618 <ADC_initBuffer+0x1e>
	{
		adc_data->adcBuf[i] = 0;
 8006608:	7bfa      	ldrb	r2, [r7, #15]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2100      	movs	r1, #0
 800660e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < ADC_DATA_BUF_SIZE ; i++)
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	3301      	adds	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b1f      	cmp	r3, #31
 800661c:	d9f4      	bls.n	8006608 <ADC_initBuffer+0xe>
	}
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <ADC_initInterface>:
  *	@param	hadc pointer to the ADC HAL peripheral handler
  * @param 	adc_data pointer the to user ADC-data structure
  * @retval NONE
  *
  */
void ADC_initInterface(ADC_HandleTypeDef *hadc, Sensor_ADCDataType *adc_data){
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]

	//TODO: Asserts

	adc_data->state = ADC_STATE_NOTINIT;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	ADC_ChannelConfTypeDef sConfig = {0};
 800663e:	f107 0308 	add.w	r3, r7, #8
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	609a      	str	r2, [r3, #8]
 800664a:	60da      	str	r2, [r3, #12]

	hadc->Init.ScanConvMode = DISABLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	611a      	str	r2, [r3, #16]
	hadc->Init.ContinuousConvMode = DISABLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	619a      	str	r2, [r3, #24]
	hadc->Init.DiscontinuousConvMode = DISABLE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <ADC_initInterface+0xbc>)
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc->Init.DMAContinuousRequests = DISABLE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(hadc) != HAL_OK)
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fa f848 	bl	8000710 <HAL_ADC_Init>
	{
		//TODO: ERROR
	}

	/* Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	if(hadc->Instance == ADC1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a19      	ldr	r2, [pc, #100]	; (80066ec <ADC_initInterface+0xc0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d10e      	bne.n	80066a8 <ADC_initInterface+0x7c>
	{
		hadc1p = hadc;	//Pointer for interrupt handling
 800668a:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <ADC_initInterface+0xc4>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6013      	str	r3, [r2, #0]
		sConfig.Channel = ADC_CHANNEL_0;
 8006690:	2300      	movs	r3, #0
 8006692:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8006694:	2301      	movs	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006698:	2300      	movs	r3, #0
 800669a:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800669c:	f107 0308 	add.w	r3, r7, #8
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fa fb28 	bl	8000cf8 <HAL_ADC_ConfigChannel>
		{
			//TODO: ERROR
		}
	}
	if(hadc->Instance == ADC2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a11      	ldr	r2, [pc, #68]	; (80066f4 <ADC_initInterface+0xc8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10e      	bne.n	80066d0 <ADC_initInterface+0xa4>
	{
		hadc2p = hadc;	//Pointer for interrupt handling
 80066b2:	4a11      	ldr	r2, [pc, #68]	; (80066f8 <ADC_initInterface+0xcc>)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6013      	str	r3, [r2, #0]
		sConfig.Channel = ADC_CHANNEL_3;
 80066b8:	2303      	movs	r3, #3
 80066ba:	60bb      	str	r3, [r7, #8]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80066bc:	2301      	movs	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80066c0:	2300      	movs	r3, #0
 80066c2:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80066c4:	f107 0308 	add.w	r3, r7, #8
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fa fb14 	bl	8000cf8 <HAL_ADC_ConfigChannel>
		{
			//TODO: ERROR
		}
	}

	ADC_initBuffer(adc_data);
 80066d0:	6838      	ldr	r0, [r7, #0]
 80066d2:	f7ff ff92 	bl	80065fa <ADC_initBuffer>

	adc_data->state = ADC_STATE_READY;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 80066de:	bf00      	nop
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	0f000001 	.word	0x0f000001
 80066ec:	40012000 	.word	0x40012000
 80066f0:	200002ac 	.word	0x200002ac
 80066f4:	40012100 	.word	0x40012100
 80066f8:	200002b0 	.word	0x200002b0

080066fc <ADC_singleConversion>:
  *	@param	hadc pointer to the ADC HAL peripheral handler
  * @retval NONE
  *
  */
void ADC_singleConversion(ADC_HandleTypeDef *hadc, Sensor_ADCDataType *adc_data)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	//TODO: Asserts

	uint32_t adcsum = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
	uint8_t loop = 16;
 800670a:	2310      	movs	r3, #16
 800670c:	74bb      	strb	r3, [r7, #18]
	int32_t temp;

	adc_data->state = ADC_STATE_BUSY;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	/*Averaging over 16 samples*/
	for(uint8_t i = 0; i < loop; i++)
 8006716:	2300      	movs	r3, #0
 8006718:	74fb      	strb	r3, [r7, #19]
 800671a:	e011      	b.n	8006740 <ADC_singleConversion+0x44>
	{
		HAL_ADC_Start(hadc);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fa f83b 	bl	8000798 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8006722:	f04f 31ff 	mov.w	r1, #4294967295
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fa f8f6 	bl	8000918 <HAL_ADC_PollForConversion>
		adcsum += HAL_ADC_GetValue(hadc);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fa fab8 	bl	8000ca2 <HAL_ADC_GetValue>
 8006732:	4602      	mov	r2, r0
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	4413      	add	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < loop; i++)
 800673a:	7cfb      	ldrb	r3, [r7, #19]
 800673c:	3301      	adds	r3, #1
 800673e:	74fb      	strb	r3, [r7, #19]
 8006740:	7cfa      	ldrb	r2, [r7, #19]
 8006742:	7cbb      	ldrb	r3, [r7, #18]
 8006744:	429a      	cmp	r2, r3
 8006746:	d3e9      	bcc.n	800671c <ADC_singleConversion+0x20>
	}

	temp = (adcsum / loop) - ADC_ZERO_ERROR;
 8006748:	7cbb      	ldrb	r3, [r7, #18]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006750:	3b03      	subs	r3, #3
 8006752:	60fb      	str	r3, [r7, #12]

	if(temp > 0) /* Positive conversion result */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	dd02      	ble.n	8006760 <ADC_singleConversion+0x64>
	{
		adc_data->adcBuf[0] = temp;
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	601a      	str	r2, [r3, #0]
	}
	if(temp < 0) /* Negative conversion result due to ADC_ZERO_ERROR*/
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da02      	bge.n	800676c <ADC_singleConversion+0x70>
	{
		adc_data->adcBuf[0] = 0;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
	}
	adc_data->state = ADC_STATE_READY;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 8006774:	bf00      	nop
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <ADC_getState>:
  *			ADC_STATE_READY
  *			ADC_STATE_BUSY
  *			ADC_STATE_ERROR
  */
Sensor_ADCCStateType ADC_getState(Sensor_ADCDataType *adc_data)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	return adc_data->state;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <I2C_initBuffer>:
  * @brief	Sets the transmit and receive buffer to 0 before the first communication
  * @param 	i2c_data pointer the to user I2C-data structure
  * @retval NONE
  *
  */
static void I2C_initBuffer(Sensor_I2CDataType *i2c_data){
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
	//TODO: Asserts
	//Init WriteBuf
	for(uint8_t i = 0; i < I2C_WRITE_BUF_SIZE; i++)
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
 80067a2:	e007      	b.n	80067b4 <I2C_initBuffer+0x1e>
	{
		i2c_data->transmitBuf[i] = 0;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	2200      	movs	r2, #0
 80067ac:	709a      	strb	r2, [r3, #2]
	for(uint8_t i = 0; i < I2C_WRITE_BUF_SIZE; i++)
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	3301      	adds	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b1f      	cmp	r3, #31
 80067b8:	d9f4      	bls.n	80067a4 <I2C_initBuffer+0xe>
	}

	//Init ReadBuf
	for(uint8_t i = 0; i < I2C_READ_BUF_SIZE; i++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	73bb      	strb	r3, [r7, #14]
 80067be:	e008      	b.n	80067d2 <I2C_initBuffer+0x3c>
	{
		i2c_data->receiveBuf[i] = 0;
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	for(uint8_t i = 0; i < I2C_READ_BUF_SIZE; i++)
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	3301      	adds	r3, #1
 80067d0:	73bb      	strb	r3, [r7, #14]
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b1f      	cmp	r3, #31
 80067d6:	d9f3      	bls.n	80067c0 <I2C_initBuffer+0x2a>
	}
	i2c_data->nBytes = 0;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	705a      	strb	r2, [r3, #1]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <I2C_initInterface>:
  *	@param	hi2c pointer to the I2C HAL peripheral handler
  * @param 	i2c_data pointer the to user I2C-data structure
  * @retval NONE
  *
  */
void I2C_initInterface(I2C_HandleTypeDef *hi2c, Sensor_I2CDataType *i2c_data){
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]

	//TODO: Asserts
	i2c_data->state = I2C_STATE_NOTINIT;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	hi2c->Init.OwnAddress1 = 192;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	22c0      	movs	r2, #192	; 0xc0
 8006802:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fb fb2f 	bl	8001e8c <HAL_I2C_Init>
	{
		//TODO:ERROR
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800682e:	2100      	movs	r1, #0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fc fc70 	bl	8003116 <HAL_I2CEx_ConfigAnalogFilter>
	{
		//TODO:ERROR
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 2) != HAL_OK)
 8006836:	2102      	movs	r1, #2
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fc fcb7 	bl	80031ac <HAL_I2CEx_ConfigDigitalFilter>
	{
		//TODO:ERROR
	}
	if(hi2c->Instance == I2C1)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a0c      	ldr	r2, [pc, #48]	; (8006874 <I2C_initInterface+0x88>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d102      	bne.n	800684e <I2C_initInterface+0x62>
	{
		hi2c1p = hi2c;
 8006848:	4a0b      	ldr	r2, [pc, #44]	; (8006878 <I2C_initInterface+0x8c>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6013      	str	r3, [r2, #0]
	}
	if(hi2c->Instance == I2C2)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a0a      	ldr	r2, [pc, #40]	; (800687c <I2C_initInterface+0x90>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d102      	bne.n	800685e <I2C_initInterface+0x72>
	{
		hi2c2p = hi2c;
 8006858:	4a09      	ldr	r2, [pc, #36]	; (8006880 <I2C_initInterface+0x94>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
	}
	I2C_initBuffer(i2c_data);
 800685e:	6838      	ldr	r0, [r7, #0]
 8006860:	f7ff ff99 	bl	8006796 <I2C_initBuffer>

	i2c_data->state = I2C_STATE_READY;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40005400 	.word	0x40005400
 8006878:	20000438 	.word	0x20000438
 800687c:	40005800 	.word	0x40005800
 8006880:	20000434 	.word	0x20000434

08006884 <I2C_sendData>:
  * @param 	i2c_data pointer the to user I2C-data structure
  *	@param	hi2c pointer to the I2C HAL peripheral handler
  * @retval NONE
  *
  */
void I2C_sendData(I2C_HandleTypeDef *hi2c, Sensor_I2CDataType *i2c_data){
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af02      	add	r7, sp, #8
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	//TODO: Asserts
	i2c_data->state = I2C_STATE_BUSY;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	HAL_I2C_Master_Transmit(hi2c, i2c_data->slaveAdress, i2c_data->transmitBuf, i2c_data->nBytes, I2C_STANDARD_TIMEOUT);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b299      	uxth	r1, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	b298      	uxth	r0, r3
 80068a6:	2364      	movs	r3, #100	; 0x64
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4603      	mov	r3, r0
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7fb fb7d 	bl	8001fac <HAL_I2C_Master_Transmit>
	i2c_data->state = I2C_STATE_READY;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <I2C_receiveData>:
  * @param 	i2c_data pointer the to user I2C-data structure
  *	@param	hi2c pointer to the I2C HAL peripheral handler
  * @retval NONE
  *
  */
void I2C_receiveData(I2C_HandleTypeDef *hi2c, Sensor_I2CDataType *i2c_data){
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af02      	add	r7, sp, #8
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
	//TODO: Asserts
	i2c_data->state = I2C_STATE_BUSY;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	HAL_I2C_Master_Receive(hi2c, i2c_data->slaveAdress, i2c_data->receiveBuf, i2c_data->nBytes,I2C_STANDARD_TIMEOUT);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	b299      	uxth	r1, r3
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	785b      	ldrb	r3, [r3, #1]
 80068e4:	b298      	uxth	r0, r3
 80068e6:	2364      	movs	r3, #100	; 0x64
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	4603      	mov	r3, r0
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fb fc51 	bl	8002194 <HAL_I2C_Master_Receive>
	i2c_data->state = I2C_STATE_READY;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <I2C_flushData>:
  * @brief This function flushes all data for the next i2c communication
  * @param 	i2c_data pointer the to user I2C-data structure
  *
  */
void I2C_flushData(Sensor_I2CDataType *i2c_data)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]

	i2c_data->nBytes = 0;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < I2C_WRITE_BUF_SIZE; i++)
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e008      	b.n	8006928 <I2C_flushData+0x26>
	{
		i2c_data->receiveBuf[i] = 0;
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	3322      	adds	r3, #34	; 0x22
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < I2C_WRITE_BUF_SIZE; i++)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b1f      	cmp	r3, #31
 800692c:	ddf3      	ble.n	8006916 <I2C_flushData+0x14>
	}
	for (int i = 0; i < I2C_WRITE_BUF_SIZE; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	e008      	b.n	8006946 <I2C_flushData+0x44>
	{
		i2c_data->receiveBuf[i] = 0;
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4413      	add	r3, r2
 800693a:	3322      	adds	r3, #34	; 0x22
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < I2C_WRITE_BUF_SIZE; i++)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3301      	adds	r3, #1
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b1f      	cmp	r3, #31
 800694a:	ddf3      	ble.n	8006934 <I2C_flushData+0x32>
	}

}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_I2C_ErrorCallback>:


/* Callback functions -----------------------------------------------------------*/

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	//TODO: Hand off the error code to the corresponding sensor

}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <SPI_initBuffer>:
  * @param 	spi_data pointer the to user SPI-data structure
  * @retval NONE
  *
  */
static void SPI_initBuffer(Sensor_SPIDataType *spi_data)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	//TODO: Asserts

	//Init WriteBuf
	for(uint8_t i = 0; i < SPI_WRITE_BUF_SIZE; i++)
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	e007      	b.n	800698a <SPI_initBuffer+0x1e>
	{
		spi_data->transmitBuf[i] = 0;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	2200      	movs	r2, #0
 8006982:	725a      	strb	r2, [r3, #9]
	for(uint8_t i = 0; i < SPI_WRITE_BUF_SIZE; i++)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	3301      	adds	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b1f      	cmp	r3, #31
 800698e:	d9f4      	bls.n	800697a <SPI_initBuffer+0xe>
	}

	//Init ReadBuf
	for(uint8_t i = 0; i < SPI_READ_BUF_SIZE; i++)
 8006990:	2300      	movs	r3, #0
 8006992:	73bb      	strb	r3, [r7, #14]
 8006994:	e008      	b.n	80069a8 <SPI_initBuffer+0x3c>
	{
		spi_data->receiveBuf[i] = 0;
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	4413      	add	r3, r2
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	for(uint8_t i = 0; i < SPI_READ_BUF_SIZE; i++)
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	3301      	adds	r3, #1
 80069a6:	73bb      	strb	r3, [r7, #14]
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	2b1f      	cmp	r3, #31
 80069ac:	d9f3      	bls.n	8006996 <SPI_initBuffer+0x2a>
	}
	spi_data->nBytes = 0;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	721a      	strb	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <SPI_initInterface>:
  * @param 	spi_data pointer the to user SPI-data structure
  * @retval NONE
  *
  */
void SPI_initInterface(SPI_HandleTypeDef *hspi, Sensor_SPIDataType *spi_data)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]

	//TODO: Asserts
	hspi->Init.NSS = SPI_NSS_SOFT;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069d0:	619a      	str	r2, [r3, #24]
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 7;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2207      	movs	r2, #7
 80069e8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
	hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	635a      	str	r2, [r3, #52]	; 0x34

	if (HAL_SPI_Init(hspi) != HAL_OK)
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fe f82a 	bl	8004a50 <HAL_SPI_Init>
	{
		//TODO:ERROR
	}

	//Pointer for interrupt handling
	if(hspi->Instance == SPI1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a0e      	ldr	r2, [pc, #56]	; (8006a3c <SPI_initInterface+0x7c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d102      	bne.n	8006a0c <SPI_initInterface+0x4c>
	{
		hspi1p = hspi;
 8006a06:	4a0e      	ldr	r2, [pc, #56]	; (8006a40 <SPI_initInterface+0x80>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6013      	str	r3, [r2, #0]
	}
	if(hspi->Instance == SPI2)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <SPI_initInterface+0x84>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d102      	bne.n	8006a1c <SPI_initInterface+0x5c>
	{
		hspi2p = hspi;
 8006a16:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <SPI_initInterface+0x88>)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6013      	str	r3, [r2, #0]
	}
	/*Set the NSS Pin to high initially*/
	HAL_GPIO_WritePin(spi_data->NSS_Port, spi_data->NSS_Pin, GPIO_PIN_SET);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6858      	ldr	r0, [r3, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	2201      	movs	r2, #1
 8006a26:	4619      	mov	r1, r3
 8006a28:	f7fb f9f2 	bl	8001e10 <HAL_GPIO_WritePin>

	SPI_initBuffer(spi_data);
 8006a2c:	6838      	ldr	r0, [r7, #0]
 8006a2e:	f7ff ff9d 	bl	800696c <SPI_initBuffer>

}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40013000 	.word	0x40013000
 8006a40:	20000500 	.word	0x20000500
 8006a44:	40003800 	.word	0x40003800
 8006a48:	200004fc 	.word	0x200004fc

08006a4c <SPI_receiveSendData>:
  *	@param	hspi pointer to the SPI HAL peripheral handler
  * @retval NONE
  *
  */
void SPI_receiveSendData(SPI_HandleTypeDef *hspi, Sensor_SPIDataType *spi_data)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	//TODO: Asserts
	HAL_GPIO_WritePin(spi_data->NSS_Port, spi_data->NSS_Pin, GPIO_PIN_RESET);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6858      	ldr	r0, [r3, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	4619      	mov	r1, r3
 8006a62:	f7fb f9d5 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, spi_data->transmitBuf, spi_data->receiveBuf, spi_data->nBytes, SPI_STANDARD_TIMEOUT);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f103 0109 	add.w	r1, r3, #9
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	7a1b      	ldrb	r3, [r3, #8]
 8006a76:	b298      	uxth	r0, r3
 8006a78:	2364      	movs	r3, #100	; 0x64
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fe f878 	bl	8004b74 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(spi_data->NSS_Port, spi_data->NSS_Pin, GPIO_PIN_SET);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	6858      	ldr	r0, [r3, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f7fb f9be 	bl	8001e10 <HAL_GPIO_WritePin>
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <SPI_flushData>:
  * @param 	spi_data pointer the to user spi-data structure
  * @retval NONE
  *
  */
void SPI_flushData(Sensor_SPIDataType *spi_data)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]

	spi_data->nBytes = 0;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < SPI_READ_BUF_SIZE; i++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	e008      	b.n	8006ac2 <SPI_flushData+0x26>
	{
		spi_data->receiveBuf[i] = 0;
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3329      	adds	r3, #41	; 0x29
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SPI_READ_BUF_SIZE; i++)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b1f      	cmp	r3, #31
 8006ac6:	ddf3      	ble.n	8006ab0 <SPI_flushData+0x14>
	}
	for (int i = 0; i < SPI_WRITE_BUF_SIZE; i++)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60bb      	str	r3, [r7, #8]
 8006acc:	e008      	b.n	8006ae0 <SPI_flushData+0x44>
	{
		spi_data->receiveBuf[i] = 0;
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3329      	adds	r3, #41	; 0x29
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SPI_WRITE_BUF_SIZE; i++)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60bb      	str	r3, [r7, #8]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b1f      	cmp	r3, #31
 8006ae4:	ddf3      	ble.n	8006ace <SPI_flushData+0x32>
	}

}
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006af4:	b590      	push	{r4, r7, lr}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

/*Number of data points for one measurement*/
 uint32_t burstModeDataSize = 100000;
 8006afa:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <main+0xac>)
 8006afc:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006afe:	f7f9 fd87 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b02:	f000 f85f 	bl	8006bc4 <SystemClock_Config>

  /*The following peripherals will be initialized auto-generated CubeHal-functions
   *The interface peripherals to the Sensors and to the Operator will be initialized separately
   *in the configOperator() and configSensors() functions*/

  MX_GPIO_Init();
 8006b06:	f000 fa25 	bl	8006f54 <MX_GPIO_Init>
  MX_NVIC_Init();
 8006b0a:	f000 f8f5 	bl	8006cf8 <MX_NVIC_Init>
  MX_TIM6_Init();
 8006b0e:	f000 f9af 	bl	8006e70 <MX_TIM6_Init>
  MX_RTC_Init();
 8006b12:	f000 f94d 	bl	8006db0 <MX_RTC_Init>
  MX_DMA_Init();
 8006b16:	f000 f9e3 	bl	8006ee0 <MX_DMA_Init>

  /*Initial the RTC system time*/
  initDWT(); /*Clock Cycle timer for us delays*/
 8006b1a:	f002 fe21 	bl	8009760 <initDWT>
  setSystemTime(init_system_time, init_system_date);
 8006b1e:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <main+0xb0>)
 8006b20:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <main+0xb4>)
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	466c      	mov	r4, sp
 8006b28:	f103 0210 	add.w	r2, r3, #16
 8006b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b30:	e884 0003 	stmia.w	r4, {r0, r1}
 8006b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b36:	f002 fdf7 	bl	8009728 <setSystemTime>

  /*Make sure the currentSink for TSEP measurement is turned off */
  turnOffCurrentSink();
 8006b3a:	f002 fde5 	bl	8009708 <turnOffCurrentSink>
   * Sens3: TSEP, Analog ADC Interface
   * Sens4: Thermistor, Analog ADC Interface
   * sens5: Thermocam, Trigger GPIO
   *
   * */
  configOperator();
 8006b3e:	f000 fc23 	bl	8007388 <configOperator>
  configSensors();
 8006b42:	f000 fc3f 	bl	80073c4 <configSensors>

  /*Additional Calibration Data*/
  Sensor_setSensorCalibration(&sens1);
 8006b46:	4819      	ldr	r0, [pc, #100]	; (8006bac <main+0xb8>)
 8006b48:	f001 feaa 	bl	80088a0 <Sensor_setSensorCalibration>

  /* Main Application Code--------------------------------------------------------*/
  while (1)
  {
	  /*Wait for burst-mode start command */
	 Operator_uartListenCommand(&huart3, &operator1);
 8006b4c:	4918      	ldr	r1, [pc, #96]	; (8006bb0 <main+0xbc>)
 8006b4e:	4819      	ldr	r0, [pc, #100]	; (8006bb4 <main+0xc0>)
 8006b50:	f000 ff02 	bl	8007958 <Operator_uartListenCommand>

	 if (Operator_processCommand(&huart3, &operator1) == OPERATOR_START_COMMAND)
 8006b54:	4916      	ldr	r1, [pc, #88]	; (8006bb0 <main+0xbc>)
 8006b56:	4817      	ldr	r0, [pc, #92]	; (8006bb4 <main+0xc0>)
 8006b58:	f000 ff14 	bl	8007984 <Operator_processCommand>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d1f4      	bne.n	8006b4c <main+0x58>
	 {
		 /*Indication that a data aquisition is running*/
		 DataAquisitionFlag = 1;
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <main+0xc4>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006b68:	2201      	movs	r2, #1
 8006b6a:	2180      	movs	r1, #128	; 0x80
 8006b6c:	4813      	ldr	r0, [pc, #76]	; (8006bbc <main+0xc8>)
 8006b6e:	f7fb f94f 	bl	8001e10 <HAL_GPIO_WritePin>

		 /*Timer for Camera framerate of 10Hz*/
		 HAL_TIM_Base_Start_IT(&htim6);
 8006b72:	4813      	ldr	r0, [pc, #76]	; (8006bc0 <main+0xcc>)
 8006b74:	f7fe fb5a 	bl	800522c <HAL_TIM_Base_Start_IT>

		/*Turn on the current sink for TSEP measurement*/
		 turnOnCurrentSink();
 8006b78:	f002 fdb6 	bl	80096e8 <turnOnCurrentSink>

		 /*Reset RTC Time to 0 */
		 setSystemTime(init_system_time, init_system_date);
 8006b7c:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <main+0xb0>)
 8006b7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ba8 <main+0xb4>)
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	9202      	str	r2, [sp, #8]
 8006b84:	466c      	mov	r4, sp
 8006b86:	f103 0210 	add.w	r2, r3, #16
 8006b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b94:	f002 fdc8 	bl	8009728 <setSystemTime>

		 /*Burst mode data acquisition which collects data for all sensors until the burstModeDataSize limit is reached*/
		 burstMode(burstModeDataSize);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb63 	bl	8007264 <burstMode>
	 Operator_uartListenCommand(&huart3, &operator1);
 8006b9e:	e7d5      	b.n	8006b4c <main+0x58>
 8006ba0:	000186a0 	.word	0x000186a0
 8006ba4:	2000027c 	.word	0x2000027c
 8006ba8:	20000294 	.word	0x20000294
 8006bac:	20004940 	.word	0x20004940
 8006bb0:	20004898 	.word	0x20004898
 8006bb4:	20000628 	.word	0x20000628
 8006bb8:	20000298 	.word	0x20000298
 8006bbc:	40020400 	.word	0x40020400
 8006bc0:	20004900 	.word	0x20004900

08006bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b0b8      	sub	sp, #224	; 0xe0
 8006bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006bce:	2234      	movs	r2, #52	; 0x34
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fe64 	bl	80098a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bd8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	605a      	str	r2, [r3, #4]
 8006be2:	609a      	str	r2, [r3, #8]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	2290      	movs	r2, #144	; 0x90
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f002 fe55 	bl	80098a0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8006bf6:	f7fc fb25 	bl	8003244 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <SystemClock_Config+0x12c>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	4a3c      	ldr	r2, [pc, #240]	; (8006cf0 <SystemClock_Config+0x12c>)
 8006c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c04:	6413      	str	r3, [r2, #64]	; 0x40
 8006c06:	4b3a      	ldr	r3, [pc, #232]	; (8006cf0 <SystemClock_Config+0x12c>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	607b      	str	r3, [r7, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c12:	4b38      	ldr	r3, [pc, #224]	; (8006cf4 <SystemClock_Config+0x130>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a37      	ldr	r2, [pc, #220]	; (8006cf4 <SystemClock_Config+0x130>)
 8006c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <SystemClock_Config+0x130>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c36:	2310      	movs	r3, #16
 8006c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c42:	2302      	movs	r3, #2
 8006c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006c4e:	2308      	movs	r3, #8
 8006c50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006c54:	23d8      	movs	r3, #216	; 0xd8
 8006c56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006c60:	2304      	movs	r3, #4
 8006c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fc fb4a 	bl	8003304 <HAL_RCC_OscConfig>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8006c76:	f000 fc83 	bl	8007580 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006c7a:	f7fc faf3 	bl	8003264 <HAL_PWREx_EnableOverDrive>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006c84:	f000 fc7c 	bl	8007580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c88:	230f      	movs	r3, #15
 8006c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c94:	2300      	movs	r3, #0
 8006c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006c9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8006caa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006cae:	2107      	movs	r1, #7
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fc fd95 	bl	80037e0 <HAL_RCC_ClockConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8006cbc:	f000 fc60 	bl	8007580 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8006cc0:	f244 1320 	movw	r3, #16672	; 0x4120
 8006cc4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cca:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cd4:	f107 0308 	add.w	r3, r7, #8
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fc ff75 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8006ce4:	f000 fc4c 	bl	8007580 <Error_Handler>
  }
}
 8006ce8:	bf00      	nop
 8006cea:	37e0      	adds	r7, #224	; 0xe0
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40007000 	.word	0x40007000

08006cf8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	201f      	movs	r0, #31
 8006d02:	f7fa fb0c 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006d06:	201f      	movs	r0, #31
 8006d08:	f7fa fb25 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2020      	movs	r0, #32
 8006d12:	f7fa fb04 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006d16:	2020      	movs	r0, #32
 8006d18:	f7fa fb1d 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	2036      	movs	r0, #54	; 0x36
 8006d22:	f7fa fafc 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006d26:	2036      	movs	r0, #54	; 0x36
 8006d28:	f7fa fb15 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2100      	movs	r1, #0
 8006d30:	2012      	movs	r0, #18
 8006d32:	f7fa faf4 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006d36:	2012      	movs	r0, #18
 8006d38:	f7fa fb0d 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	2023      	movs	r0, #35	; 0x23
 8006d42:	f7fa faec 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006d46:	2023      	movs	r0, #35	; 0x23
 8006d48:	f7fa fb05 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2100      	movs	r1, #0
 8006d50:	200c      	movs	r0, #12
 8006d52:	f7fa fae4 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006d56:	200c      	movs	r0, #12
 8006d58:	f7fa fafd 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	2027      	movs	r0, #39	; 0x27
 8006d62:	f7fa fadc 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d66:	2027      	movs	r0, #39	; 0x27
 8006d68:	f7fa faf5 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	200e      	movs	r0, #14
 8006d72:	f7fa fad4 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006d76:	200e      	movs	r0, #14
 8006d78:	f7fa faed 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2100      	movs	r1, #0
 8006d80:	2011      	movs	r0, #17
 8006d82:	f7fa facc 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8006d86:	2011      	movs	r0, #17
 8006d88:	f7fa fae5 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2100      	movs	r1, #0
 8006d90:	200b      	movs	r0, #11
 8006d92:	f7fa fac4 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006d96:	200b      	movs	r0, #11
 8006d98:	f7fa fadd 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	2028      	movs	r0, #40	; 0x28
 8006da2:	f7fa fabc 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006da6:	2028      	movs	r0, #40	; 0x28
 8006da8:	f7fa fad5 	bl	8001356 <HAL_NVIC_EnableIRQ>
}
 8006dac:	bf00      	nop
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006db6:	f107 0308 	add.w	r3, r7, #8
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
 8006dc0:	609a      	str	r2, [r3, #8]
 8006dc2:	60da      	str	r2, [r3, #12]
 8006dc4:	611a      	str	r2, [r3, #16]
 8006dc6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8006dc8:	2300      	movs	r3, #0
 8006dca:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8006dcc:	4b26      	ldr	r3, [pc, #152]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006dce:	4a27      	ldr	r2, [pc, #156]	; (8006e6c <MX_RTC_Init+0xbc>)
 8006dd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8006dd2:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006dd4:	2240      	movs	r2, #64	; 0x40
 8006dd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8006dd8:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006dda:	221f      	movs	r2, #31
 8006ddc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8006dde:	4b22      	ldr	r3, [pc, #136]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006de4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006de6:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006dec:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006df8:	481b      	ldr	r0, [pc, #108]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006dfa:	f7fd fb09 	bl	8004410 <HAL_RTC_Init>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8006e04:	f000 fbbc 	bl	8007580 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x1;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	72bb      	strb	r3, [r7, #10]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8006e14:	2300      	movs	r3, #0
 8006e16:	753b      	strb	r3, [r7, #20]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006e20:	f107 0308 	add.w	r3, r7, #8
 8006e24:	2201      	movs	r2, #1
 8006e26:	4619      	mov	r1, r3
 8006e28:	480f      	ldr	r0, [pc, #60]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006e2a:	f7fd fb6d 	bl	8004508 <HAL_RTC_SetTime>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8006e34:	f000 fba4 	bl	8007580 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8006e40:	2301      	movs	r3, #1
 8006e42:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	71fb      	strb	r3, [r7, #7]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006e48:	1d3b      	adds	r3, r7, #4
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4806      	ldr	r0, [pc, #24]	; (8006e68 <MX_RTC_Init+0xb8>)
 8006e50:	f7fd fc76 	bl	8004740 <HAL_RTC_SetDate>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8006e5a:	f000 fb91 	bl	8007580 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006e5e:	bf00      	nop
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	200048e0 	.word	0x200048e0
 8006e6c:	40002800 	.word	0x40002800

08006e70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e76:	1d3b      	adds	r3, r7, #4
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006e80:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <MX_TIM6_Init+0x68>)
 8006e82:	4a16      	ldr	r2, [pc, #88]	; (8006edc <MX_TIM6_Init+0x6c>)
 8006e84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2999;
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <MX_TIM6_Init+0x68>)
 8006e88:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8006e8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e8e:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <MX_TIM6_Init+0x68>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3599;
 8006e94:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <MX_TIM6_Init+0x68>)
 8006e96:	f640 620f 	movw	r2, #3599	; 0xe0f
 8006e9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <MX_TIM6_Init+0x68>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006ea2:	480d      	ldr	r0, [pc, #52]	; (8006ed8 <MX_TIM6_Init+0x68>)
 8006ea4:	f7fe f996 	bl	80051d4 <HAL_TIM_Base_Init>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8006eae:	f000 fb67 	bl	8007580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006eba:	1d3b      	adds	r3, r7, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4806      	ldr	r0, [pc, #24]	; (8006ed8 <MX_TIM6_Init+0x68>)
 8006ec0:	f7fe fbc6 	bl	8005650 <HAL_TIMEx_MasterConfigSynchronization>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8006eca:	f000 fb59 	bl	8007580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20004900 	.word	0x20004900
 8006edc:	40001000 	.word	0x40001000

08006ee0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <MX_DMA_Init+0x70>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	4a19      	ldr	r2, [pc, #100]	; (8006f50 <MX_DMA_Init+0x70>)
 8006eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef2:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <MX_DMA_Init+0x70>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006efa:	607b      	str	r3, [r7, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006efe:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <MX_DMA_Init+0x70>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <MX_DMA_Init+0x70>)
 8006f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f08:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0a:	4b11      	ldr	r3, [pc, #68]	; (8006f50 <MX_DMA_Init+0x70>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006f16:	2200      	movs	r2, #0
 8006f18:	2100      	movs	r1, #0
 8006f1a:	2038      	movs	r0, #56	; 0x38
 8006f1c:	f7fa f9ff 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006f20:	2038      	movs	r0, #56	; 0x38
 8006f22:	f7fa fa18 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006f26:	2200      	movs	r2, #0
 8006f28:	2100      	movs	r1, #0
 8006f2a:	203b      	movs	r0, #59	; 0x3b
 8006f2c:	f7fa f9f7 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006f30:	203b      	movs	r0, #59	; 0x3b
 8006f32:	f7fa fa10 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8006f36:	2200      	movs	r2, #0
 8006f38:	2100      	movs	r1, #0
 8006f3a:	203c      	movs	r0, #60	; 0x3c
 8006f3c:	f7fa f9ef 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8006f40:	203c      	movs	r0, #60	; 0x3c
 8006f42:	f7fa fa08 	bl	8001356 <HAL_NVIC_EnableIRQ>

}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40023800 	.word	0x40023800

08006f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08e      	sub	sp, #56	; 0x38
 8006f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	605a      	str	r2, [r3, #4]
 8006f64:	609a      	str	r2, [r3, #8]
 8006f66:	60da      	str	r2, [r3, #12]
 8006f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f6a:	4bb4      	ldr	r3, [pc, #720]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	4ab3      	ldr	r2, [pc, #716]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006f70:	f043 0304 	orr.w	r3, r3, #4
 8006f74:	6313      	str	r3, [r2, #48]	; 0x30
 8006f76:	4bb1      	ldr	r3, [pc, #708]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	623b      	str	r3, [r7, #32]
 8006f80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f82:	4bae      	ldr	r3, [pc, #696]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	4aad      	ldr	r2, [pc, #692]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8e:	4bab      	ldr	r3, [pc, #684]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f9a:	4ba8      	ldr	r3, [pc, #672]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	4aa7      	ldr	r2, [pc, #668]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fa6:	4ba5      	ldr	r3, [pc, #660]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006fb2:	4ba2      	ldr	r3, [pc, #648]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	4aa1      	ldr	r2, [pc, #644]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fb8:	f043 0320 	orr.w	r3, r3, #32
 8006fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fbe:	4b9f      	ldr	r3, [pc, #636]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006fca:	4b9c      	ldr	r3, [pc, #624]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	4a9b      	ldr	r2, [pc, #620]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd6:	4b99      	ldr	r3, [pc, #612]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fe2:	4b96      	ldr	r3, [pc, #600]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	4a95      	ldr	r2, [pc, #596]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006fe8:	f043 0302 	orr.w	r3, r3, #2
 8006fec:	6313      	str	r3, [r2, #48]	; 0x30
 8006fee:	4b93      	ldr	r3, [pc, #588]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ffa:	4b90      	ldr	r3, [pc, #576]	; (800723c <MX_GPIO_Init+0x2e8>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	4a8f      	ldr	r2, [pc, #572]	; (800723c <MX_GPIO_Init+0x2e8>)
 8007000:	f043 0308 	orr.w	r3, r3, #8
 8007004:	6313      	str	r3, [r2, #48]	; 0x30
 8007006:	4b8d      	ldr	r3, [pc, #564]	; (800723c <MX_GPIO_Init+0x2e8>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	60bb      	str	r3, [r7, #8]
 8007010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007012:	4b8a      	ldr	r3, [pc, #552]	; (800723c <MX_GPIO_Init+0x2e8>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	4a89      	ldr	r2, [pc, #548]	; (800723c <MX_GPIO_Init+0x2e8>)
 8007018:	f043 0310 	orr.w	r3, r3, #16
 800701c:	6313      	str	r3, [r2, #48]	; 0x30
 800701e:	4b87      	ldr	r3, [pc, #540]	; (800723c <MX_GPIO_Init+0x2e8>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800702a:	2200      	movs	r2, #0
 800702c:	2110      	movs	r1, #16
 800702e:	4884      	ldr	r0, [pc, #528]	; (8007240 <MX_GPIO_Init+0x2ec>)
 8007030:	f7fa feee 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800703a:	4882      	ldr	r0, [pc, #520]	; (8007244 <MX_GPIO_Init+0x2f0>)
 800703c:	f7fa fee8 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 8007040:	2200      	movs	r2, #0
 8007042:	2141      	movs	r1, #65	; 0x41
 8007044:	4880      	ldr	r0, [pc, #512]	; (8007248 <MX_GPIO_Init+0x2f4>)
 8007046:	f7fa fee3 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800704a:	2200      	movs	r2, #0
 800704c:	f44f 4191 	mov.w	r1, #18560	; 0x4880
 8007050:	487e      	ldr	r0, [pc, #504]	; (800724c <MX_GPIO_Init+0x2f8>)
 8007052:	f7fa fedd 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8007056:	2200      	movs	r2, #0
 8007058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800705c:	487c      	ldr	r0, [pc, #496]	; (8007250 <MX_GPIO_Init+0x2fc>)
 800705e:	f7fa fed7 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8007062:	2200      	movs	r2, #0
 8007064:	2102      	movs	r1, #2
 8007066:	487b      	ldr	r0, [pc, #492]	; (8007254 <MX_GPIO_Init+0x300>)
 8007068:	f7fa fed2 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 800706c:	2200      	movs	r2, #0
 800706e:	2101      	movs	r1, #1
 8007070:	4879      	ldr	r0, [pc, #484]	; (8007258 <MX_GPIO_Init+0x304>)
 8007072:	f7fa fecd 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8007076:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800707c:	4b77      	ldr	r3, [pc, #476]	; (800725c <MX_GPIO_Init+0x308>)
 800707e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007080:	2300      	movs	r3, #0
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007088:	4619      	mov	r1, r3
 800708a:	4871      	ldr	r0, [pc, #452]	; (8007250 <MX_GPIO_Init+0x2fc>)
 800708c:	f7fa fd16 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007090:	2332      	movs	r3, #50	; 0x32
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007094:	2302      	movs	r3, #2
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007098:	2300      	movs	r3, #0
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800709c:	2303      	movs	r3, #3
 800709e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80070a0:	230b      	movs	r3, #11
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070a8:	4619      	mov	r1, r3
 80070aa:	4869      	ldr	r0, [pc, #420]	; (8007250 <MX_GPIO_Init+0x2fc>)
 80070ac:	f7fa fd06 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80070b0:	2386      	movs	r3, #134	; 0x86
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b4:	2302      	movs	r3, #2
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070bc:	2303      	movs	r3, #3
 80070be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80070c0:	230b      	movs	r3, #11
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070c8:	4619      	mov	r1, r3
 80070ca:	485d      	ldr	r0, [pc, #372]	; (8007240 <MX_GPIO_Init+0x2ec>)
 80070cc:	f7fa fcf6 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80070d0:	2310      	movs	r3, #16
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070d4:	2301      	movs	r3, #1
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d8:	2300      	movs	r3, #0
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070dc:	2300      	movs	r3, #0
 80070de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80070e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070e4:	4619      	mov	r1, r3
 80070e6:	4856      	ldr	r0, [pc, #344]	; (8007240 <MX_GPIO_Init+0x2ec>)
 80070e8:	f7fa fce8 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80070ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80070f2:	2311      	movs	r3, #17
 80070f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070fa:	2300      	movs	r3, #0
 80070fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80070fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007102:	4619      	mov	r1, r3
 8007104:	484f      	ldr	r0, [pc, #316]	; (8007244 <MX_GPIO_Init+0x2f0>)
 8007106:	f7fa fcd9 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 800710a:	2341      	movs	r3, #65	; 0x41
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800710e:	2301      	movs	r3, #1
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007112:	2300      	movs	r3, #0
 8007114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007116:	2300      	movs	r3, #0
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800711a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800711e:	4619      	mov	r1, r3
 8007120:	4849      	ldr	r0, [pc, #292]	; (8007248 <MX_GPIO_Init+0x2f4>)
 8007122:	f7fa fccb 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7;
 8007126:	f44f 4391 	mov.w	r3, #18560	; 0x4880
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800712c:	2301      	movs	r3, #1
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007130:	2300      	movs	r3, #0
 8007132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007134:	2300      	movs	r3, #0
 8007136:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800713c:	4619      	mov	r1, r3
 800713e:	4843      	ldr	r0, [pc, #268]	; (800724c <MX_GPIO_Init+0x2f8>)
 8007140:	f7fa fcbc 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800714a:	2302      	movs	r3, #2
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714e:	2300      	movs	r3, #0
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007152:	2303      	movs	r3, #3
 8007154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007156:	230b      	movs	r3, #11
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800715a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800715e:	4619      	mov	r1, r3
 8007160:	483a      	ldr	r0, [pc, #232]	; (800724c <MX_GPIO_Init+0x2f8>)
 8007162:	f7fa fcab 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007166:	2380      	movs	r3, #128	; 0x80
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800716a:	2300      	movs	r3, #0
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716e:	2300      	movs	r3, #0
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007176:	4619      	mov	r1, r3
 8007178:	4833      	ldr	r0, [pc, #204]	; (8007248 <MX_GPIO_Init+0x2f4>)
 800717a:	f7fa fc9f 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800717e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007184:	2311      	movs	r3, #17
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007188:	2300      	movs	r3, #0
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800718c:	2300      	movs	r3, #0
 800718e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007194:	4619      	mov	r1, r3
 8007196:	482e      	ldr	r0, [pc, #184]	; (8007250 <MX_GPIO_Init+0x2fc>)
 8007198:	f7fa fc90 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800719c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a2:	2302      	movs	r3, #2
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071aa:	2303      	movs	r3, #3
 80071ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071ae:	230a      	movs	r3, #10
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b6:	4619      	mov	r1, r3
 80071b8:	4821      	ldr	r0, [pc, #132]	; (8007240 <MX_GPIO_Init+0x2ec>)
 80071ba:	f7fa fc7f 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80071be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071c4:	2300      	movs	r3, #0
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d0:	4619      	mov	r1, r3
 80071d2:	481b      	ldr	r0, [pc, #108]	; (8007240 <MX_GPIO_Init+0x2ec>)
 80071d4:	f7fa fc72 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80071d8:	2302      	movs	r3, #2
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071dc:	2301      	movs	r3, #1
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071e4:	2300      	movs	r3, #0
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ec:	4619      	mov	r1, r3
 80071ee:	4819      	ldr	r0, [pc, #100]	; (8007254 <MX_GPIO_Init+0x300>)
 80071f0:	f7fa fc64 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80071f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fa:	2302      	movs	r3, #2
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007202:	2303      	movs	r3, #3
 8007204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007206:	230b      	movs	r3, #11
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800720a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800720e:	4619      	mov	r1, r3
 8007210:	480d      	ldr	r0, [pc, #52]	; (8007248 <MX_GPIO_Init+0x2f4>)
 8007212:	f7fa fc53 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007216:	2301      	movs	r3, #1
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800721a:	2301      	movs	r3, #1
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721e:	2300      	movs	r3, #0
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007222:	2300      	movs	r3, #0
 8007224:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800722a:	4619      	mov	r1, r3
 800722c:	480a      	ldr	r0, [pc, #40]	; (8007258 <MX_GPIO_Init+0x304>)
 800722e:	f7fa fc45 	bl	8001abc <HAL_GPIO_Init>

}
 8007232:	bf00      	nop
 8007234:	3738      	adds	r7, #56	; 0x38
 8007236:	46bd      	mov	sp, r7
 8007238:	e012      	b.n	8007260 <MX_GPIO_Init+0x30c>
 800723a:	bf00      	nop
 800723c:	40023800 	.word	0x40023800
 8007240:	40020000 	.word	0x40020000
 8007244:	40021400 	.word	0x40021400
 8007248:	40021800 	.word	0x40021800
 800724c:	40020400 	.word	0x40020400
 8007250:	40020800 	.word	0x40020800
 8007254:	40020c00 	.word	0x40020c00
 8007258:	40021000 	.word	0x40021000
 800725c:	10110000 	.word	0x10110000
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop

08007264 <burstMode>:
  *			All sensors will be checked for updated data and a data point will be generated
  * @param 	dataSize for the GPIO Pin that caused the external interrupt
  * @retval None
  */
static void burstMode(uint32_t dataSize)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	uint32_t dataAquisitionCnt = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]

	while(DataAquisitionFlag == 1)
 8007270:	e06e      	b.n	8007350 <burstMode+0xec>
	{
		if(Sensor_readSensorState(&sens1) == SENSOR_STATE_READY)
 8007272:	483c      	ldr	r0, [pc, #240]	; (8007364 <burstMode+0x100>)
 8007274:	f001 fa0a 	bl	800868c <Sensor_readSensorState>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d108      	bne.n	8007290 <burstMode+0x2c>
		{
			Sensor_readTempData(&sens1);
 800727e:	4839      	ldr	r0, [pc, #228]	; (8007364 <burstMode+0x100>)
 8007280:	f000 fdb4 	bl	8007dec <Sensor_readTempData>
			Sensor_setTimeStamp(&sens1);
 8007284:	4837      	ldr	r0, [pc, #220]	; (8007364 <burstMode+0x100>)
 8007286:	f001 fbd3 	bl	8008a30 <Sensor_setTimeStamp>
			Sensor_tempConversion(&sens1);
 800728a:	4836      	ldr	r0, [pc, #216]	; (8007364 <burstMode+0x100>)
 800728c:	f000 ffc0 	bl	8008210 <Sensor_tempConversion>
		}

		if(Sensor_readSensorState(&sens2) == SENSOR_STATE_READY)
 8007290:	4835      	ldr	r0, [pc, #212]	; (8007368 <burstMode+0x104>)
 8007292:	f001 f9fb 	bl	800868c <Sensor_readSensorState>
 8007296:	4603      	mov	r3, r0
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <burstMode+0x44>
		{
			Sensor_readTempData(&sens2);
 800729c:	4832      	ldr	r0, [pc, #200]	; (8007368 <burstMode+0x104>)
 800729e:	f000 fda5 	bl	8007dec <Sensor_readTempData>
			//Sensor_setTimeStamp(&sens2);
			Sensor_tempConversion(&sens2);
 80072a2:	4831      	ldr	r0, [pc, #196]	; (8007368 <burstMode+0x104>)
 80072a4:	f000 ffb4 	bl	8008210 <Sensor_tempConversion>
			//Sensor_incrementCycleCnt(&sens2);
		}

		if(Sensor_readSensorState(&sens3) == SENSOR_STATE_READY)
 80072a8:	4830      	ldr	r0, [pc, #192]	; (800736c <burstMode+0x108>)
 80072aa:	f001 f9ef 	bl	800868c <Sensor_readSensorState>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d106      	bne.n	80072c2 <burstMode+0x5e>
		{
			Sensor_readTempData(&sens3);
 80072b4:	482d      	ldr	r0, [pc, #180]	; (800736c <burstMode+0x108>)
 80072b6:	f000 fd99 	bl	8007dec <Sensor_readTempData>
			//Sensor_setTimeStamp(&sens3);
			Sensor_tempConversion(&sens3);
 80072ba:	482c      	ldr	r0, [pc, #176]	; (800736c <burstMode+0x108>)
 80072bc:	f000 ffa8 	bl	8008210 <Sensor_tempConversion>
 80072c0:	e002      	b.n	80072c8 <burstMode+0x64>

		}
		else
		{
			Sensor_putDummyData(&sens3);
 80072c2:	482a      	ldr	r0, [pc, #168]	; (800736c <burstMode+0x108>)
 80072c4:	f001 fc66 	bl	8008b94 <Sensor_putDummyData>

		}

		if(Sensor_readSensorState(&sens4) == SENSOR_STATE_READY)
 80072c8:	4829      	ldr	r0, [pc, #164]	; (8007370 <burstMode+0x10c>)
 80072ca:	f001 f9df 	bl	800868c <Sensor_readSensorState>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d106      	bne.n	80072e2 <burstMode+0x7e>
		{
			Sensor_readTempData(&sens4);
 80072d4:	4826      	ldr	r0, [pc, #152]	; (8007370 <burstMode+0x10c>)
 80072d6:	f000 fd89 	bl	8007dec <Sensor_readTempData>
			//Sensor_setTimeStamp(&sens4);
			Sensor_tempConversion(&sens4);
 80072da:	4825      	ldr	r0, [pc, #148]	; (8007370 <burstMode+0x10c>)
 80072dc:	f000 ff98 	bl	8008210 <Sensor_tempConversion>
 80072e0:	e002      	b.n	80072e8 <burstMode+0x84>

		}
		else
		{
			Sensor_putDummyData(&sens4);
 80072e2:	4823      	ldr	r0, [pc, #140]	; (8007370 <burstMode+0x10c>)
 80072e4:	f001 fc56 	bl	8008b94 <Sensor_putDummyData>
		}


		if(Sensor_readSensorState(&sens5) == SENSOR_STATE_READY)
 80072e8:	4822      	ldr	r0, [pc, #136]	; (8007374 <burstMode+0x110>)
 80072ea:	f001 f9cf 	bl	800868c <Sensor_readSensorState>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d103      	bne.n	80072fc <burstMode+0x98>
		{
			Sensor_readTempData(&sens5);
 80072f4:	481f      	ldr	r0, [pc, #124]	; (8007374 <burstMode+0x110>)
 80072f6:	f000 fd79 	bl	8007dec <Sensor_readTempData>
 80072fa:	e002      	b.n	8007302 <burstMode+0x9e>
			//Sensor_setTimeStamp(&sens5);
			//Sensor_incrementCycleCnt(&sens5);
		}
		else
		{
			Sensor_putDummyData(&sens5);
 80072fc:	481d      	ldr	r0, [pc, #116]	; (8007374 <burstMode+0x110>)
 80072fe:	f001 fc49 	bl	8008b94 <Sensor_putDummyData>
			//Sensor_incrementCycleCnt(&sens5);
		}

		Operator_uartSendTempData(&huart3, &operator1);
 8007302:	491d      	ldr	r1, [pc, #116]	; (8007378 <burstMode+0x114>)
 8007304:	481d      	ldr	r0, [pc, #116]	; (800737c <burstMode+0x118>)
 8007306:	f000 fa21 	bl	800774c <Operator_uartSendTempData>

		if(dataAquisitionCnt >= dataSize)
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	429a      	cmp	r2, r3
 8007310:	d309      	bcc.n	8007326 <burstMode+0xc2>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8007312:	2200      	movs	r2, #0
 8007314:	2180      	movs	r1, #128	; 0x80
 8007316:	481a      	ldr	r0, [pc, #104]	; (8007380 <burstMode+0x11c>)
 8007318:	f7fa fd7a 	bl	8001e10 <HAL_GPIO_WritePin>
			DataAquisitionFlag = 0;
 800731c:	4b19      	ldr	r3, [pc, #100]	; (8007384 <burstMode+0x120>)
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
			turnOffCurrentSink();
 8007322:	f002 f9f1 	bl	8009708 <turnOffCurrentSink>
		}

		dataAquisitionCnt ++;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3301      	adds	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]

		Sensor_incrementCycleCnt(&sens1);
 800732c:	480d      	ldr	r0, [pc, #52]	; (8007364 <burstMode+0x100>)
 800732e:	f001 fc0e 	bl	8008b4e <Sensor_incrementCycleCnt>
		Sensor_incrementCycleCnt(&sens2);
 8007332:	480d      	ldr	r0, [pc, #52]	; (8007368 <burstMode+0x104>)
 8007334:	f001 fc0b 	bl	8008b4e <Sensor_incrementCycleCnt>
		Sensor_incrementCycleCnt(&sens3);
 8007338:	480c      	ldr	r0, [pc, #48]	; (800736c <burstMode+0x108>)
 800733a:	f001 fc08 	bl	8008b4e <Sensor_incrementCycleCnt>
		Sensor_incrementCycleCnt(&sens4);
 800733e:	480c      	ldr	r0, [pc, #48]	; (8007370 <burstMode+0x10c>)
 8007340:	f001 fc05 	bl	8008b4e <Sensor_incrementCycleCnt>
		Sensor_incrementCycleCnt(&sens5);
 8007344:	480b      	ldr	r0, [pc, #44]	; (8007374 <burstMode+0x110>)
 8007346:	f001 fc02 	bl	8008b4e <Sensor_incrementCycleCnt>

		HAL_Delay(2);
 800734a:	2002      	movs	r0, #2
 800734c:	f7f9 f9be 	bl	80006cc <HAL_Delay>
	while(DataAquisitionFlag == 1)
 8007350:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <burstMode+0x120>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b01      	cmp	r3, #1
 8007358:	d08b      	beq.n	8007272 <burstMode+0xe>
	}
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20004940 	.word	0x20004940
 8007368:	200007a0 	.word	0x200007a0
 800736c:	20001d50 	.word	0x20001d50
 8007370:	20005fd8 	.word	0x20005fd8
 8007374:	200032e8 	.word	0x200032e8
 8007378:	20004898 	.word	0x20004898
 800737c:	20000628 	.word	0x20000628
 8007380:	40020400 	.word	0x40020400
 8007384:	20000298 	.word	0x20000298

08007388 <configOperator>:
  * @brief	Sets the configuration parameters and call the init function of the operator handler
  * @param 	None
  * @retval None
  */
static void configOperator(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <configOperator+0x30>)
 800738e:	4a0b      	ldr	r2, [pc, #44]	; (80073bc <configOperator+0x34>)
 8007390:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 256000;
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <configOperator+0x30>)
 8007394:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8007398:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <configOperator+0x30>)
 800739c:	2200      	movs	r2, #0
 800739e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <configOperator+0x30>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80073a6:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <configOperator+0x30>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	611a      	str	r2, [r3, #16]

	Operator_uartInitOperatorInterface(&huart3, &operator1);
 80073ac:	4904      	ldr	r1, [pc, #16]	; (80073c0 <configOperator+0x38>)
 80073ae:	4802      	ldr	r0, [pc, #8]	; (80073b8 <configOperator+0x30>)
 80073b0:	f000 f9a2 	bl	80076f8 <Operator_uartInitOperatorInterface>
}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000628 	.word	0x20000628
 80073bc:	40004800 	.word	0x40004800
 80073c0:	20004898 	.word	0x20004898

080073c4 <configSensors>:
  * @brief 	Sets the configuration parameters for each sensor and calls the init function for each sensor handler
  * @param 	None
  * @retval None
  */
static void configSensors(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
	/*General Sensor Init*/
	sens1.Init.sensorType = SENSOR_TYPE_THERMOCOUPLE;
 80073c8:	4b62      	ldr	r3, [pc, #392]	; (8007554 <configSensors+0x190>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
	sens1.Init.sensorCnt = 1;
 80073ce:	4b61      	ldr	r3, [pc, #388]	; (8007554 <configSensors+0x190>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	705a      	strb	r2, [r3, #1]
	sens1.Init.interfaceType = SENSOR_INTERFACE_TYPE_I2C;
 80073d4:	4b5f      	ldr	r3, [pc, #380]	; (8007554 <configSensors+0x190>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	709a      	strb	r2, [r3, #2]
	sens1.Init.identifier = MCP9600_ACTIVE;
 80073da:	4b5e      	ldr	r3, [pc, #376]	; (8007554 <configSensors+0x190>)
 80073dc:	22a0      	movs	r2, #160	; 0xa0
 80073de:	809a      	strh	r2, [r3, #4]

	/*Interface Init*/
	sens1.hi2c_peripheral.Instance = I2C1;
 80073e0:	4a5c      	ldr	r2, [pc, #368]	; (8007554 <configSensors+0x190>)
 80073e2:	f241 23b4 	movw	r3, #4788	; 0x12b4
 80073e6:	4413      	add	r3, r2
 80073e8:	4a5b      	ldr	r2, [pc, #364]	; (8007558 <configSensors+0x194>)
 80073ea:	601a      	str	r2, [r3, #0]
	sens1.hi2c_peripheral.Init.Timing = 0x30802EB5;
 80073ec:	4a59      	ldr	r2, [pc, #356]	; (8007554 <configSensors+0x190>)
 80073ee:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80073f2:	4413      	add	r3, r2
 80073f4:	4a59      	ldr	r2, [pc, #356]	; (800755c <configSensors+0x198>)
 80073f6:	601a      	str	r2, [r3, #0]
	sens1.i2c_data.slaveAdress = (0x60<<1);
 80073f8:	4b56      	ldr	r3, [pc, #344]	; (8007554 <configSensors+0x190>)
 80073fa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80073fe:	22c0      	movs	r2, #192	; 0xc0
 8007400:	701a      	strb	r2, [r3, #0]


	Sensor_initSensor(&sens1);
 8007402:	4854      	ldr	r0, [pc, #336]	; (8007554 <configSensors+0x190>)
 8007404:	f000 fc58 	bl	8007cb8 <Sensor_initSensor>

	/*General Sensor Init*/
	sens2.Init.sensorType = SENSOR_TYPE_THERMOPILE;
 8007408:	4b55      	ldr	r3, [pc, #340]	; (8007560 <configSensors+0x19c>)
 800740a:	2202      	movs	r2, #2
 800740c:	701a      	strb	r2, [r3, #0]
	sens2.Init.sensorCnt = 2;
 800740e:	4b54      	ldr	r3, [pc, #336]	; (8007560 <configSensors+0x19c>)
 8007410:	2202      	movs	r2, #2
 8007412:	705a      	strb	r2, [r3, #1]
	sens2.Init.interfaceType = SENSOR_INTERFACE_TYPE_SPI;
 8007414:	4b52      	ldr	r3, [pc, #328]	; (8007560 <configSensors+0x19c>)
 8007416:	2202      	movs	r2, #2
 8007418:	709a      	strb	r2, [r3, #2]
	sens2.Init.identifier = PSOC4_ACTIVE;
 800741a:	4b51      	ldr	r3, [pc, #324]	; (8007560 <configSensors+0x19c>)
 800741c:	22b1      	movs	r2, #177	; 0xb1
 800741e:	809a      	strh	r2, [r3, #4]

	/*Interface Init*/
	sens2.spi_peripheral.Instance = SPI1;
 8007420:	4a4f      	ldr	r2, [pc, #316]	; (8007560 <configSensors+0x19c>)
 8007422:	f241 3344 	movw	r3, #4932	; 0x1344
 8007426:	4413      	add	r3, r2
 8007428:	4a4e      	ldr	r2, [pc, #312]	; (8007564 <configSensors+0x1a0>)
 800742a:	601a      	str	r2, [r3, #0]
	sens2.spi_peripheral.Init.Mode = SPI_MODE_MASTER;
 800742c:	4a4c      	ldr	r2, [pc, #304]	; (8007560 <configSensors+0x19c>)
 800742e:	f241 3348 	movw	r3, #4936	; 0x1348
 8007432:	4413      	add	r3, r2
 8007434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007438:	601a      	str	r2, [r3, #0]
	sens2.spi_peripheral.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800743a:	4b49      	ldr	r3, [pc, #292]	; (8007560 <configSensors+0x19c>)
 800743c:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
	sens2.spi_peripheral.Init.Direction = SPI_DIRECTION_2LINES;
 8007444:	4a46      	ldr	r2, [pc, #280]	; (8007560 <configSensors+0x19c>)
 8007446:	f241 334c 	movw	r3, #4940	; 0x134c
 800744a:	4413      	add	r3, r2
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
	sens2.spi_peripheral.Init.DataSize = SPI_DATASIZE_8BIT;
 8007450:	4a43      	ldr	r2, [pc, #268]	; (8007560 <configSensors+0x19c>)
 8007452:	f241 3350 	movw	r3, #4944	; 0x1350
 8007456:	4413      	add	r3, r2
 8007458:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800745c:	601a      	str	r2, [r3, #0]
	sens2.spi_peripheral.Init.CLKPolarity = SPI_POLARITY_LOW;
 800745e:	4a40      	ldr	r2, [pc, #256]	; (8007560 <configSensors+0x19c>)
 8007460:	f241 3354 	movw	r3, #4948	; 0x1354
 8007464:	4413      	add	r3, r2
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
	sens2.spi_peripheral.Init.CLKPhase = SPI_PHASE_1EDGE;
 800746a:	4a3d      	ldr	r2, [pc, #244]	; (8007560 <configSensors+0x19c>)
 800746c:	f241 3358 	movw	r3, #4952	; 0x1358
 8007470:	4413      	add	r3, r2
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
	sens2.spi_data.NSS_Pin = SPI1_NSS_Pin;
 8007476:	4a3a      	ldr	r2, [pc, #232]	; (8007560 <configSensors+0x19c>)
 8007478:	f241 33a8 	movw	r3, #5032	; 0x13a8
 800747c:	4413      	add	r3, r2
 800747e:	2210      	movs	r2, #16
 8007480:	801a      	strh	r2, [r3, #0]
	sens2.spi_data.NSS_Port = SPI1_NSS_GPIO_Port;
 8007482:	4a37      	ldr	r2, [pc, #220]	; (8007560 <configSensors+0x19c>)
 8007484:	f241 33ac 	movw	r3, #5036	; 0x13ac
 8007488:	4413      	add	r3, r2
 800748a:	4a37      	ldr	r2, [pc, #220]	; (8007568 <configSensors+0x1a4>)
 800748c:	601a      	str	r2, [r3, #0]

	Sensor_initSensor(&sens2);
 800748e:	4834      	ldr	r0, [pc, #208]	; (8007560 <configSensors+0x19c>)
 8007490:	f000 fc12 	bl	8007cb8 <Sensor_initSensor>

	/*General Sensor Init*/
	sens3.Init.sensorType = SENSOR_TYPE_THERMISTOR_NTC;
 8007494:	4b35      	ldr	r3, [pc, #212]	; (800756c <configSensors+0x1a8>)
 8007496:	2204      	movs	r2, #4
 8007498:	701a      	strb	r2, [r3, #0]
	sens3.Init.sensorCnt = 3;
 800749a:	4b34      	ldr	r3, [pc, #208]	; (800756c <configSensors+0x1a8>)
 800749c:	2203      	movs	r2, #3
 800749e:	705a      	strb	r2, [r3, #1]
	sens3.Init.interfaceType = SENSOR_INTERFACE_TYPE_ANALOG;
 80074a0:	4b32      	ldr	r3, [pc, #200]	; (800756c <configSensors+0x1a8>)
 80074a2:	2203      	movs	r2, #3
 80074a4:	709a      	strb	r2, [r3, #2]
	sens3.Init.identifier = VTHADC_ACTIVE;
 80074a6:	4b31      	ldr	r3, [pc, #196]	; (800756c <configSensors+0x1a8>)
 80074a8:	22c1      	movs	r2, #193	; 0xc1
 80074aa:	809a      	strh	r2, [r3, #4]

	/*Interface Init*/
	sens3.adc_peripheral.Instance = ADC1;
 80074ac:	4a2f      	ldr	r2, [pc, #188]	; (800756c <configSensors+0x1a8>)
 80074ae:	f241 33f4 	movw	r3, #5108	; 0x13f4
 80074b2:	4413      	add	r3, r2
 80074b4:	4a2e      	ldr	r2, [pc, #184]	; (8007570 <configSensors+0x1ac>)
 80074b6:	601a      	str	r2, [r3, #0]
	sens3.adc_peripheral.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80074b8:	4a2c      	ldr	r2, [pc, #176]	; (800756c <configSensors+0x1a8>)
 80074ba:	f241 33f8 	movw	r3, #5112	; 0x13f8
 80074be:	4413      	add	r3, r2
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
	sens3.adc_peripheral.Init.Resolution = ADC_RESOLUTION_12B;
 80074c4:	4a29      	ldr	r2, [pc, #164]	; (800756c <configSensors+0x1a8>)
 80074c6:	f241 33fc 	movw	r3, #5116	; 0x13fc
 80074ca:	4413      	add	r3, r2
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
	sens3.adc_peripheral.Init.NbrOfConversion = 1;
 80074d0:	4a26      	ldr	r2, [pc, #152]	; (800756c <configSensors+0x1a8>)
 80074d2:	f241 4310 	movw	r3, #5136	; 0x1410
 80074d6:	4413      	add	r3, r2
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]

	Sensor_initSensor(&sens3);
 80074dc:	4823      	ldr	r0, [pc, #140]	; (800756c <configSensors+0x1a8>)
 80074de:	f000 fbeb 	bl	8007cb8 <Sensor_initSensor>

	/*General Sensor Init*/
	sens4.Init.sensorType = SENSOR_TYPE_TSEP;
 80074e2:	4b24      	ldr	r3, [pc, #144]	; (8007574 <configSensors+0x1b0>)
 80074e4:	2205      	movs	r2, #5
 80074e6:	701a      	strb	r2, [r3, #0]
	sens4.Init.sensorCnt = 4;
 80074e8:	4b22      	ldr	r3, [pc, #136]	; (8007574 <configSensors+0x1b0>)
 80074ea:	2204      	movs	r2, #4
 80074ec:	705a      	strb	r2, [r3, #1]
	sens4.Init.interfaceType = SENSOR_INTERFACE_TYPE_ANALOG;
 80074ee:	4b21      	ldr	r3, [pc, #132]	; (8007574 <configSensors+0x1b0>)
 80074f0:	2203      	movs	r2, #3
 80074f2:	709a      	strb	r2, [r3, #2]
	sens4.Init.identifier = VFADC_ACTIVE;
 80074f4:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <configSensors+0x1b0>)
 80074f6:	22c0      	movs	r2, #192	; 0xc0
 80074f8:	809a      	strh	r2, [r3, #4]

	/*Interface Init*/
	sens4.adc_peripheral.Instance = ADC2;
 80074fa:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <configSensors+0x1b0>)
 80074fc:	f241 33f4 	movw	r3, #5108	; 0x13f4
 8007500:	4413      	add	r3, r2
 8007502:	4a1d      	ldr	r2, [pc, #116]	; (8007578 <configSensors+0x1b4>)
 8007504:	601a      	str	r2, [r3, #0]
	sens4.adc_peripheral.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007506:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <configSensors+0x1b0>)
 8007508:	f241 33f8 	movw	r3, #5112	; 0x13f8
 800750c:	4413      	add	r3, r2
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
	sens4.adc_peripheral.Init.Resolution = ADC_RESOLUTION_12B;
 8007512:	4a18      	ldr	r2, [pc, #96]	; (8007574 <configSensors+0x1b0>)
 8007514:	f241 33fc 	movw	r3, #5116	; 0x13fc
 8007518:	4413      	add	r3, r2
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
	sens4.adc_peripheral.Init.NbrOfConversion = 1;
 800751e:	4a15      	ldr	r2, [pc, #84]	; (8007574 <configSensors+0x1b0>)
 8007520:	f241 4310 	movw	r3, #5136	; 0x1410
 8007524:	4413      	add	r3, r2
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]

	Sensor_initSensor(&sens4);
 800752a:	4812      	ldr	r0, [pc, #72]	; (8007574 <configSensors+0x1b0>)
 800752c:	f000 fbc4 	bl	8007cb8 <Sensor_initSensor>

	/*General Sensor Init*/
	sens5.Init.sensorType = SENSOR_TYPE_THERMOCAM;
 8007530:	4b12      	ldr	r3, [pc, #72]	; (800757c <configSensors+0x1b8>)
 8007532:	2206      	movs	r2, #6
 8007534:	701a      	strb	r2, [r3, #0]
	sens5.Init.sensorCnt = 5;
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <configSensors+0x1b8>)
 8007538:	2205      	movs	r2, #5
 800753a:	705a      	strb	r2, [r3, #1]
	sens5.Init.interfaceType = SENSOR_INTERFACE_TYPE_TRIGGER;
 800753c:	4b0f      	ldr	r3, [pc, #60]	; (800757c <configSensors+0x1b8>)
 800753e:	2204      	movs	r2, #4
 8007540:	709a      	strb	r2, [r3, #2]
	sens5.Init.identifier = VARIOCAM_ACIVE;
 8007542:	4b0e      	ldr	r3, [pc, #56]	; (800757c <configSensors+0x1b8>)
 8007544:	22d0      	movs	r2, #208	; 0xd0
 8007546:	809a      	strh	r2, [r3, #4]

	Sensor_initSensor(&sens5);
 8007548:	480c      	ldr	r0, [pc, #48]	; (800757c <configSensors+0x1b8>)
 800754a:	f000 fbb5 	bl	8007cb8 <Sensor_initSensor>
}
 800754e:	bf00      	nop
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20004940 	.word	0x20004940
 8007558:	40005400 	.word	0x40005400
 800755c:	30802eb5 	.word	0x30802eb5
 8007560:	200007a0 	.word	0x200007a0
 8007564:	40013000 	.word	0x40013000
 8007568:	40020000 	.word	0x40020000
 800756c:	20001d50 	.word	0x20001d50
 8007570:	40012000 	.word	0x40012000
 8007574:	20005fd8 	.word	0x20005fd8
 8007578:	40012100 	.word	0x40012100
 800757c:	200032e8 	.word	0x200032e8

08007580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("HAL_ERROR, Function: %s\r\n",hal_errorFunctionName);
 8007584:	4902      	ldr	r1, [pc, #8]	; (8007590 <Error_Handler+0x10>)
 8007586:	4803      	ldr	r0, [pc, #12]	; (8007594 <Error_Handler+0x14>)
 8007588:	f002 fdce 	bl	800a128 <iprintf>
  /* USER CODE END Error_Handler_Debug */
}
 800758c:	bf00      	nop
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000008 	.word	0x20000008
 8007594:	0800c278 	.word	0x0800c278

08007598 <Operator_initBuffer>:
  * @brief	Sets the transmit and receive buffer to 0 before the first communication
  * @param 	uart_data pointer the to user UART-data structure
  * @retval NONE
  */
static void Operator_initBuffer(Operator_UartDataType *uart_data)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	//TODO: Asserts
	//Init WriteBuf
	for(uint8_t i = 0; i < UART_WRITE_BUF_SIZE; i++)
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e007      	b.n	80075b6 <Operator_initBuffer+0x1e>
	{
		uart_data->transmitBuf[i] = 0;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4413      	add	r3, r2
 80075ac:	2200      	movs	r2, #0
 80075ae:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 0; i < UART_WRITE_BUF_SIZE; i++)
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	3301      	adds	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	2b1f      	cmp	r3, #31
 80075ba:	d9f4      	bls.n	80075a6 <Operator_initBuffer+0xe>
	}

	//Init ReadBuf
	for(uint8_t i = 0; i < UART_READ_BUF_SIZE; i++)
 80075bc:	2300      	movs	r3, #0
 80075be:	73bb      	strb	r3, [r7, #14]
 80075c0:	e002      	b.n	80075c8 <Operator_initBuffer+0x30>
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	3301      	adds	r3, #1
 80075c6:	73bb      	strb	r3, [r7, #14]
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b1f      	cmp	r3, #31
 80075cc:	d9f9      	bls.n	80075c2 <Operator_initBuffer+0x2a>
	{
		//uart_data->receiveBuf[i] = 0;
	}
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
	...

080075dc <parseCommand>:
  * @brief	This functions parses the incoming operator message and stores the different parts in the command structure
  * @param 	uart_data pointer the to user UART-data structure
  * @retval NONE
  */
static void parseCommand(Operator_UartDataType *uart_data)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	uint8_t from;
	uint8_t until;

	strncpy(Operator_rec.command, (char*)uart_data->receiveBuf, OPERATOR_COMMAND_SIZE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3321      	adds	r3, #33	; 0x21
 80075e8:	2212      	movs	r2, #18
 80075ea:	4619      	mov	r1, r3
 80075ec:	483d      	ldr	r0, [pc, #244]	; (80076e4 <parseCommand+0x108>)
 80075ee:	f002 fdb3 	bl	800a158 <strncpy>

	from = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	72fb      	strb	r3, [r7, #11]
	until = COMMAND_PRE_LENGTH;
 80075f6:	2308      	movs	r3, #8
 80075f8:	72bb      	strb	r3, [r7, #10]

	for(unsigned i = from; i <= until; i++)
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	e00d      	b.n	800761c <parseCommand+0x40>
	{
		Operator_rec.commandFlag[i - from] = Operator_rec.command[i];
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	4937      	ldr	r1, [pc, #220]	; (80076e4 <parseCommand+0x108>)
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	440a      	add	r2, r1
 800760c:	7811      	ldrb	r1, [r2, #0]
 800760e:	4a35      	ldr	r2, [pc, #212]	; (80076e4 <parseCommand+0x108>)
 8007610:	4413      	add	r3, r2
 8007612:	460a      	mov	r2, r1
 8007614:	749a      	strb	r2, [r3, #18]
	for(unsigned i = from; i <= until; i++)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	3301      	adds	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	7abb      	ldrb	r3, [r7, #10]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	429a      	cmp	r2, r3
 8007622:	d9ed      	bls.n	8007600 <parseCommand+0x24>
	}
	Operator_rec.commandFlag[COMMAND_PRE_LENGTH] = '\0';
 8007624:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <parseCommand+0x108>)
 8007626:	2200      	movs	r2, #0
 8007628:	769a      	strb	r2, [r3, #26]

	from = COMMAND_PRE_LENGTH;
 800762a:	2308      	movs	r3, #8
 800762c:	72fb      	strb	r3, [r7, #11]
	until = COMMAND_PRE_LENGTH + COMMAND_ID_LENGTH;
 800762e:	230b      	movs	r3, #11
 8007630:	72bb      	strb	r3, [r7, #10]

	if(strcmp(Operator_rec.commandFlag, "COMMAND:") == 0 )
 8007632:	492d      	ldr	r1, [pc, #180]	; (80076e8 <parseCommand+0x10c>)
 8007634:	482d      	ldr	r0, [pc, #180]	; (80076ec <parseCommand+0x110>)
 8007636:	f7f8 fe03 	bl	8000240 <strcmp>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d120      	bne.n	8007682 <parseCommand+0xa6>
	{
		for(unsigned i = from; i <= until; i++)
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	e00d      	b.n	8007662 <parseCommand+0x86>
		{
			Operator_rec.commandId[i-from] = Operator_rec.command[i];
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	4925      	ldr	r1, [pc, #148]	; (80076e4 <parseCommand+0x108>)
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	440a      	add	r2, r1
 8007652:	7811      	ldrb	r1, [r2, #0]
 8007654:	4a23      	ldr	r2, [pc, #140]	; (80076e4 <parseCommand+0x108>)
 8007656:	4413      	add	r3, r2
 8007658:	460a      	mov	r2, r1
 800765a:	76da      	strb	r2, [r3, #27]
		for(unsigned i = from; i <= until; i++)
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	3301      	adds	r3, #1
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	7abb      	ldrb	r3, [r7, #10]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	429a      	cmp	r2, r3
 8007668:	d9ed      	bls.n	8007646 <parseCommand+0x6a>
		}
		Operator_rec.commandId[COMMAND_ID_LENGTH] = '\0';
 800766a:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <parseCommand+0x108>)
 800766c:	2200      	movs	r2, #0
 800766e:	779a      	strb	r2, [r3, #30]

		Operator_rec.commandNr = atoi(Operator_rec.commandId);
 8007670:	481f      	ldr	r0, [pc, #124]	; (80076f0 <parseCommand+0x114>)
 8007672:	f002 f8e6 	bl	8009842 <atoi>
 8007676:	4603      	mov	r3, r0
 8007678:	b25a      	sxtb	r2, r3
 800767a:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <parseCommand+0x108>)
 800767c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8007680:	e003      	b.n	800768a <parseCommand+0xae>
	}
	else
	{
		Operator_rec.commandNr = -1;
 8007682:	4b18      	ldr	r3, [pc, #96]	; (80076e4 <parseCommand+0x108>)
 8007684:	22ff      	movs	r2, #255	; 0xff
 8007686:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}

	from = COMMAND_PRE_LENGTH + COMMAND_ID_LENGTH + 1;
 800768a:	230c      	movs	r3, #12
 800768c:	72fb      	strb	r3, [r7, #11]
	until = COMMAND_PRE_LENGTH + COMMAND_ID_LENGTH + 1 + COMMAND_DATA_LENGTH;
 800768e:	2312      	movs	r3, #18
 8007690:	72bb      	strb	r3, [r7, #10]

	if(Operator_rec.commandNr == OPERATOR_DATASIZE_COMMAND)
 8007692:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <parseCommand+0x108>)
 8007694:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8007698:	2b02      	cmp	r3, #2
 800769a:	d11f      	bne.n	80076dc <parseCommand+0x100>
	{
		for(unsigned i = from; i <= until; i++)
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e00d      	b.n	80076be <parseCommand+0xe2>
		{
			Operator_rec.commandData[i - from] = Operator_rec.command[i];
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	490e      	ldr	r1, [pc, #56]	; (80076e4 <parseCommand+0x108>)
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	440a      	add	r2, r1
 80076ae:	7811      	ldrb	r1, [r2, #0]
 80076b0:	4a0c      	ldr	r2, [pc, #48]	; (80076e4 <parseCommand+0x108>)
 80076b2:	4413      	add	r3, r2
 80076b4:	460a      	mov	r2, r1
 80076b6:	77da      	strb	r2, [r3, #31]
		for(unsigned i = from; i <= until; i++)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	7abb      	ldrb	r3, [r7, #10]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d9ed      	bls.n	80076a2 <parseCommand+0xc6>
		}
		Operator_rec.commandData[COMMAND_DATA_LENGTH] = '\0';
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <parseCommand+0x108>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		Operator_rec.commandParameter1 = atoi(Operator_rec.commandData);
 80076ce:	4809      	ldr	r0, [pc, #36]	; (80076f4 <parseCommand+0x118>)
 80076d0:	f002 f8b7 	bl	8009842 <atoi>
 80076d4:	4603      	mov	r3, r0
 80076d6:	461a      	mov	r2, r3
 80076d8:	4b02      	ldr	r3, [pc, #8]	; (80076e4 <parseCommand+0x108>)
 80076da:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 80076dc:	bf00      	nop
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	2000752c 	.word	0x2000752c
 80076e8:	0800c294 	.word	0x0800c294
 80076ec:	2000753e 	.word	0x2000753e
 80076f0:	20007547 	.word	0x20007547
 80076f4:	2000754b 	.word	0x2000754b

080076f8 <Operator_uartInitOperatorInterface>:
  	@param	huart pointer to the UART HAL peripheral handler
  * @param 	uart_data pointer the to user UART-data structure
  * @retval NONE
  */
void Operator_uartInitOperatorInterface(UART_HandleTypeDef *huart,Operator_UartDataType *uart_data )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	//TODO: Asserts
/*General settings which are not intended to be changed by operator*/
  huart->Init.Mode = UART_MODE_TX_RX;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	220c      	movs	r2, #12
 8007706:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7fe f80f 	bl	8005744 <HAL_UART_Init>
  {
    //TODO: Error
  }
  if(huart->Instance == USART3)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a06      	ldr	r2, [pc, #24]	; (8007744 <Operator_uartInitOperatorInterface+0x4c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d102      	bne.n	8007736 <Operator_uartInitOperatorInterface+0x3e>
  {
	  huart3p = huart;
 8007730:	4a05      	ldr	r2, [pc, #20]	; (8007748 <Operator_uartInitOperatorInterface+0x50>)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6013      	str	r3, [r2, #0]
  }
  Operator_initBuffer(uart_data);
 8007736:	6838      	ldr	r0, [r7, #0]
 8007738:	f7ff ff2e 	bl	8007598 <Operator_initBuffer>
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40004800 	.word	0x40004800
 8007748:	20007528 	.word	0x20007528

0800774c <Operator_uartSendTempData>:
  	@param	huart pointer to the UART HAL peripheral handler
  * @param 	uart_data pointer the to user UART-data structure
  * @retval NONE
  */
void Operator_uartSendTempData(UART_HandleTypeDef *huart, Operator_UartDataType *uart_data)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08c      	sub	sp, #48	; 0x30
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); /*Indication for time to serve operator*/
 8007756:	2201      	movs	r2, #1
 8007758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800775c:	4878      	ldr	r0, [pc, #480]	; (8007940 <Operator_uartSendTempData+0x1f4>)
 800775e:	f7fa fb57 	bl	8001e10 <HAL_GPIO_WritePin>
	uint8_t subseconds1;
	uint8_t subseconds2;

	/*Sensor 1 Thermocouple*/

	temperature_byte1 = ( (Sensor_getRegData(&sens1, 0x00) & 0xFF00) >> 8);
 8007762:	2100      	movs	r1, #0
 8007764:	4877      	ldr	r0, [pc, #476]	; (8007944 <Operator_uartSendTempData+0x1f8>)
 8007766:	f001 f9c8 	bl	8008afa <Sensor_getRegData>
 800776a:	4603      	mov	r3, r0
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	temperature_byte2 = ( (Sensor_getRegData(&sens1, 0x00) & 0x00FF) >> 0);
 8007772:	2100      	movs	r1, #0
 8007774:	4873      	ldr	r0, [pc, #460]	; (8007944 <Operator_uartSendTempData+0x1f8>)
 8007776:	f001 f9c0 	bl	8008afa <Sensor_getRegData>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	timestampValue=  Sensor_getTimeData(&sens1);
 8007780:	f107 030c 	add.w	r3, r7, #12
 8007784:	496f      	ldr	r1, [pc, #444]	; (8007944 <Operator_uartSendTempData+0x1f8>)
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f98c 	bl	8008aa4 <Sensor_getTimeData>
	hours = timestampValue.Hours;
 800778c:	7b3b      	ldrb	r3, [r7, #12]
 800778e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	minutes = timestampValue.Minutes;
 8007792:	7b7b      	ldrb	r3, [r7, #13]
 8007794:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	seconds = timestampValue.Seconds;
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	subseconds1 = ( (timestampValue.SubSeconds & 0xFF << 0) >> 0);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	subseconds2 = ( (timestampValue.SubSeconds & 0xFF << 8) >> 8);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	uart_data->transmitBuf[0] = hours;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80077b2:	705a      	strb	r2, [r3, #1]
	uart_data->transmitBuf[1] = minutes;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80077ba:	709a      	strb	r2, [r3, #2]
	uart_data->transmitBuf[2] = seconds;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80077c2:	70da      	strb	r2, [r3, #3]
	uart_data->transmitBuf[3] = subseconds1;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80077ca:	711a      	strb	r2, [r3, #4]
	uart_data->transmitBuf[4] = subseconds2;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80077d2:	715a      	strb	r2, [r3, #5]
	uart_data->transmitBuf[5] = temperature_byte1;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80077da:	719a      	strb	r2, [r3, #6]
	uart_data->transmitBuf[6] = temperature_byte2;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80077e2:	71da      	strb	r2, [r3, #7]

	/*Sensor 2 Thermopile*/

	temperature_byte1 = ( (Sensor_getRegData(&sens2, 0xA1) & 0xFF << 24) >> 24);
 80077e4:	21a1      	movs	r1, #161	; 0xa1
 80077e6:	4858      	ldr	r0, [pc, #352]	; (8007948 <Operator_uartSendTempData+0x1fc>)
 80077e8:	f001 f987 	bl	8008afa <Sensor_getRegData>
 80077ec:	4603      	mov	r3, r0
 80077ee:	0e1b      	lsrs	r3, r3, #24
 80077f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	temperature_byte2 = ( (Sensor_getRegData(&sens2, 0xA1) & 0xFF << 16) >> 16);
 80077f4:	21a1      	movs	r1, #161	; 0xa1
 80077f6:	4854      	ldr	r0, [pc, #336]	; (8007948 <Operator_uartSendTempData+0x1fc>)
 80077f8:	f001 f97f 	bl	8008afa <Sensor_getRegData>
 80077fc:	4603      	mov	r3, r0
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	temperature_byte3 = ( (Sensor_getRegData(&sens2, 0xA1) & 0xFF << 8) >> 8);
 8007804:	21a1      	movs	r1, #161	; 0xa1
 8007806:	4850      	ldr	r0, [pc, #320]	; (8007948 <Operator_uartSendTempData+0x1fc>)
 8007808:	f001 f977 	bl	8008afa <Sensor_getRegData>
 800780c:	4603      	mov	r3, r0
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	temperature_byte4 = ( (Sensor_getRegData(&sens2, 0xA1) & 0xFF << 0) >> 0);
 8007814:	21a1      	movs	r1, #161	; 0xa1
 8007816:	484c      	ldr	r0, [pc, #304]	; (8007948 <Operator_uartSendTempData+0x1fc>)
 8007818:	f001 f96f 	bl	8008afa <Sensor_getRegData>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uart_data->transmitBuf[7] = temperature_byte1;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007828:	721a      	strb	r2, [r3, #8]
	uart_data->transmitBuf[8] = temperature_byte2;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007830:	725a      	strb	r2, [r3, #9]
	uart_data->transmitBuf[9] = temperature_byte3;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007838:	729a      	strb	r2, [r3, #10]
	uart_data->transmitBuf[10] = temperature_byte4;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007840:	72da      	strb	r2, [r3, #11]

	/*Sensor 3 Thermistor*/

	temperature_byte1 = ( (Sensor_getRegData(&sens3, 0xA1) & 0xFF << 24) >> 24);
 8007842:	21a1      	movs	r1, #161	; 0xa1
 8007844:	4841      	ldr	r0, [pc, #260]	; (800794c <Operator_uartSendTempData+0x200>)
 8007846:	f001 f958 	bl	8008afa <Sensor_getRegData>
 800784a:	4603      	mov	r3, r0
 800784c:	0e1b      	lsrs	r3, r3, #24
 800784e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	temperature_byte2 = ( (Sensor_getRegData(&sens3, 0xA1) & 0xFF << 16) >> 16);
 8007852:	21a1      	movs	r1, #161	; 0xa1
 8007854:	483d      	ldr	r0, [pc, #244]	; (800794c <Operator_uartSendTempData+0x200>)
 8007856:	f001 f950 	bl	8008afa <Sensor_getRegData>
 800785a:	4603      	mov	r3, r0
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	temperature_byte3 = ( (Sensor_getRegData(&sens3, 0xA1) & 0xFF << 8) >> 8);
 8007862:	21a1      	movs	r1, #161	; 0xa1
 8007864:	4839      	ldr	r0, [pc, #228]	; (800794c <Operator_uartSendTempData+0x200>)
 8007866:	f001 f948 	bl	8008afa <Sensor_getRegData>
 800786a:	4603      	mov	r3, r0
 800786c:	0a1b      	lsrs	r3, r3, #8
 800786e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	temperature_byte4 = ( (Sensor_getRegData(&sens3, 0xA1) & 0xFF << 0) >> 0);
 8007872:	21a1      	movs	r1, #161	; 0xa1
 8007874:	4835      	ldr	r0, [pc, #212]	; (800794c <Operator_uartSendTempData+0x200>)
 8007876:	f001 f940 	bl	8008afa <Sensor_getRegData>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uart_data->transmitBuf[11] = temperature_byte1;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007886:	731a      	strb	r2, [r3, #12]
	uart_data->transmitBuf[12] = temperature_byte2;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800788e:	735a      	strb	r2, [r3, #13]
	uart_data->transmitBuf[13] = temperature_byte3;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007896:	739a      	strb	r2, [r3, #14]
	uart_data->transmitBuf[14] = temperature_byte4;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800789e:	73da      	strb	r2, [r3, #15]

	/*Sensor 4 TSEP*/

	temperature_byte1 = ( (Sensor_getRegData(&sens4, 0xA1) & 0xFF << 24) >> 24);
 80078a0:	21a1      	movs	r1, #161	; 0xa1
 80078a2:	482b      	ldr	r0, [pc, #172]	; (8007950 <Operator_uartSendTempData+0x204>)
 80078a4:	f001 f929 	bl	8008afa <Sensor_getRegData>
 80078a8:	4603      	mov	r3, r0
 80078aa:	0e1b      	lsrs	r3, r3, #24
 80078ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	temperature_byte2 = ( (Sensor_getRegData(&sens4, 0xA1) & 0xFF << 16) >> 16);
 80078b0:	21a1      	movs	r1, #161	; 0xa1
 80078b2:	4827      	ldr	r0, [pc, #156]	; (8007950 <Operator_uartSendTempData+0x204>)
 80078b4:	f001 f921 	bl	8008afa <Sensor_getRegData>
 80078b8:	4603      	mov	r3, r0
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	temperature_byte3 = ( (Sensor_getRegData(&sens4, 0xA1) & 0xFF << 8) >> 8);
 80078c0:	21a1      	movs	r1, #161	; 0xa1
 80078c2:	4823      	ldr	r0, [pc, #140]	; (8007950 <Operator_uartSendTempData+0x204>)
 80078c4:	f001 f919 	bl	8008afa <Sensor_getRegData>
 80078c8:	4603      	mov	r3, r0
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	temperature_byte4 = ( (Sensor_getRegData(&sens4, 0xA1) & 0xFF << 0) >> 0);
 80078d0:	21a1      	movs	r1, #161	; 0xa1
 80078d2:	481f      	ldr	r0, [pc, #124]	; (8007950 <Operator_uartSendTempData+0x204>)
 80078d4:	f001 f911 	bl	8008afa <Sensor_getRegData>
 80078d8:	4603      	mov	r3, r0
 80078da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uart_data->transmitBuf[15] = temperature_byte1;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80078e4:	741a      	strb	r2, [r3, #16]
	uart_data->transmitBuf[16] = temperature_byte2;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80078ec:	745a      	strb	r2, [r3, #17]
	uart_data->transmitBuf[17] = temperature_byte3;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80078f4:	749a      	strb	r2, [r3, #18]
	uart_data->transmitBuf[18] = temperature_byte4;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80078fc:	74da      	strb	r2, [r3, #19]

	/*Sensor 5 Thermocamera*/

	temperature_byte1 = Sensor_getRegData(&sens5, 0xA1);
 80078fe:	21a1      	movs	r1, #161	; 0xa1
 8007900:	4814      	ldr	r0, [pc, #80]	; (8007954 <Operator_uartSendTempData+0x208>)
 8007902:	f001 f8fa 	bl	8008afa <Sensor_getRegData>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	uart_data->transmitBuf[19] = temperature_byte1;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007912:	751a      	strb	r2, [r3, #20]

	uart_data->nBytes = 20;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2214      	movs	r2, #20
 8007918:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_DMA(huart, uart_data->transmitBuf,uart_data->nBytes);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	1c59      	adds	r1, r3, #1
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fd ff5a 	bl	80057e0 <HAL_UART_Transmit_DMA>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800792c:	2200      	movs	r2, #0
 800792e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007932:	4803      	ldr	r0, [pc, #12]	; (8007940 <Operator_uartSendTempData+0x1f4>)
 8007934:	f7fa fa6c 	bl	8001e10 <HAL_GPIO_WritePin>
}
 8007938:	bf00      	nop
 800793a:	3730      	adds	r7, #48	; 0x30
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	40020400 	.word	0x40020400
 8007944:	20004940 	.word	0x20004940
 8007948:	200007a0 	.word	0x200007a0
 800794c:	20001d50 	.word	0x20001d50
 8007950:	20005fd8 	.word	0x20005fd8
 8007954:	200032e8 	.word	0x200032e8

08007958 <Operator_uartListenCommand>:
  	@param	huart pointer to the UART HAL peripheral handler
  * @param 	uart_data pointer the to user UART-data structure
  * @retval NONE
  */
void Operator_uartListenCommand(UART_HandleTypeDef *huart, Operator_UartDataType *uart_data)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	if(uartDataReceived == 0)
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <Operator_uartListenCommand+0x28>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <Operator_uartListenCommand+0x20>
	{
		HAL_UART_Receive_DMA(huart, uart_data->receiveBuf, OPERATOR_COMMAND_SIZE+1);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	3321      	adds	r3, #33	; 0x21
 800796e:	2213      	movs	r2, #19
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fd ffb0 	bl	80058d8 <HAL_UART_Receive_DMA>
	}
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20000299 	.word	0x20000299

08007984 <Operator_processCommand>:
  	@param	huart pointer to the UART HAL peripheral handler
  * @param 	uart_data pointer the to user UART-data structure
  * @retval NONE
  */
uint8_t Operator_processCommand(UART_HandleTypeDef *huart, Operator_UartDataType *uart_data)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	if(uartDataReceived)
 800798e:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <Operator_processCommand+0x64>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d023      	beq.n	80079de <Operator_processCommand+0x5a>
	{

		uartDataReceived = 0;
 8007996:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <Operator_processCommand+0x64>)
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
		parseCommand(uart_data);
 800799c:	6838      	ldr	r0, [r7, #0]
 800799e:	f7ff fe1d 	bl	80075dc <parseCommand>
		memset(uart_data->receiveBuf,'\0',32);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	3321      	adds	r3, #33	; 0x21
 80079a6:	2220      	movs	r2, #32
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 ff78 	bl	80098a0 <memset>

		switch(Operator_rec.commandNr)
 80079b0:	4b0e      	ldr	r3, [pc, #56]	; (80079ec <Operator_processCommand+0x68>)
 80079b2:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d005      	beq.n	80079c6 <Operator_processCommand+0x42>
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d005      	beq.n	80079ca <Operator_processCommand+0x46>
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	d008      	beq.n	80079d6 <Operator_processCommand+0x52>
 80079c4:	e009      	b.n	80079da <Operator_processCommand+0x56>
		{
		case 1:
			return OPERATOR_START_COMMAND;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e00a      	b.n	80079e0 <Operator_processCommand+0x5c>
			break;
		case 2:
			uart_data->dataSize = Operator_rec.commandParameter1;
 80079ca:	4b08      	ldr	r3, [pc, #32]	; (80079ec <Operator_processCommand+0x68>)
 80079cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	645a      	str	r2, [r3, #68]	; 0x44
			return OPERATOR_DATASIZE_COMMAND;
 80079d2:	2302      	movs	r3, #2
 80079d4:	e004      	b.n	80079e0 <Operator_processCommand+0x5c>
			break;
		case -1:
			return OPERATOR_NO_COMMAND;
 80079d6:	2300      	movs	r3, #0
 80079d8:	e002      	b.n	80079e0 <Operator_processCommand+0x5c>
			break;
		default:
			return OPERATOR_NO_COMMAND;
 80079da:	2300      	movs	r3, #0
 80079dc:	e000      	b.n	80079e0 <Operator_processCommand+0x5c>
			break;
		}
	}

	return 0;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000299 	.word	0x20000299
 80079ec:	2000752c 	.word	0x2000752c

080079f0 <HAL_UART_RxCpltCallback>:
}

/* Callback Function Implementation -----------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	uartDataReceived = 1;
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <HAL_UART_RxCpltCallback+0x1c>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20000299 	.word	0x20000299

08007a10 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	uartDataSend = 1;
 8007a18:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <HAL_UART_TxCpltCallback+0x1c>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	701a      	strb	r2, [r3, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	2000029a 	.word	0x2000029a

08007a30 <Sensor_initRegList>:
  * @brief	Initialize all addresses and sizes of the sensor registers
  *	@param	sens pointer to the sensor handler
  * @retval NONE
  */
static void Sensor_initRegList(Sensor_HandleType *sens)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

	switch(sens->Init.identifier)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	889b      	ldrh	r3, [r3, #4]
 8007a3c:	3ba0      	subs	r3, #160	; 0xa0
 8007a3e:	2b30      	cmp	r3, #48	; 0x30
 8007a40:	f200 8133 	bhi.w	8007caa <Sensor_initRegList+0x27a>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <Sensor_initRegList+0x1c>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007b11 	.word	0x08007b11
 8007a50:	08007cab 	.word	0x08007cab
 8007a54:	08007cab 	.word	0x08007cab
 8007a58:	08007cab 	.word	0x08007cab
 8007a5c:	08007cab 	.word	0x08007cab
 8007a60:	08007cab 	.word	0x08007cab
 8007a64:	08007cab 	.word	0x08007cab
 8007a68:	08007cab 	.word	0x08007cab
 8007a6c:	08007cab 	.word	0x08007cab
 8007a70:	08007cab 	.word	0x08007cab
 8007a74:	08007cab 	.word	0x08007cab
 8007a78:	08007cab 	.word	0x08007cab
 8007a7c:	08007cab 	.word	0x08007cab
 8007a80:	08007cab 	.word	0x08007cab
 8007a84:	08007cab 	.word	0x08007cab
 8007a88:	08007cab 	.word	0x08007cab
 8007a8c:	08007bb7 	.word	0x08007bb7
 8007a90:	08007be9 	.word	0x08007be9
 8007a94:	08007cab 	.word	0x08007cab
 8007a98:	08007cab 	.word	0x08007cab
 8007a9c:	08007cab 	.word	0x08007cab
 8007aa0:	08007cab 	.word	0x08007cab
 8007aa4:	08007cab 	.word	0x08007cab
 8007aa8:	08007cab 	.word	0x08007cab
 8007aac:	08007cab 	.word	0x08007cab
 8007ab0:	08007cab 	.word	0x08007cab
 8007ab4:	08007cab 	.word	0x08007cab
 8007ab8:	08007cab 	.word	0x08007cab
 8007abc:	08007cab 	.word	0x08007cab
 8007ac0:	08007cab 	.word	0x08007cab
 8007ac4:	08007cab 	.word	0x08007cab
 8007ac8:	08007cab 	.word	0x08007cab
 8007acc:	08007c1b 	.word	0x08007c1b
 8007ad0:	08007c4b 	.word	0x08007c4b
 8007ad4:	08007cab 	.word	0x08007cab
 8007ad8:	08007cab 	.word	0x08007cab
 8007adc:	08007cab 	.word	0x08007cab
 8007ae0:	08007cab 	.word	0x08007cab
 8007ae4:	08007cab 	.word	0x08007cab
 8007ae8:	08007cab 	.word	0x08007cab
 8007aec:	08007cab 	.word	0x08007cab
 8007af0:	08007cab 	.word	0x08007cab
 8007af4:	08007cab 	.word	0x08007cab
 8007af8:	08007cab 	.word	0x08007cab
 8007afc:	08007cab 	.word	0x08007cab
 8007b00:	08007cab 	.word	0x08007cab
 8007b04:	08007cab 	.word	0x08007cab
 8007b08:	08007cab 	.word	0x08007cab
 8007b0c:	08007c7b 	.word	0x08007c7b
	{
	case MCP9600_ACTIVE:
		//TODO: Read register-mapping over file

		//Temperature T_H
		sens->regMap[0].regAddress = 0x00;
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	f241 2310 	movw	r3, #4624	; 0x1210
 8007b16:	4413      	add	r3, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	801a      	strh	r2, [r3, #0]
		sens->regMap[0].regSize = SENSOR_REG_SIZE_16;
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	f241 2312 	movw	r3, #4626	; 0x1212
 8007b22:	4413      	add	r3, r2
 8007b24:	2202      	movs	r2, #2
 8007b26:	801a      	strh	r2, [r3, #0]
		//Temperature T_Delta
		sens->regMap[1].regAddress = 0x01;
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	f241 2318 	movw	r3, #4632	; 0x1218
 8007b2e:	4413      	add	r3, r2
 8007b30:	2201      	movs	r2, #1
 8007b32:	801a      	strh	r2, [r3, #0]
		sens->regMap[1].regSize = SENSOR_REG_SIZE_16;
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	f241 231a 	movw	r3, #4634	; 0x121a
 8007b3a:	4413      	add	r3, r2
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	801a      	strh	r2, [r3, #0]
		//Temperature T_C
		sens->regMap[2].regAddress = 0x02;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8007b46:	2202      	movs	r2, #2
 8007b48:	801a      	strh	r2, [r3, #0]
		sens->regMap[2].regSize = SENSOR_REG_SIZE_16;
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	f241 2322 	movw	r3, #4642	; 0x1222
 8007b50:	4413      	add	r3, r2
 8007b52:	2202      	movs	r2, #2
 8007b54:	801a      	strh	r2, [r3, #0]
		//Status
		sens->regMap[3].regAddress = 0x04;
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	f241 2328 	movw	r3, #4648	; 0x1228
 8007b5c:	4413      	add	r3, r2
 8007b5e:	2204      	movs	r2, #4
 8007b60:	801a      	strh	r2, [r3, #0]
		sens->regMap[3].regSize = SENSOR_REG_SIZE_8;
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	f241 232a 	movw	r3, #4650	; 0x122a
 8007b68:	4413      	add	r3, r2
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	801a      	strh	r2, [r3, #0]
		//Config thermocouple
		sens->regMap[4].regAddress = 0x05;
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	f241 2330 	movw	r3, #4656	; 0x1230
 8007b74:	4413      	add	r3, r2
 8007b76:	2205      	movs	r2, #5
 8007b78:	801a      	strh	r2, [r3, #0]
		sens->regMap[4].regSize = SENSOR_REG_SIZE_8;
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	f241 2332 	movw	r3, #4658	; 0x1232
 8007b80:	4413      	add	r3, r2
 8007b82:	2201      	movs	r2, #1
 8007b84:	801a      	strh	r2, [r3, #0]
		//Config device
		sens->regMap[5].regAddress = 0x06;
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	f241 2338 	movw	r3, #4664	; 0x1238
 8007b8c:	4413      	add	r3, r2
 8007b8e:	2206      	movs	r2, #6
 8007b90:	801a      	strh	r2, [r3, #0]
		sens->regMap[5].regSize = SENSOR_REG_SIZE_8;
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	f241 233a 	movw	r3, #4666	; 0x123a
 8007b98:	4413      	add	r3, r2
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	801a      	strh	r2, [r3, #0]
		//Device Id
		sens->regMap[6].regAddress = 0x20;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	801a      	strh	r2, [r3, #0]
		sens->regMap[6].regSize = SENSOR_REG_SIZE_16;
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f241 2342 	movw	r3, #4674	; 0x1242
 8007bae:	4413      	add	r3, r2
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	801a      	strh	r2, [r3, #0]
		break;
 8007bb4:	e07a      	b.n	8007cac <Sensor_initRegList+0x27c>
	case GTPMO023_ACTIVE:

		//Sensor Temp
		sens->regMap[0].regAddress = 0xA0;
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	f241 2310 	movw	r3, #4624	; 0x1210
 8007bbc:	4413      	add	r3, r2
 8007bbe:	22a0      	movs	r2, #160	; 0xa0
 8007bc0:	801a      	strh	r2, [r3, #0]
		sens->regMap[0].regSize = SENSOR_REG_SIZE_16;
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	f241 2312 	movw	r3, #4626	; 0x1212
 8007bc8:	4413      	add	r3, r2
 8007bca:	2202      	movs	r2, #2
 8007bcc:	801a      	strh	r2, [r3, #0]
		//Objekt Temp
		sens->regMap[1].regAddress = 0xA1;
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	f241 2318 	movw	r3, #4632	; 0x1218
 8007bd4:	4413      	add	r3, r2
 8007bd6:	22a1      	movs	r2, #161	; 0xa1
 8007bd8:	801a      	strh	r2, [r3, #0]
		sens->regMap[1].regSize = SENSOR_REG_SIZE_16;
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	f241 231a 	movw	r3, #4634	; 0x121a
 8007be0:	4413      	add	r3, r2
 8007be2:	2202      	movs	r2, #2
 8007be4:	801a      	strh	r2, [r3, #0]
		break;
 8007be6:	e061      	b.n	8007cac <Sensor_initRegList+0x27c>

	case PSOC4_ACTIVE:
		//Status Register
		sens->regMap[0].regAddress = 0xA0;
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	f241 2310 	movw	r3, #4624	; 0x1210
 8007bee:	4413      	add	r3, r2
 8007bf0:	22a0      	movs	r2, #160	; 0xa0
 8007bf2:	801a      	strh	r2, [r3, #0]
		sens->regMap[0].regSize = SENSOR_REG_SIZE_8;
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	f241 2312 	movw	r3, #4626	; 0x1212
 8007bfa:	4413      	add	r3, r2
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	801a      	strh	r2, [r3, #0]
		//Temp Register
		sens->regMap[1].regAddress = 0xA1;
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	f241 2318 	movw	r3, #4632	; 0x1218
 8007c06:	4413      	add	r3, r2
 8007c08:	22a1      	movs	r2, #161	; 0xa1
 8007c0a:	801a      	strh	r2, [r3, #0]
		sens->regMap[1].regSize = SENSOR_REG_SIZE_32;
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f241 231a 	movw	r3, #4634	; 0x121a
 8007c12:	4413      	add	r3, r2
 8007c14:	2204      	movs	r2, #4
 8007c16:	801a      	strh	r2, [r3, #0]
		break;
 8007c18:	e048      	b.n	8007cac <Sensor_initRegList+0x27c>
	case VFADC_ACTIVE:
		//Status Register
		sens->regMap[0].regAddress = 0xA0;
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	f241 2310 	movw	r3, #4624	; 0x1210
 8007c20:	4413      	add	r3, r2
 8007c22:	22a0      	movs	r2, #160	; 0xa0
 8007c24:	801a      	strh	r2, [r3, #0]
		sens->regMap[0].regSize = SENSOR_REG_SIZE_8;
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	f241 2312 	movw	r3, #4626	; 0x1212
 8007c2c:	4413      	add	r3, r2
 8007c2e:	2201      	movs	r2, #1
 8007c30:	801a      	strh	r2, [r3, #0]
		//Voltage Register
		sens->regMap[1].regAddress = 0xA1;
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	f241 2318 	movw	r3, #4632	; 0x1218
 8007c38:	4413      	add	r3, r2
 8007c3a:	22a1      	movs	r2, #161	; 0xa1
 8007c3c:	801a      	strh	r2, [r3, #0]
		sens->regMap[1].regSize = SENSOR_REG_SIZE_32;
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	f241 231a 	movw	r3, #4634	; 0x121a
 8007c44:	4413      	add	r3, r2
 8007c46:	2204      	movs	r2, #4
 8007c48:	801a      	strh	r2, [r3, #0]
	case VTHADC_ACTIVE:
		//Status Register
		sens->regMap[0].regAddress = 0xA0;
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	f241 2310 	movw	r3, #4624	; 0x1210
 8007c50:	4413      	add	r3, r2
 8007c52:	22a0      	movs	r2, #160	; 0xa0
 8007c54:	801a      	strh	r2, [r3, #0]
		sens->regMap[0].regSize = SENSOR_REG_SIZE_8;
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	f241 2312 	movw	r3, #4626	; 0x1212
 8007c5c:	4413      	add	r3, r2
 8007c5e:	2201      	movs	r2, #1
 8007c60:	801a      	strh	r2, [r3, #0]
		//Voltage Register
		sens->regMap[1].regAddress = 0xA1;
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	f241 2318 	movw	r3, #4632	; 0x1218
 8007c68:	4413      	add	r3, r2
 8007c6a:	22a1      	movs	r2, #161	; 0xa1
 8007c6c:	801a      	strh	r2, [r3, #0]
		sens->regMap[1].regSize = SENSOR_REG_SIZE_32;
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	f241 231a 	movw	r3, #4634	; 0x121a
 8007c74:	4413      	add	r3, r2
 8007c76:	2204      	movs	r2, #4
 8007c78:	801a      	strh	r2, [r3, #0]
	case VARIOCAM_ACIVE:
		//Status Register
		sens->regMap[0].regAddress = 0xA0;
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	f241 2310 	movw	r3, #4624	; 0x1210
 8007c80:	4413      	add	r3, r2
 8007c82:	22a0      	movs	r2, #160	; 0xa0
 8007c84:	801a      	strh	r2, [r3, #0]
		sens->regMap[0].regSize = SENSOR_REG_SIZE_8;
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	f241 2312 	movw	r3, #4626	; 0x1212
 8007c8c:	4413      	add	r3, r2
 8007c8e:	2201      	movs	r2, #1
 8007c90:	801a      	strh	r2, [r3, #0]
		//VTrigger Register
		sens->regMap[1].regAddress = 0xA1;
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	f241 2318 	movw	r3, #4632	; 0x1218
 8007c98:	4413      	add	r3, r2
 8007c9a:	22a1      	movs	r2, #161	; 0xa1
 8007c9c:	801a      	strh	r2, [r3, #0]
		sens->regMap[1].regSize = SENSOR_REG_SIZE_8;
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	f241 231a 	movw	r3, #4634	; 0x121a
 8007ca4:	4413      	add	r3, r2
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	801a      	strh	r2, [r3, #0]

	default:
		//No Sensor chosen
		break;
 8007caa:	bf00      	nop
	}
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <Sensor_initSensor>:
  * @retval returns the state of the given sensor handler after processing the function
  * 		SENSOR_STATE_READY
  *			SENSOR_STATE_BUSY
  *			SENSOR_STATE_ERROR
  */
Sensor_StateTypeDef Sensor_initSensor(Sensor_HandleType *sens){
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]

	Sensor_StateTypeDef sensError = SENSOR_STATE_READY;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]

	if (sens == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <Sensor_initSensor+0x1a>
	{
		sensError = SENSOR_STATE_ERROR;
 8007cca:	2306      	movs	r3, #6
 8007ccc:	73fb      	strb	r3, [r7, #15]
		return sensError;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	e087      	b.n	8007de2 <Sensor_initSensor+0x12a>
	}

	switch(sens->Init.interfaceType)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	789b      	ldrb	r3, [r3, #2]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d87d      	bhi.n	8007dd8 <Sensor_initSensor+0x120>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <Sensor_initSensor+0x2c>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08007d41 	.word	0x08007d41
 8007cec:	08007d83 	.word	0x08007d83
 8007cf0:	08007dc5 	.word	0x08007dc5
	{
	case SENSOR_INTERFACE_TYPE_I2C:
		if(sens->hi2c_peripheral.Instance == 0x00)
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8007cfa:	4413      	add	r3, r2
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <Sensor_initSensor+0x52>
		{
			//No interface handler active
			sensError = SENSOR_STATE_ERROR;
 8007d02:	2306      	movs	r3, #6
 8007d04:	73fb      	strb	r3, [r7, #15]
			return sensError;
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	e06b      	b.n	8007de2 <Sensor_initSensor+0x12a>
		}
		I2C_initInterface(&sens->hi2c_peripheral,&sens->i2c_data);
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8007d10:	4413      	add	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe fd66 	bl	80067ec <I2C_initInterface>
		Sensor_initRegList(sens);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fe85 	bl	8007a30 <Sensor_initRegList>
		Sensor_readSensorID(sens);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc34 	bl	8008594 <Sensor_readSensorID>
		Sensor_readSensorState(sens);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fcad 	bl	800868c <Sensor_readSensorState>
		sens->cycleCnt = 0;
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	f241 2308 	movw	r3, #4616	; 0x1208
 8007d38:	4413      	add	r3, r2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
		break;
 8007d3e:	e04f      	b.n	8007de0 <Sensor_initSensor+0x128>
	case SENSOR_INTERFACE_TYPE_SPI:
		if(sens->spi_peripheral.Instance == 0x00)
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	f241 3344 	movw	r3, #4932	; 0x1344
 8007d46:	4413      	add	r3, r2
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d103      	bne.n	8007d56 <Sensor_initSensor+0x9e>
		{
			sensError = SENSOR_STATE_ERROR;
 8007d4e:	2306      	movs	r3, #6
 8007d50:	73fb      	strb	r3, [r7, #15]
			return sensError;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	e045      	b.n	8007de2 <Sensor_initSensor+0x12a>
		}
		SPI_initInterface(&sens->spi_peripheral,&sens->spi_data);
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	f241 3344 	movw	r3, #4932	; 0x1344
 8007d5c:	4413      	add	r3, r2
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8007d64:	440a      	add	r2, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe fe29 	bl	80069c0 <SPI_initInterface>
		Sensor_initRegList(sens);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff fe5e 	bl	8007a30 <Sensor_initRegList>
		sens->cycleCnt = 0;
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	f241 2308 	movw	r3, #4616	; 0x1208
 8007d7a:	4413      	add	r3, r2
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]
		break;
 8007d80:	e02e      	b.n	8007de0 <Sensor_initSensor+0x128>
	case SENSOR_INTERFACE_TYPE_ANALOG:
		if(sens->adc_peripheral.Instance == 0x00)
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	f241 33f4 	movw	r3, #5108	; 0x13f4
 8007d88:	4413      	add	r3, r2
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d103      	bne.n	8007d98 <Sensor_initSensor+0xe0>
		{
			sensError = SENSOR_STATE_ERROR;
 8007d90:	2306      	movs	r3, #6
 8007d92:	73fb      	strb	r3, [r7, #15]
			return sensError;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	e024      	b.n	8007de2 <Sensor_initSensor+0x12a>
		}
		ADC_initInterface(&sens->adc_peripheral,&sens->adc_data);
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	f241 33f4 	movw	r3, #5108	; 0x13f4
 8007d9e:	4413      	add	r3, r2
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	f241 423c 	movw	r2, #5180	; 0x143c
 8007da6:	440a      	add	r2, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fc3e 	bl	800662c <ADC_initInterface>
		Sensor_initRegList(sens);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff fe3d 	bl	8007a30 <Sensor_initRegList>
		sens->cycleCnt = 0;
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	f241 2308 	movw	r3, #4616	; 0x1208
 8007dbc:	4413      	add	r3, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
		break;
 8007dc2:	e00d      	b.n	8007de0 <Sensor_initSensor+0x128>
	case SENSOR_INTERFACE_TYPE_TRIGGER:
		//Only GPIO necessary
		Sensor_initRegList(sens);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff fe33 	bl	8007a30 <Sensor_initRegList>
		sens->cycleCnt = 0;
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	f241 2308 	movw	r3, #4616	; 0x1208
 8007dd0:	4413      	add	r3, r2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
		break;
 8007dd6:	e003      	b.n	8007de0 <Sensor_initSensor+0x128>
	default:
		//No interface was chosen
		sensError = SENSOR_STATE_ERROR;
 8007dd8:	2306      	movs	r3, #6
 8007dda:	73fb      	strb	r3, [r7, #15]
		return sensError;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	e000      	b.n	8007de2 <Sensor_initSensor+0x12a>
		break;
	}

	return sensError;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop

08007dec <Sensor_readTempData>:
  * 		SENSOR_STATE_READY
  *			SENSOR_STATE_BUSY
  *			SENSOR_STATE_ERROR
  */
Sensor_StateTypeDef Sensor_readTempData(Sensor_HandleType *sens)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	Sensor_StateTypeDef sensError = SENSOR_STATE_READY;
 8007df4:	2301      	movs	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
	//TODO: Asserts
	if (sens == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <Sensor_readTempData+0x1a>
	{
		sensError = SENSOR_STATE_ERROR;
 8007dfe:	2306      	movs	r3, #6
 8007e00:	73fb      	strb	r3, [r7, #15]
		return sensError;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	e1fc      	b.n	8008200 <Sensor_readTempData+0x414>
	}

	if(sens->Init.identifier == MCP9600_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_I2C)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	889b      	ldrh	r3, [r3, #4]
 8007e0a:	2ba0      	cmp	r3, #160	; 0xa0
 8007e0c:	f040 8084 	bne.w	8007f18 <Sensor_readTempData+0x12c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	789b      	ldrb	r3, [r3, #2]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d17f      	bne.n	8007f18 <Sensor_readTempData+0x12c>
	{
		sens->i2c_data.transmitBuf[Byte1] = sens->regMap[0].regAddress;
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	f241 2310 	movw	r3, #4624	; 0x1210
 8007e1e:	4413      	add	r3, r2
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	b2d9      	uxtb	r1, r3
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	f241 3302 	movw	r3, #4866	; 0x1302
 8007e2a:	4413      	add	r3, r2
 8007e2c:	460a      	mov	r2, r1
 8007e2e:	701a      	strb	r2, [r3, #0]
		sens->i2c_data.nBytes = 1;
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	f241 3301 	movw	r3, #4865	; 0x1301
 8007e36:	4413      	add	r3, r2
 8007e38:	2201      	movs	r2, #1
 8007e3a:	701a      	strb	r2, [r3, #0]
		I2C_sendData(&sens->hi2c_peripheral,&sens->i2c_data);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8007e42:	4413      	add	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fd19 	bl	8006884 <I2C_sendData>

		sens->i2c_data.nBytes = sens->regMap[0].regSize + sens->regMap[1].regSize + sens->regMap[2].regSize;
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	f241 2312 	movw	r3, #4626	; 0x1212
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	f241 231a 	movw	r3, #4634	; 0x121a
 8007e64:	440b      	add	r3, r1
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	f241 2322 	movw	r3, #4642	; 0x1222
 8007e74:	440b      	add	r3, r1
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	b2d9      	uxtb	r1, r3
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	f241 3301 	movw	r3, #4865	; 0x1301
 8007e84:	4413      	add	r3, r2
 8007e86:	460a      	mov	r2, r1
 8007e88:	701a      	strb	r2, [r3, #0]
		I2C_receiveData(&sens->hi2c_peripheral,&sens->i2c_data);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8007e90:	4413      	add	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fd11 	bl	80068c2 <I2C_receiveData>
		sens->regMap[0].regValue = (sens->i2c_data.receiveBuf[Byte1] << 8) | (sens->i2c_data.receiveBuf[Byte2] << 0);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	f241 3322 	movw	r3, #4898	; 0x1322
 8007ea6:	4413      	add	r3, r2
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	021a      	lsls	r2, r3, #8
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	f241 3323 	movw	r3, #4899	; 0x1323
 8007eb2:	440b      	add	r3, r1
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	f241 2314 	movw	r3, #4628	; 0x1214
 8007ec0:	4413      	add	r3, r2
 8007ec2:	6019      	str	r1, [r3, #0]
		sens->regMap[1].regValue = (sens->i2c_data.receiveBuf[Byte3] << 8) | (sens->i2c_data.receiveBuf[Byte4] << 0);
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f241 3324 	movw	r3, #4900	; 0x1324
 8007eca:	4413      	add	r3, r2
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	021a      	lsls	r2, r3, #8
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	f241 3325 	movw	r3, #4901	; 0x1325
 8007ed6:	440b      	add	r3, r1
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	f241 231c 	movw	r3, #4636	; 0x121c
 8007ee4:	4413      	add	r3, r2
 8007ee6:	6019      	str	r1, [r3, #0]
		sens->regMap[2].regValue = (sens->i2c_data.receiveBuf[Byte5] << 8) | (sens->i2c_data.receiveBuf[Byte6] << 0);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	f241 3326 	movw	r3, #4902	; 0x1326
 8007eee:	4413      	add	r3, r2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	021a      	lsls	r2, r3, #8
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	f241 3327 	movw	r3, #4903	; 0x1327
 8007efa:	440b      	add	r3, r1
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	4619      	mov	r1, r3
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f241 2324 	movw	r3, #4644	; 0x1224
 8007f08:	4413      	add	r3, r2
 8007f0a:	6019      	str	r1, [r3, #0]
		I2C_flushData(&sens->i2c_data);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe fcf5 	bl	8006902 <I2C_flushData>
	}

	if(sens->Init.identifier == GTPMO023_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_SPI)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	889b      	ldrh	r3, [r3, #4]
 8007f1c:	2bb0      	cmp	r3, #176	; 0xb0
 8007f1e:	f040 809d 	bne.w	800805c <Sensor_readTempData+0x270>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	789b      	ldrb	r3, [r3, #2]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	f040 8098 	bne.w	800805c <Sensor_readTempData+0x270>
	{
		//First Com A0
		sens->spi_data.transmitBuf[Byte1] = sens->regMap[0].regAddress;
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	f241 2310 	movw	r3, #4624	; 0x1210
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b2d9      	uxtb	r1, r3
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	f241 33b1 	movw	r3, #5041	; 0x13b1
 8007f3e:	4413      	add	r3, r2
 8007f40:	460a      	mov	r2, r1
 8007f42:	701a      	strb	r2, [r3, #0]
		//Dummy Data
		sens->spi_data.transmitBuf[Byte2] = 0x00;
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	f241 33b2 	movw	r3, #5042	; 0x13b2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	701a      	strb	r2, [r3, #0]
		sens->spi_data.transmitBuf[Byte3] = 0x00;
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	f241 33b3 	movw	r3, #5043	; 0x13b3
 8007f56:	4413      	add	r3, r2
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
		sens->spi_data.nBytes = 3;
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007f62:	4413      	add	r3, r2
 8007f64:	2203      	movs	r2, #3
 8007f66:	701a      	strb	r2, [r3, #0]
		SPI_receiveSendData(&sens->spi_peripheral, &sens->spi_data);
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	f241 3344 	movw	r3, #4932	; 0x1344
 8007f6e:	4413      	add	r3, r2
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8007f76:	440a      	add	r2, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fd66 	bl	8006a4c <SPI_receiveSendData>
		sens->regMap[0].regValue = (sens->spi_data.receiveBuf[Byte2] << 8) | (sens->spi_data.receiveBuf[2] << 0);
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	f241 33d2 	movw	r3, #5074	; 0x13d2
 8007f86:	4413      	add	r3, r2
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	021a      	lsls	r2, r3, #8
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	f241 33d3 	movw	r3, #5075	; 0x13d3
 8007f92:	440b      	add	r3, r1
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	f241 2314 	movw	r3, #4628	; 0x1214
 8007fa0:	4413      	add	r3, r2
 8007fa2:	6019      	str	r1, [r3, #0]

		sens->regMap[0].regValue = (sens->spi_data.receiveBuf[Byte2] << 8) | (sens->spi_data.receiveBuf[2] << 0);
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	f241 33d2 	movw	r3, #5074	; 0x13d2
 8007faa:	4413      	add	r3, r2
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	021a      	lsls	r2, r3, #8
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	f241 33d3 	movw	r3, #5075	; 0x13d3
 8007fb6:	440b      	add	r3, r1
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	f241 2314 	movw	r3, #4628	; 0x1214
 8007fc4:	4413      	add	r3, r2
 8007fc6:	6019      	str	r1, [r3, #0]
		SPI_flushData(&sens->spi_data);
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8007fce:	4413      	add	r3, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fd63 	bl	8006a9c <SPI_flushData>

		//First Com A1
		sens->spi_data.transmitBuf[Byte1] = sens->regMap[1].regAddress;
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	f241 2318 	movw	r3, #4632	; 0x1218
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b2d9      	uxtb	r1, r3
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	f241 33b1 	movw	r3, #5041	; 0x13b1
 8007fe8:	4413      	add	r3, r2
 8007fea:	460a      	mov	r2, r1
 8007fec:	701a      	strb	r2, [r3, #0]
		//Dummy Data
		sens->spi_data.transmitBuf[Byte2] = 0x00;
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	f241 33b2 	movw	r3, #5042	; 0x13b2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
		sens->spi_data.transmitBuf[Byte3] = 0x00;
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	f241 33b3 	movw	r3, #5043	; 0x13b3
 8008000:	4413      	add	r3, r2
 8008002:	2200      	movs	r2, #0
 8008004:	701a      	strb	r2, [r3, #0]
		sens->spi_data.nBytes = 3;
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800800c:	4413      	add	r3, r2
 800800e:	2203      	movs	r2, #3
 8008010:	701a      	strb	r2, [r3, #0]
		SPI_receiveSendData(&sens->spi_peripheral, &sens->spi_data);
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	f241 3344 	movw	r3, #4932	; 0x1344
 8008018:	4413      	add	r3, r2
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8008020:	440a      	add	r2, r1
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fd11 	bl	8006a4c <SPI_receiveSendData>
		sens->regMap[1].regValue = (sens->spi_data.receiveBuf[Byte2] << 8) | (sens->spi_data.receiveBuf[2] << 0);
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	f241 33d2 	movw	r3, #5074	; 0x13d2
 8008030:	4413      	add	r3, r2
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	021a      	lsls	r2, r3, #8
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	f241 33d3 	movw	r3, #5075	; 0x13d3
 800803c:	440b      	add	r3, r1
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	4313      	orrs	r3, r2
 8008042:	4619      	mov	r1, r3
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f241 231c 	movw	r3, #4636	; 0x121c
 800804a:	4413      	add	r3, r2
 800804c:	6019      	str	r1, [r3, #0]
		SPI_flushData(&sens->spi_data);
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8008054:	4413      	add	r3, r2
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fd20 	bl	8006a9c <SPI_flushData>
	}

	if(sens->Init.identifier == PSOC4_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_SPI)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	889b      	ldrh	r3, [r3, #4]
 8008060:	2bb1      	cmp	r3, #177	; 0xb1
 8008062:	d172      	bne.n	800814a <Sensor_readTempData+0x35e>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	789b      	ldrb	r3, [r3, #2]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d16e      	bne.n	800814a <Sensor_readTempData+0x35e>
	{
		sens->spi_data.transmitBuf[Byte1] = sens->regMap[1].regAddress;
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	f241 2318 	movw	r3, #4632	; 0x1218
 8008072:	4413      	add	r3, r2
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b2d9      	uxtb	r1, r3
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	f241 33b1 	movw	r3, #5041	; 0x13b1
 800807e:	4413      	add	r3, r2
 8008080:	460a      	mov	r2, r1
 8008082:	701a      	strb	r2, [r3, #0]
		sens->spi_data.nBytes = 1;
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800808a:	4413      	add	r3, r2
 800808c:	2201      	movs	r2, #1
 800808e:	701a      	strb	r2, [r3, #0]
		SPI_receiveSendData(&sens->spi_peripheral, &sens->spi_data);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	f241 3344 	movw	r3, #4932	; 0x1344
 8008096:	4413      	add	r3, r2
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	f241 32a8 	movw	r2, #5032	; 0x13a8
 800809e:	440a      	add	r2, r1
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fcd2 	bl	8006a4c <SPI_receiveSendData>

		//Dummy Data
		sens->spi_data.transmitBuf[Byte1] = 0x00;
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	f241 33b1 	movw	r3, #5041	; 0x13b1
 80080ae:	4413      	add	r3, r2
 80080b0:	2200      	movs	r2, #0
 80080b2:	701a      	strb	r2, [r3, #0]
		sens->spi_data.transmitBuf[Byte2] = 0x00;
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	f241 33b2 	movw	r3, #5042	; 0x13b2
 80080ba:	4413      	add	r3, r2
 80080bc:	2200      	movs	r2, #0
 80080be:	701a      	strb	r2, [r3, #0]
		sens->spi_data.transmitBuf[Byte3] = 0x00;
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	f241 33b3 	movw	r3, #5043	; 0x13b3
 80080c6:	4413      	add	r3, r2
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
		sens->spi_data.transmitBuf[Byte4] = 0x00;
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	f241 33b4 	movw	r3, #5044	; 0x13b4
 80080d2:	4413      	add	r3, r2
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]

		sens->spi_data.nBytes = 4;
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80080de:	4413      	add	r3, r2
 80080e0:	2204      	movs	r2, #4
 80080e2:	701a      	strb	r2, [r3, #0]
		SPI_receiveSendData(&sens->spi_peripheral, &sens->spi_data);
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	f241 3344 	movw	r3, #4932	; 0x1344
 80080ea:	4413      	add	r3, r2
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	f241 32a8 	movw	r2, #5032	; 0x13a8
 80080f2:	440a      	add	r2, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fca8 	bl	8006a4c <SPI_receiveSendData>
		sens->regMap[1].regValue =  (sens->spi_data.receiveBuf[Byte1] << 24 | sens->spi_data.receiveBuf[1] << 16 | sens->spi_data.receiveBuf[2] << 8 | sens->spi_data.receiveBuf[0] << 0);
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	f241 33d1 	movw	r3, #5073	; 0x13d1
 8008102:	4413      	add	r3, r2
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	061a      	lsls	r2, r3, #24
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	f241 33d2 	movw	r3, #5074	; 0x13d2
 800810e:	440b      	add	r3, r1
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	431a      	orrs	r2, r3
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	f241 33d3 	movw	r3, #5075	; 0x13d3
 800811c:	440b      	add	r3, r1
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	431a      	orrs	r2, r3
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	f241 33d1 	movw	r3, #5073	; 0x13d1
 800812a:	440b      	add	r3, r1
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	4313      	orrs	r3, r2
 8008130:	4619      	mov	r1, r3
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	f241 231c 	movw	r3, #4636	; 0x121c
 8008138:	4413      	add	r3, r2
 800813a:	6019      	str	r1, [r3, #0]
		SPI_flushData(&sens->spi_data);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8008142:	4413      	add	r3, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fca9 	bl	8006a9c <SPI_flushData>
	}

	if(sens->Init.identifier == VTHADC_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_ANALOG)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	889b      	ldrh	r3, [r3, #4]
 800814e:	2bc1      	cmp	r3, #193	; 0xc1
 8008150:	d119      	bne.n	8008186 <Sensor_readTempData+0x39a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	789b      	ldrb	r3, [r3, #2]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d115      	bne.n	8008186 <Sensor_readTempData+0x39a>
	{
		ADC_singleConversion(&sens->adc_peripheral, &sens->adc_data);
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	f241 33f4 	movw	r3, #5108	; 0x13f4
 8008160:	4413      	add	r3, r2
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	f241 423c 	movw	r2, #5180	; 0x143c
 8008168:	440a      	add	r2, r1
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fac5 	bl	80066fc <ADC_singleConversion>
		sens->regMap[1].regValue = sens->adc_data.adcBuf[Byte1];
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	f241 433c 	movw	r3, #5180	; 0x143c
 8008178:	4413      	add	r3, r2
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	f241 231c 	movw	r3, #4636	; 0x121c
 8008182:	440b      	add	r3, r1
 8008184:	601a      	str	r2, [r3, #0]
	}

	if(sens->Init.identifier == VFADC_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_ANALOG)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	889b      	ldrh	r3, [r3, #4]
 800818a:	2bc0      	cmp	r3, #192	; 0xc0
 800818c:	d119      	bne.n	80081c2 <Sensor_readTempData+0x3d6>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	789b      	ldrb	r3, [r3, #2]
 8008192:	2b03      	cmp	r3, #3
 8008194:	d115      	bne.n	80081c2 <Sensor_readTempData+0x3d6>
	{
		ADC_singleConversion(&sens->adc_peripheral, &sens->adc_data);
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	f241 33f4 	movw	r3, #5108	; 0x13f4
 800819c:	4413      	add	r3, r2
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	f241 423c 	movw	r2, #5180	; 0x143c
 80081a4:	440a      	add	r2, r1
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe faa7 	bl	80066fc <ADC_singleConversion>
		sens->regMap[1].regValue = sens->adc_data.adcBuf[Byte1];
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	f241 433c 	movw	r3, #5180	; 0x143c
 80081b4:	4413      	add	r3, r2
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	f241 231c 	movw	r3, #4636	; 0x121c
 80081be:	440b      	add	r3, r1
 80081c0:	601a      	str	r2, [r3, #0]
	}

	if(sens->Init.identifier == VARIOCAM_ACIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_TRIGGER)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	889b      	ldrh	r3, [r3, #4]
 80081c6:	2bd0      	cmp	r3, #208	; 0xd0
 80081c8:	d119      	bne.n	80081fe <Sensor_readTempData+0x412>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	789b      	ldrb	r3, [r3, #2]
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d115      	bne.n	80081fe <Sensor_readTempData+0x412>
	{
		/*Send a 120 us Trigger puls for the ir-camera*/
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80081d2:	2201      	movs	r2, #1
 80081d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081d8:	480b      	ldr	r0, [pc, #44]	; (8008208 <Sensor_readTempData+0x41c>)
 80081da:	f7f9 fe19 	bl	8001e10 <HAL_GPIO_WritePin>
		sens->regMap[1].regValue = 0xFF; //Ir camera was triggered
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	f241 231c 	movw	r3, #4636	; 0x121c
 80081e4:	4413      	add	r3, r2
 80081e6:	22ff      	movs	r2, #255	; 0xff
 80081e8:	601a      	str	r2, [r3, #0]
		delayUSDWT(500);
 80081ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081ee:	f001 fad7 	bl	80097a0 <delayUSDWT>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80081f2:	2200      	movs	r2, #0
 80081f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081f8:	4803      	ldr	r0, [pc, #12]	; (8008208 <Sensor_readTempData+0x41c>)
 80081fa:	f7f9 fe09 	bl	8001e10 <HAL_GPIO_WritePin>
	}

	return sensError;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	40021400 	.word	0x40021400
 800820c:	00000000 	.word	0x00000000

08008210 <Sensor_tempConversion>:
  * 		SENSOR_STATE_READY
  *			SENSOR_STATE_BUSY
  *			SENSOR_STATE_ERROR
  */
Sensor_StateTypeDef Sensor_tempConversion(Sensor_HandleType *sens)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	Sensor_StateTypeDef sensError = SENSOR_STATE_READY;
 8008218:	2301      	movs	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]
	double temp = 0;
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	f04f 0400 	mov.w	r4, #0
 8008224:	e9c7 3402 	strd	r3, r4, [r7, #8]

	//TODO: Asserts
	if (sens == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d103      	bne.n	8008236 <Sensor_tempConversion+0x26>
	{
		sensError = SENSOR_STATE_ERROR;
 800822e:	2306      	movs	r3, #6
 8008230:	75fb      	strb	r3, [r7, #23]
		return sensError;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	e17e      	b.n	8008534 <Sensor_tempConversion+0x324>
	}

	switch (sens->Init.identifier)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	889b      	ldrh	r3, [r3, #4]
 800823a:	3ba0      	subs	r3, #160	; 0xa0
 800823c:	2b21      	cmp	r3, #33	; 0x21
 800823e:	f200 8177 	bhi.w	8008530 <Sensor_tempConversion+0x320>
 8008242:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <Sensor_tempConversion+0x38>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	080082d1 	.word	0x080082d1
 800824c:	08008531 	.word	0x08008531
 8008250:	08008531 	.word	0x08008531
 8008254:	08008531 	.word	0x08008531
 8008258:	08008531 	.word	0x08008531
 800825c:	08008531 	.word	0x08008531
 8008260:	08008531 	.word	0x08008531
 8008264:	08008531 	.word	0x08008531
 8008268:	08008531 	.word	0x08008531
 800826c:	08008531 	.word	0x08008531
 8008270:	08008531 	.word	0x08008531
 8008274:	08008531 	.word	0x08008531
 8008278:	08008531 	.word	0x08008531
 800827c:	08008531 	.word	0x08008531
 8008280:	08008531 	.word	0x08008531
 8008284:	08008531 	.word	0x08008531
 8008288:	0800839f 	.word	0x0800839f
 800828c:	080083f5 	.word	0x080083f5
 8008290:	08008531 	.word	0x08008531
 8008294:	08008531 	.word	0x08008531
 8008298:	08008531 	.word	0x08008531
 800829c:	08008531 	.word	0x08008531
 80082a0:	08008531 	.word	0x08008531
 80082a4:	08008531 	.word	0x08008531
 80082a8:	08008531 	.word	0x08008531
 80082ac:	08008531 	.word	0x08008531
 80082b0:	08008531 	.word	0x08008531
 80082b4:	08008531 	.word	0x08008531
 80082b8:	08008531 	.word	0x08008531
 80082bc:	08008531 	.word	0x08008531
 80082c0:	08008531 	.word	0x08008531
 80082c4:	08008531 	.word	0x08008531
 80082c8:	080084f7 	.word	0x080084f7
 80082cc:	0800845f 	.word	0x0800845f
	{
	case MCP9600_ACTIVE:
		/*Check for sign bit of temperture register */
		switch(sens->regMap[0].regValue & (1 << 16))
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	f241 2314 	movw	r3, #4628	; 0x1214
 80082d6:	4413      	add	r3, r2
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <Sensor_tempConversion+0xd8>
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d02b      	beq.n	800833e <Sensor_tempConversion+0x12e>

		case 1 : /*Negative temperature MCP9600*/
			sens->tempDataBuf[sens->cycleCnt] = (((sens->regMap[0].regValue & 0xFF00) >> 8) * 16.0) + (((sens->regMap[0].regValue & 0x00FF) >> 0) / 16.0)-4048.0;
			break;
		}
		break;
 80082e6:	e124      	b.n	8008532 <Sensor_tempConversion+0x322>
			sens->tempDataBuf[sens->cycleCnt] = (((sens->regMap[0].regValue & 0xFF00) >> 8) * 16.0) + (((sens->regMap[0].regValue & 0x00FF) >> 0) / 16.0);
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	f241 2314 	movw	r3, #4628	; 0x1214
 80082ee:	4413      	add	r3, r2
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80082fe:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8008302:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	f241 2314 	movw	r3, #4628	; 0x1214
 800830c:	4413      	add	r3, r2
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	b2db      	uxtb	r3, r3
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800831a:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
 800831e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	f241 2308 	movw	r3, #4616	; 0x1208
 8008328:	4413      	add	r3, r2
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	3301      	adds	r3, #1
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	ed83 7b00 	vstr	d7, [r3]
			break;
 800833c:	e02e      	b.n	800839c <Sensor_tempConversion+0x18c>
			sens->tempDataBuf[sens->cycleCnt] = (((sens->regMap[0].regValue & 0xFF00) >> 8) * 16.0) + (((sens->regMap[0].regValue & 0x00FF) >> 0) / 16.0)-4048.0;
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	f241 2314 	movw	r3, #4628	; 0x1214
 8008344:	4413      	add	r3, r2
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	0a1b      	lsrs	r3, r3, #8
 800834a:	b2db      	uxtb	r3, r3
 800834c:	ee07 3a90 	vmov	s15, r3
 8008350:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008354:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8008358:	ee27 6b06 	vmul.f64	d6, d7, d6
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	f241 2314 	movw	r3, #4628	; 0x1214
 8008362:	4413      	add	r3, r2
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8008370:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
 8008374:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8008378:	ee36 7b07 	vadd.f64	d7, d6, d7
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	f241 2308 	movw	r3, #4616	; 0x1208
 8008382:	4413      	add	r3, r2
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8008540 <Sensor_tempConversion+0x330>
 800838a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	3301      	adds	r3, #1
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	4413      	add	r3, r2
 8008396:	ed83 7b00 	vstr	d7, [r3]
			break;
 800839a:	bf00      	nop
		break;
 800839c:	e0c9      	b.n	8008532 <Sensor_tempConversion+0x322>

	case GTPMO023_ACTIVE:
		sens->tempDataBuf[sens->cycleCnt] = ( (((sens->regMap[1].regValue & 0xFF00) >> 8) * 256.0) + ((sens->regMap[1].regValue & 0x00FF) >> 0) )/100.0;
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	f241 231c 	movw	r3, #4636	; 0x121c
 80083a4:	4413      	add	r3, r2
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	0a1b      	lsrs	r3, r3, #8
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	ee07 3a90 	vmov	s15, r3
 80083b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80083b4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8008548 <Sensor_tempConversion+0x338>
 80083b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	f241 231c 	movw	r3, #4636	; 0x121c
 80083c2:	4413      	add	r3, r2
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80083d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f241 2308 	movw	r3, #4616	; 0x1208
 80083da:	4413      	add	r3, r2
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8008550 <Sensor_tempConversion+0x340>
 80083e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	3301      	adds	r3, #1
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	4413      	add	r3, r2
 80083ee:	ed83 7b00 	vstr	d7, [r3]
		break;
 80083f2:	e09e      	b.n	8008532 <Sensor_tempConversion+0x322>

	case PSOC4_ACTIVE:
		sens->tempDataBuf[sens->cycleCnt] = ( ((sens->regMap[1].regValue & 0xFF << 24) >> 24) + ((sens->regMap[1].regValue & 0xFF << 16) >> 16) + ((sens->regMap[1].regValue & 0xFF << 8) >> 8)/1000 + ((sens->regMap[1].regValue & 0xFF << 0) >> 0)/1000 );
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	f241 231c 	movw	r3, #4636	; 0x121c
 80083fa:	4413      	add	r3, r2
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	0e1a      	lsrs	r2, r3, #24
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	f241 231c 	movw	r3, #4636	; 0x121c
 8008406:	440b      	add	r3, r1
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	0c1b      	lsrs	r3, r3, #16
 800840c:	b2db      	uxtb	r3, r3
 800840e:	441a      	add	r2, r3
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	f241 231c 	movw	r3, #4636	; 0x121c
 8008416:	440b      	add	r3, r1
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	0a1b      	lsrs	r3, r3, #8
 800841c:	b2db      	uxtb	r3, r3
 800841e:	495c      	ldr	r1, [pc, #368]	; (8008590 <Sensor_tempConversion+0x380>)
 8008420:	fba1 1303 	umull	r1, r3, r1, r3
 8008424:	099b      	lsrs	r3, r3, #6
 8008426:	441a      	add	r2, r3
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	f241 231c 	movw	r3, #4636	; 0x121c
 800842e:	440b      	add	r3, r1
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	4956      	ldr	r1, [pc, #344]	; (8008590 <Sensor_tempConversion+0x380>)
 8008436:	fba1 1303 	umull	r1, r3, r1, r3
 800843a:	099b      	lsrs	r3, r3, #6
 800843c:	18d1      	adds	r1, r2, r3
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	f241 2308 	movw	r3, #4616	; 0x1208
 8008444:	4413      	add	r3, r2
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	ee07 1a90 	vmov	s15, r1
 800844c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	3301      	adds	r3, #1
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	4413      	add	r3, r2
 8008458:	ed83 7b00 	vstr	d7, [r3]

		break;
 800845c:	e069      	b.n	8008532 <Sensor_tempConversion+0x322>
	case VTHADC_ACTIVE:
		temp = 10000.0 * ( ( 1 - (sens->regMap[1].regValue / 4096.0) ) / (sens->regMap[1].regValue / 4096.0) );
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	f241 231c 	movw	r3, #4636	; 0x121c
 8008464:	4413      	add	r3, r2
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8008470:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8008558 <Sensor_tempConversion+0x348>
 8008474:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008478:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800847c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	f241 231c 	movw	r3, #4636	; 0x121c
 8008486:	4413      	add	r3, r2
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008492:	ed9f 4b31 	vldr	d4, [pc, #196]	; 8008558 <Sensor_tempConversion+0x348>
 8008496:	ee87 6b04 	vdiv.f64	d6, d7, d4
 800849a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800849e:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8008560 <Sensor_tempConversion+0x350>
 80084a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084a6:	ed87 7b02 	vstr	d7, [r7, #8]
		sens->tempDataBuf[sens->cycleCnt] =  ( 1 / ( (1/298.15) - (log(10000) - log(temp)) / 3450 ) ) - 273.15;
 80084aa:	ed97 0b02 	vldr	d0, [r7, #8]
 80084ae:	f003 fd43 	bl	800bf38 <log>
 80084b2:	eeb0 6b40 	vmov.f64	d6, d0
 80084b6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8008568 <Sensor_tempConversion+0x358>
 80084ba:	ee37 6b46 	vsub.f64	d6, d7, d6
 80084be:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008570 <Sensor_tempConversion+0x360>
 80084c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80084c6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8008578 <Sensor_tempConversion+0x368>
 80084ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80084ce:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80084d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	f241 2308 	movw	r3, #4616	; 0x1208
 80084dc:	4413      	add	r3, r2
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8008580 <Sensor_tempConversion+0x370>
 80084e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	3301      	adds	r3, #1
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	4413      	add	r3, r2
 80084f0:	ed83 7b00 	vstr	d7, [r3]
		break;
 80084f4:	e01d      	b.n	8008532 <Sensor_tempConversion+0x322>
	case VFADC_ACTIVE:
		//TODO: Calibration of forward voltage to temperature
		sens->tempDataBuf[sens->cycleCnt] = ( sens->regMap[1].regValue /4096.0) * 3.31;
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	f241 231c 	movw	r3, #4636	; 0x121c
 80084fc:	4413      	add	r3, r2
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	ee07 3a90 	vmov	s15, r3
 8008504:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8008508:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8008558 <Sensor_tempConversion+0x348>
 800850c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	f241 2308 	movw	r3, #4616	; 0x1208
 8008516:	4413      	add	r3, r2
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8008588 <Sensor_tempConversion+0x378>
 800851e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	3301      	adds	r3, #1
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	4413      	add	r3, r2
 800852a:	ed83 7b00 	vstr	d7, [r3]
		break;
 800852e:	e000      	b.n	8008532 <Sensor_tempConversion+0x322>
	default:
		//TODO: Default Error
		break;
 8008530:	bf00      	nop

	}
	return sensError;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
}
 8008534:	4618      	mov	r0, r3
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	bd90      	pop	{r4, r7, pc}
 800853c:	f3af 8000 	nop.w
 8008540:	00000000 	.word	0x00000000
 8008544:	40afa000 	.word	0x40afa000
 8008548:	00000000 	.word	0x00000000
 800854c:	40700000 	.word	0x40700000
 8008550:	00000000 	.word	0x00000000
 8008554:	40590000 	.word	0x40590000
 8008558:	00000000 	.word	0x00000000
 800855c:	40b00000 	.word	0x40b00000
 8008560:	00000000 	.word	0x00000000
 8008564:	40c38800 	.word	0x40c38800
 8008568:	bbb55516 	.word	0xbbb55516
 800856c:	40226bb1 	.word	0x40226bb1
 8008570:	00000000 	.word	0x00000000
 8008574:	40aaf400 	.word	0x40aaf400
 8008578:	dcb5db83 	.word	0xdcb5db83
 800857c:	3f6b79e1 	.word	0x3f6b79e1
 8008580:	66666666 	.word	0x66666666
 8008584:	40711266 	.word	0x40711266
 8008588:	47ae147b 	.word	0x47ae147b
 800858c:	400a7ae1 	.word	0x400a7ae1
 8008590:	10624dd3 	.word	0x10624dd3

08008594 <Sensor_readSensorID>:
  * 		SENSOR_STATE_READY
  *			SENSOR_STATE_BUSY
  *			SENSOR_STATE_ERROR
  */
Sensor_StateTypeDef Sensor_readSensorID(Sensor_HandleType *sens)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	Sensor_StateTypeDef sensError = SENSOR_STATE_READY;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]

	if (sens == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <Sensor_readSensorID+0x1a>
	{
		sensError = SENSOR_STATE_ERROR;
 80085a6:	2306      	movs	r3, #6
 80085a8:	73fb      	strb	r3, [r7, #15]
		return sensError;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	e069      	b.n	8008682 <Sensor_readSensorID+0xee>
	}
	if(sens->Init.identifier == MCP9600_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_I2C)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	889b      	ldrh	r3, [r3, #4]
 80085b2:	2ba0      	cmp	r3, #160	; 0xa0
 80085b4:	d164      	bne.n	8008680 <Sensor_readSensorID+0xec>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	789b      	ldrb	r3, [r3, #2]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d160      	bne.n	8008680 <Sensor_readSensorID+0xec>
	{
		sens->i2c_data.transmitBuf[Byte1] = sens->regMap[6].regAddress;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b2d9      	uxtb	r1, r3
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	f241 3302 	movw	r3, #4866	; 0x1302
 80085ce:	4413      	add	r3, r2
 80085d0:	460a      	mov	r2, r1
 80085d2:	701a      	strb	r2, [r3, #0]
		sens->i2c_data.nBytes = 1;
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	f241 3301 	movw	r3, #4865	; 0x1301
 80085da:	4413      	add	r3, r2
 80085dc:	2201      	movs	r2, #1
 80085de:	701a      	strb	r2, [r3, #0]

		I2C_sendData(&sens->hi2c_peripheral,&sens->i2c_data);
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	f241 23b4 	movw	r3, #4788	; 0x12b4
 80085e6:	4413      	add	r3, r2
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe f947 	bl	8006884 <I2C_sendData>

		sens->i2c_data.nBytes = sens->regMap[6].regSize;
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	f241 2342 	movw	r3, #4674	; 0x1242
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b2d9      	uxtb	r1, r3
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	f241 3301 	movw	r3, #4865	; 0x1301
 8008608:	4413      	add	r3, r2
 800860a:	460a      	mov	r2, r1
 800860c:	701a      	strb	r2, [r3, #0]
		I2C_receiveData(&sens->hi2c_peripheral,&sens->i2c_data);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8008614:	4413      	add	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe f94f 	bl	80068c2 <I2C_receiveData>

		sens->regMap[6].regValue = (sens->i2c_data.receiveBuf[Byte1] << 8) | (sens->i2c_data.receiveBuf[Byte2] << 0);
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	f241 3322 	movw	r3, #4898	; 0x1322
 800862a:	4413      	add	r3, r2
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	021a      	lsls	r2, r3, #8
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	f241 3323 	movw	r3, #4899	; 0x1323
 8008636:	440b      	add	r3, r1
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	4313      	orrs	r3, r2
 800863c:	4619      	mov	r1, r3
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	f241 2344 	movw	r3, #4676	; 0x1244
 8008644:	4413      	add	r3, r2
 8008646:	6019      	str	r1, [r3, #0]
		sens->hardwareID = (sens->i2c_data.receiveBuf[Byte1] << 8) | (sens->i2c_data.receiveBuf[Byte2] << 0);
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	f241 3322 	movw	r3, #4898	; 0x1322
 800864e:	4413      	add	r3, r2
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	b21a      	sxth	r2, r3
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	f241 3323 	movw	r3, #4899	; 0x1323
 800865c:	440b      	add	r3, r1
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b21b      	sxth	r3, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	b21b      	sxth	r3, r3
 8008666:	b299      	uxth	r1, r3
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800866e:	4413      	add	r3, r2
 8008670:	460a      	mov	r2, r1
 8008672:	801a      	strh	r2, [r3, #0]

		I2C_flushData(&sens->i2c_data);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe f941 	bl	8006902 <I2C_flushData>
	}

	return sensError;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <Sensor_readSensorState>:
  * 		SENSOR_STATE_READY
  *			SENSOR_STATE_BUSY
  *			SENSOR_STATE_ERROR
  */
Sensor_StateTypeDef Sensor_readSensorState(Sensor_HandleType *sens)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	if (sens == NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <Sensor_readSensorState+0x12>
	{
		return SENSOR_STATE_ERROR; /* sensor is not initialized */
 800869a:	2306      	movs	r3, #6
 800869c:	e0fa      	b.n	8008894 <Sensor_readSensorState+0x208>
	}

	if(sens->Init.identifier == MCP9600_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_I2C)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	889b      	ldrh	r3, [r3, #4]
 80086a2:	2ba0      	cmp	r3, #160	; 0xa0
 80086a4:	d160      	bne.n	8008768 <Sensor_readSensorState+0xdc>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	789b      	ldrb	r3, [r3, #2]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d15c      	bne.n	8008768 <Sensor_readSensorState+0xdc>
	{
		sens->i2c_data.transmitBuf[Byte1] = sens->regMap[3].regAddress;
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	f241 2328 	movw	r3, #4648	; 0x1228
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b2d9      	uxtb	r1, r3
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	f241 3302 	movw	r3, #4866	; 0x1302
 80086c0:	4413      	add	r3, r2
 80086c2:	460a      	mov	r2, r1
 80086c4:	701a      	strb	r2, [r3, #0]

		sens->i2c_data.nBytes = 1;
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	f241 3301 	movw	r3, #4865	; 0x1301
 80086cc:	4413      	add	r3, r2
 80086ce:	2201      	movs	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
		I2C_sendData(&sens->hi2c_peripheral,&sens->i2c_data);
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	f241 23b4 	movw	r3, #4788	; 0x12b4
 80086d8:	4413      	add	r3, r2
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe f8ce 	bl	8006884 <I2C_sendData>

		sens->i2c_data.nBytes = sens->regMap[3].regSize;
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	f241 232a 	movw	r3, #4650	; 0x122a
 80086ee:	4413      	add	r3, r2
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b2d9      	uxtb	r1, r3
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	f241 3301 	movw	r3, #4865	; 0x1301
 80086fa:	4413      	add	r3, r2
 80086fc:	460a      	mov	r2, r1
 80086fe:	701a      	strb	r2, [r3, #0]
		I2C_receiveData(&sens->hi2c_peripheral,&sens->i2c_data);
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8008706:	4413      	add	r3, r2
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 800870e:	4611      	mov	r1, r2
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe f8d6 	bl	80068c2 <I2C_receiveData>

		sens->regMap[3].regValue = sens->i2c_data.receiveBuf[Byte1];
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	f241 3322 	movw	r3, #4898	; 0x1322
 800871c:	4413      	add	r3, r2
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	4619      	mov	r1, r3
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	f241 232c 	movw	r3, #4652	; 0x122c
 8008728:	4413      	add	r3, r2
 800872a:	6019      	str	r1, [r3, #0]
		sens->status = sens->i2c_data.receiveBuf[Byte1];
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	f241 3322 	movw	r3, #4898	; 0x1322
 8008732:	4413      	add	r3, r2
 8008734:	7819      	ldrb	r1, [r3, #0]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	f241 230c 	movw	r3, #4620	; 0x120c
 800873c:	4413      	add	r3, r2
 800873e:	460a      	mov	r2, r1
 8008740:	701a      	strb	r2, [r3, #0]

		I2C_flushData(&sens->i2c_data);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe f8da 	bl	8006902 <I2C_flushData>

		if(sens->regMap[3].regValue & STATUS_TH_UPDATE_FLAG)
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	f241 232c 	movw	r3, #4652	; 0x122c
 8008754:	4413      	add	r3, r2
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <Sensor_readSensorState+0xd8>
		{
			return SENSOR_STATE_READY;
 8008760:	2301      	movs	r3, #1
 8008762:	e097      	b.n	8008894 <Sensor_readSensorState+0x208>
		}

		return SENSOR_STATE_BUSY;
 8008764:	2302      	movs	r3, #2
 8008766:	e095      	b.n	8008894 <Sensor_readSensorState+0x208>
	}

	if(sens->Init.identifier == PSOC4_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_SPI)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	889b      	ldrh	r3, [r3, #4]
 800876c:	2bb1      	cmp	r3, #177	; 0xb1
 800876e:	d151      	bne.n	8008814 <Sensor_readSensorState+0x188>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	789b      	ldrb	r3, [r3, #2]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d14d      	bne.n	8008814 <Sensor_readSensorState+0x188>
	{
		sens->spi_data.transmitBuf[0] = sens->regMap[0].regAddress;
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	f241 2310 	movw	r3, #4624	; 0x1210
 800877e:	4413      	add	r3, r2
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b2d9      	uxtb	r1, r3
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	f241 33b1 	movw	r3, #5041	; 0x13b1
 800878a:	4413      	add	r3, r2
 800878c:	460a      	mov	r2, r1
 800878e:	701a      	strb	r2, [r3, #0]
		sens->spi_data.nBytes = 1;
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008796:	4413      	add	r3, r2
 8008798:	2201      	movs	r2, #1
 800879a:	701a      	strb	r2, [r3, #0]
		SPI_receiveSendData(&sens->spi_peripheral, &sens->spi_data);
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	f241 3344 	movw	r3, #4932	; 0x1344
 80087a2:	4413      	add	r3, r2
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	f241 32a8 	movw	r2, #5032	; 0x13a8
 80087aa:	440a      	add	r2, r1
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe f94c 	bl	8006a4c <SPI_receiveSendData>

		//Dummy Data
		sens->spi_data.transmitBuf[0] = 0x00;
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	f241 33b1 	movw	r3, #5041	; 0x13b1
 80087ba:	4413      	add	r3, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
		sens->spi_data.nBytes = 1;
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80087c6:	4413      	add	r3, r2
 80087c8:	2201      	movs	r2, #1
 80087ca:	701a      	strb	r2, [r3, #0]
		SPI_receiveSendData(&sens->spi_peripheral, &sens->spi_data);
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	f241 3344 	movw	r3, #4932	; 0x1344
 80087d2:	4413      	add	r3, r2
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	f241 32a8 	movw	r2, #5032	; 0x13a8
 80087da:	440a      	add	r2, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe f934 	bl	8006a4c <SPI_receiveSendData>
		sens->regMap[0].regValue = sens->spi_data.receiveBuf[Byte1];
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	f241 33d1 	movw	r3, #5073	; 0x13d1
 80087ea:	4413      	add	r3, r2
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	4619      	mov	r1, r3
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	f241 2314 	movw	r3, #4628	; 0x1214
 80087f6:	4413      	add	r3, r2
 80087f8:	6019      	str	r1, [r3, #0]

		if(sens->regMap[0].regValue & STATUS_TVF_UPDATE_FLAG)
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	f241 2314 	movw	r3, #4628	; 0x1214
 8008800:	4413      	add	r3, r2
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <Sensor_readSensorState+0x184>
		{
			return SENSOR_STATE_READY;
 800880c:	2301      	movs	r3, #1
 800880e:	e041      	b.n	8008894 <Sensor_readSensorState+0x208>
		}

		return SENSOR_STATE_BUSY;
 8008810:	2302      	movs	r3, #2
 8008812:	e03f      	b.n	8008894 <Sensor_readSensorState+0x208>
	}

	if(sens->Init.identifier == VFADC_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_ANALOG)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	889b      	ldrh	r3, [r3, #4]
 8008818:	2bc0      	cmp	r3, #192	; 0xc0
 800881a:	d111      	bne.n	8008840 <Sensor_readSensorState+0x1b4>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	789b      	ldrb	r3, [r3, #2]
 8008820:	2b03      	cmp	r3, #3
 8008822:	d10d      	bne.n	8008840 <Sensor_readSensorState+0x1b4>
	{

		if(ADC_getState(&sens->adc_data) == ADC_STATE_READY)
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	f241 433c 	movw	r3, #5180	; 0x143c
 800882a:	4413      	add	r3, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f7fd ffa5 	bl	800677c <ADC_getState>
 8008832:	4603      	mov	r3, r0
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <Sensor_readSensorState+0x1b0>
		{
			return SENSOR_STATE_READY;
 8008838:	2301      	movs	r3, #1
 800883a:	e02b      	b.n	8008894 <Sensor_readSensorState+0x208>
		}

		return SENSOR_STATE_BUSY;
 800883c:	2302      	movs	r3, #2
 800883e:	e029      	b.n	8008894 <Sensor_readSensorState+0x208>
	}


	if(sens->Init.identifier == VTHADC_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_ANALOG)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	889b      	ldrh	r3, [r3, #4]
 8008844:	2bc1      	cmp	r3, #193	; 0xc1
 8008846:	d111      	bne.n	800886c <Sensor_readSensorState+0x1e0>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	789b      	ldrb	r3, [r3, #2]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d10d      	bne.n	800886c <Sensor_readSensorState+0x1e0>
	{

		if(ADC_getState(&sens->adc_data) == ADC_STATE_READY)
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	f241 433c 	movw	r3, #5180	; 0x143c
 8008856:	4413      	add	r3, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f7fd ff8f 	bl	800677c <ADC_getState>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <Sensor_readSensorState+0x1dc>
		{
			return SENSOR_STATE_READY;
 8008864:	2301      	movs	r3, #1
 8008866:	e015      	b.n	8008894 <Sensor_readSensorState+0x208>
		}

		return SENSOR_STATE_BUSY;
 8008868:	2302      	movs	r3, #2
 800886a:	e013      	b.n	8008894 <Sensor_readSensorState+0x208>
	}

	if(sens->Init.identifier == VARIOCAM_ACIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_TRIGGER)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	889b      	ldrh	r3, [r3, #4]
 8008870:	2bd0      	cmp	r3, #208	; 0xd0
 8008872:	d10e      	bne.n	8008892 <Sensor_readSensorState+0x206>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	789b      	ldrb	r3, [r3, #2]
 8008878:	2b04      	cmp	r3, #4
 800887a:	d10a      	bne.n	8008892 <Sensor_readSensorState+0x206>
	{
		if(cameraFrameReady == 1)
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <Sensor_readSensorState+0x210>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d104      	bne.n	800888e <Sensor_readSensorState+0x202>
		{
			cameraFrameReady = 0;
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <Sensor_readSensorState+0x210>)
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
			return SENSOR_STATE_READY;
 800888a:	2301      	movs	r3, #1
 800888c:	e002      	b.n	8008894 <Sensor_readSensorState+0x208>
		}

		return SENSOR_STATE_BUSY;
 800888e:	2302      	movs	r3, #2
 8008890:	e000      	b.n	8008894 <Sensor_readSensorState+0x208>

	}

	return SENSOR_STATE_ERROR; /* sensor is not existing*/
 8008892:	2306      	movs	r3, #6
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	2000029b 	.word	0x2000029b

080088a0 <Sensor_setSensorCalibration>:
  * 		SENSOR_STATE_READY
  *			SENSOR_STATE_BUSY
  *			SENSOR_STATE_ERROR
  */
Sensor_StateTypeDef Sensor_setSensorCalibration(Sensor_HandleType *sens)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
	Sensor_StateTypeDef sensError = SENSOR_STATE_READY;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]

	if (sens == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <Sensor_setSensorCalibration+0x1a>
	{
		sensError = SENSOR_STATE_ERROR;
 80088b2:	2306      	movs	r3, #6
 80088b4:	73fb      	strb	r3, [r7, #15]
		return sensError;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	e0b6      	b.n	8008a28 <Sensor_setSensorCalibration+0x188>
	}
	if(sens->Init.identifier == MCP9600_ACTIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_I2C )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	889b      	ldrh	r3, [r3, #4]
 80088be:	2ba0      	cmp	r3, #160	; 0xa0
 80088c0:	f040 80b1 	bne.w	8008a26 <Sensor_setSensorCalibration+0x186>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	789b      	ldrb	r3, [r3, #2]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	f040 80ac 	bne.w	8008a26 <Sensor_setSensorCalibration+0x186>
	{

		sens->i2c_data.transmitBuf[Byte1] = sens->regMap[4].regAddress;
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	f241 2330 	movw	r3, #4656	; 0x1230
 80088d4:	4413      	add	r3, r2
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	b2d9      	uxtb	r1, r3
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	f241 3302 	movw	r3, #4866	; 0x1302
 80088e0:	4413      	add	r3, r2
 80088e2:	460a      	mov	r2, r1
 80088e4:	701a      	strb	r2, [r3, #0]
		sens->i2c_data.transmitBuf[Byte2] = MCP9600_OPTIONS_BYTE1;
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	f241 3303 	movw	r3, #4867	; 0x1303
 80088ec:	4413      	add	r3, r2
 80088ee:	2204      	movs	r2, #4
 80088f0:	701a      	strb	r2, [r3, #0]
		sens->i2c_data.nBytes = 1 + sens->regMap[4].regSize;
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	f241 2332 	movw	r3, #4658	; 0x1232
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	3301      	adds	r3, #1
 8008900:	b2d9      	uxtb	r1, r3
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f241 3301 	movw	r3, #4865	; 0x1301
 8008908:	4413      	add	r3, r2
 800890a:	460a      	mov	r2, r1
 800890c:	701a      	strb	r2, [r3, #0]
		I2C_sendData(&sens->hi2c_peripheral,&sens->i2c_data);
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8008914:	4413      	add	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd ffb0 	bl	8006884 <I2C_sendData>

		sens->i2c_data.nBytes = sens->regMap[4].regSize;
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	f241 2332 	movw	r3, #4658	; 0x1232
 800892a:	4413      	add	r3, r2
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b2d9      	uxtb	r1, r3
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	f241 3301 	movw	r3, #4865	; 0x1301
 8008936:	4413      	add	r3, r2
 8008938:	460a      	mov	r2, r1
 800893a:	701a      	strb	r2, [r3, #0]
		I2C_receiveData(&sens->hi2c_peripheral,&sens->i2c_data);
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	f241 23b4 	movw	r3, #4788	; 0x12b4
 8008942:	4413      	add	r3, r2
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f7fd ffb8 	bl	80068c2 <I2C_receiveData>

		if(sens->i2c_data.receiveBuf[Byte1] != sens->regMap[4].regValue)
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	f241 3322 	movw	r3, #4898	; 0x1322
 8008958:	4413      	add	r3, r2
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	4619      	mov	r1, r3
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	f241 2334 	movw	r3, #4660	; 0x1234
 8008964:	4413      	add	r3, r2
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4299      	cmp	r1, r3
 800896a:	d003      	beq.n	8008974 <Sensor_setSensorCalibration+0xd4>
		{
			sensError = SENSOR_STATE_ERROR;
 800896c:	2306      	movs	r3, #6
 800896e:	73fb      	strb	r3, [r7, #15]
			return sensError;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	e059      	b.n	8008a28 <Sensor_setSensorCalibration+0x188>
		}

		sens->i2c_data.transmitBuf[Byte1] = sens->regMap[5].regAddress;
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	f241 2338 	movw	r3, #4664	; 0x1238
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b2d9      	uxtb	r1, r3
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	f241 3302 	movw	r3, #4866	; 0x1302
 8008986:	4413      	add	r3, r2
 8008988:	460a      	mov	r2, r1
 800898a:	701a      	strb	r2, [r3, #0]
		sens->i2c_data.transmitBuf[Byte2] = MCP9600_OPTIONS_BYTE2;
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	f241 3303 	movw	r3, #4867	; 0x1303
 8008992:	4413      	add	r3, r2
 8008994:	22c0      	movs	r2, #192	; 0xc0
 8008996:	701a      	strb	r2, [r3, #0]
		sens->i2c_data.nBytes = 1 + sens->regMap[5].regSize;
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	f241 233a 	movw	r3, #4666	; 0x123a
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	3301      	adds	r3, #1
 80089a6:	b2d9      	uxtb	r1, r3
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	f241 3301 	movw	r3, #4865	; 0x1301
 80089ae:	4413      	add	r3, r2
 80089b0:	460a      	mov	r2, r1
 80089b2:	701a      	strb	r2, [r3, #0]
		I2C_sendData(&sens->hi2c_peripheral,&sens->i2c_data);
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	f241 23b4 	movw	r3, #4788	; 0x12b4
 80089ba:	4413      	add	r3, r2
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 80089c2:	4611      	mov	r1, r2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fd ff5d 	bl	8006884 <I2C_sendData>

		sens->i2c_data.nBytes = sens->regMap[5].regSize;
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	f241 233a 	movw	r3, #4666	; 0x123a
 80089d0:	4413      	add	r3, r2
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b2d9      	uxtb	r1, r3
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	f241 3301 	movw	r3, #4865	; 0x1301
 80089dc:	4413      	add	r3, r2
 80089de:	460a      	mov	r2, r1
 80089e0:	701a      	strb	r2, [r3, #0]
		I2C_receiveData(&sens->hi2c_peripheral,&sens->i2c_data);
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	f241 23b4 	movw	r3, #4788	; 0x12b4
 80089e8:	4413      	add	r3, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd ff65 	bl	80068c2 <I2C_receiveData>

		if(sens->i2c_data.receiveBuf[Byte1] != sens->regMap[5].regValue)
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	f241 3322 	movw	r3, #4898	; 0x1322
 80089fe:	4413      	add	r3, r2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	4619      	mov	r1, r3
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f241 233c 	movw	r3, #4668	; 0x123c
 8008a0a:	4413      	add	r3, r2
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	d003      	beq.n	8008a1a <Sensor_setSensorCalibration+0x17a>
		{
			sensError = SENSOR_STATE_ERROR;
 8008a12:	2306      	movs	r3, #6
 8008a14:	73fb      	strb	r3, [r7, #15]
			return sensError;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	e006      	b.n	8008a28 <Sensor_setSensorCalibration+0x188>
		}
		I2C_flushData(&sens->i2c_data);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fd ff6e 	bl	8006902 <I2C_flushData>
	}

	return sensError;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <Sensor_setTimeStamp>:
  * 		SENSOR_STATE_READY
  *			SENSOR_STATE_BUSY
  *			SENSOR_STATE_ERROR
  */
Sensor_StateTypeDef Sensor_setTimeStamp(Sensor_HandleType *sens)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_state;

	hal_state = HAL_RTC_GetTime(&hrtc, &sens->timeStampBuf[sens->cycleCnt], RTC_FORMAT_BIN);
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	f241 2308 	movw	r3, #4616	; 0x1208
 8008a3e:	4413      	add	r3, r2
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4613      	mov	r3, r2
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	4413      	add	r3, r2
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	4619      	mov	r1, r3
 8008a56:	4812      	ldr	r0, [pc, #72]	; (8008aa0 <Sensor_setTimeStamp+0x70>)
 8008a58:	f7fb fe14 	bl	8004684 <HAL_RTC_GetTime>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
	if (hal_state != HAL_OK)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <Sensor_setTimeStamp+0x3a>
	{
		return SENSOR_STATE_BUSY;
 8008a66:	2302      	movs	r3, #2
 8008a68:	e016      	b.n	8008a98 <Sensor_setTimeStamp+0x68>
	}
	hal_state = HAL_RTC_GetDate(&hrtc, &sens->dateStampBuf[sens->cycleCnt], RTC_FORMAT_BIN);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	f241 2308 	movw	r3, #4616	; 0x1208
 8008a70:	4413      	add	r3, r2
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4619      	mov	r1, r3
 8008a82:	4807      	ldr	r0, [pc, #28]	; (8008aa0 <Sensor_setTimeStamp+0x70>)
 8008a84:	f7fb ff04 	bl	8004890 <HAL_RTC_GetDate>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
	if (hal_state != HAL_OK)
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <Sensor_setTimeStamp+0x66>
	{
		return SENSOR_STATE_BUSY;
 8008a92:	2302      	movs	r3, #2
 8008a94:	e000      	b.n	8008a98 <Sensor_setTimeStamp+0x68>
	}
	return SENSOR_STATE_READY;
 8008a96:	2301      	movs	r3, #1
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	200048e0 	.word	0x200048e0

08008aa4 <Sensor_getTimeData>:
  * @brief	Returns the time for the latest cycle
  *	@param	sens pointer to the sensor handler
  * @retval time value of the in the RTC format
  */
RTC_TimeTypeDef Sensor_getTimeData(Sensor_HandleType *sens)
{
 8008aa4:	b4b0      	push	{r4, r5, r7}
 8008aa6:	b089      	sub	sp, #36	; 0x24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef temp  = sens->timeStampBuf[sens->cycleCnt-1];
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	f241 2308 	movw	r3, #4616	; 0x1208
 8008ab4:	4413      	add	r3, r2
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	4413      	add	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	440b      	add	r3, r1
 8008ac6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008aca:	f107 0408 	add.w	r4, r7, #8
 8008ace:	461d      	mov	r5, r3
 8008ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ad8:	e884 0003 	stmia.w	r4, {r0, r1}
	return temp;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	461d      	mov	r5, r3
 8008ae0:	f107 0408 	add.w	r4, r7, #8
 8008ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ae8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008aec:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	3724      	adds	r7, #36	; 0x24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bcb0      	pop	{r4, r5, r7}
 8008af8:	4770      	bx	lr

08008afa <Sensor_getRegData>:
  *	@param	sens pointer to the sensor handler
  *	@param regAddress address to the desired register value
  * @retval register value that is stored
  */
uint32_t Sensor_getRegData(Sensor_HandleType *sens, uint16_t regAddress)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	807b      	strh	r3, [r7, #2]
	uint32_t regMapSize;
	int i;

	regMapSize = sizeof(sens->regMap);
 8008b06:	23a0      	movs	r3, #160	; 0xa0
 8008b08:	60bb      	str	r3, [r7, #8]
	for(i=0; i<regMapSize; i++)
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e013      	b.n	8008b38 <Sensor_getRegData+0x3e>
	{
		if(sens->regMap[i].regAddress == regAddress)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	f202 2242 	addw	r2, r2, #578	; 0x242
 8008b18:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8008b1c:	887a      	ldrh	r2, [r7, #2]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d107      	bne.n	8008b32 <Sensor_getRegData+0x38>
			return sens->regMap[i].regValue;
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f203 2342 	addw	r3, r3, #578	; 0x242
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	e007      	b.n	8008b42 <Sensor_getRegData+0x48>
	for(i=0; i<regMapSize; i++)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3301      	adds	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d8e7      	bhi.n	8008b10 <Sensor_getRegData+0x16>
	}

	return 0;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <Sensor_incrementCycleCnt>:
  * @brief	Increments the cycle counter for given the sensor handler
  *	@param	sens pointer to the sensor handler
  * @retval register value that is stored
  */
void Sensor_incrementCycleCnt(Sensor_HandleType *sens)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
	if(sens->cycleCnt >= 127)
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	f241 2308 	movw	r3, #4616	; 0x1208
 8008b5c:	4413      	add	r3, r2
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b7e      	cmp	r3, #126	; 0x7e
 8008b62:	d906      	bls.n	8008b72 <Sensor_incrementCycleCnt+0x24>
	{
		sens->cycleCnt = 0;
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	f241 2308 	movw	r3, #4616	; 0x1208
 8008b6a:	4413      	add	r3, r2
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		sens->cycleCnt++;
	}
}
 8008b70:	e00a      	b.n	8008b88 <Sensor_incrementCycleCnt+0x3a>
		sens->cycleCnt++;
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	f241 2308 	movw	r3, #4616	; 0x1208
 8008b78:	4413      	add	r3, r2
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	f241 2308 	movw	r3, #4616	; 0x1208
 8008b84:	440b      	add	r3, r1
 8008b86:	601a      	str	r2, [r3, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <Sensor_putDummyData>:
  * @brief	Sets dummy data to the sensor registers when the temperature data is not yet updated or the peripheral is busy in a cycle
  *	@param	sens pointer to the sensor handler
  * @retval register value that is stored
  */
Sensor_StateTypeDef Sensor_putDummyData(Sensor_HandleType *sens)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]

	if(sens->Init.identifier == VARIOCAM_ACIVE && sens->Init.interfaceType == SENSOR_INTERFACE_TYPE_TRIGGER)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	889b      	ldrh	r3, [r3, #4]
 8008ba0:	2bd0      	cmp	r3, #208	; 0xd0
	{

	}
	Sensor_StateTypeDef sensError = SENSOR_STATE_READY;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]

	if (sens == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d103      	bne.n	8008bb4 <Sensor_putDummyData+0x20>
	{
		sensError = SENSOR_STATE_ERROR;
 8008bac:	2306      	movs	r3, #6
 8008bae:	73fb      	strb	r3, [r7, #15]
		return sensError;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	e096      	b.n	8008ce2 <Sensor_putDummyData+0x14e>
	}
	switch(sens->Init.identifier)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	889b      	ldrh	r3, [r3, #4]
 8008bb8:	3ba0      	subs	r3, #160	; 0xa0
 8008bba:	2b30      	cmp	r3, #48	; 0x30
 8008bbc:	f200 808f 	bhi.w	8008cde <Sensor_putDummyData+0x14a>
 8008bc0:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <Sensor_putDummyData+0x34>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008c8d 	.word	0x08008c8d
 8008bcc:	08008cdf 	.word	0x08008cdf
 8008bd0:	08008cdf 	.word	0x08008cdf
 8008bd4:	08008cdf 	.word	0x08008cdf
 8008bd8:	08008cdf 	.word	0x08008cdf
 8008bdc:	08008cdf 	.word	0x08008cdf
 8008be0:	08008cdf 	.word	0x08008cdf
 8008be4:	08008cdf 	.word	0x08008cdf
 8008be8:	08008cdf 	.word	0x08008cdf
 8008bec:	08008cdf 	.word	0x08008cdf
 8008bf0:	08008cdf 	.word	0x08008cdf
 8008bf4:	08008cdf 	.word	0x08008cdf
 8008bf8:	08008cdf 	.word	0x08008cdf
 8008bfc:	08008cdf 	.word	0x08008cdf
 8008c00:	08008cdf 	.word	0x08008cdf
 8008c04:	08008cdf 	.word	0x08008cdf
 8008c08:	08008c9b 	.word	0x08008c9b
 8008c0c:	08008ca9 	.word	0x08008ca9
 8008c10:	08008cdf 	.word	0x08008cdf
 8008c14:	08008cdf 	.word	0x08008cdf
 8008c18:	08008cdf 	.word	0x08008cdf
 8008c1c:	08008cdf 	.word	0x08008cdf
 8008c20:	08008cdf 	.word	0x08008cdf
 8008c24:	08008cdf 	.word	0x08008cdf
 8008c28:	08008cdf 	.word	0x08008cdf
 8008c2c:	08008cdf 	.word	0x08008cdf
 8008c30:	08008cdf 	.word	0x08008cdf
 8008c34:	08008cdf 	.word	0x08008cdf
 8008c38:	08008cdf 	.word	0x08008cdf
 8008c3c:	08008cdf 	.word	0x08008cdf
 8008c40:	08008cdf 	.word	0x08008cdf
 8008c44:	08008cdf 	.word	0x08008cdf
 8008c48:	08008cb7 	.word	0x08008cb7
 8008c4c:	08008cc5 	.word	0x08008cc5
 8008c50:	08008cdf 	.word	0x08008cdf
 8008c54:	08008cdf 	.word	0x08008cdf
 8008c58:	08008cdf 	.word	0x08008cdf
 8008c5c:	08008cdf 	.word	0x08008cdf
 8008c60:	08008cdf 	.word	0x08008cdf
 8008c64:	08008cdf 	.word	0x08008cdf
 8008c68:	08008cdf 	.word	0x08008cdf
 8008c6c:	08008cdf 	.word	0x08008cdf
 8008c70:	08008cdf 	.word	0x08008cdf
 8008c74:	08008cdf 	.word	0x08008cdf
 8008c78:	08008cdf 	.word	0x08008cdf
 8008c7c:	08008cdf 	.word	0x08008cdf
 8008c80:	08008cdf 	.word	0x08008cdf
 8008c84:	08008cdf 	.word	0x08008cdf
 8008c88:	08008cd3 	.word	0x08008cd3
	{
	case MCP9600_ACTIVE:
		sens->regMap[0].regValue = 0x00; //MCP9600 Data not updatet
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	f241 2314 	movw	r3, #4628	; 0x1214
 8008c92:	4413      	add	r3, r2
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
		break;
 8008c98:	e022      	b.n	8008ce0 <Sensor_putDummyData+0x14c>
	case GTPMO023_ACTIVE:
		sens->regMap[1].regValue = 0x00; //GTPM023 Data not updatet
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	f241 231c 	movw	r3, #4636	; 0x121c
 8008ca0:	4413      	add	r3, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
		break;
 8008ca6:	e01b      	b.n	8008ce0 <Sensor_putDummyData+0x14c>
	case PSOC4_ACTIVE:
		sens->regMap[1].regValue = 0x00; //PSOC Data not updatet
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	f241 231c 	movw	r3, #4636	; 0x121c
 8008cae:	4413      	add	r3, r2
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
		break;
 8008cb4:	e014      	b.n	8008ce0 <Sensor_putDummyData+0x14c>
	case VFADC_ACTIVE:
		sens->regMap[1].regValue = 0x00; //ADC conversion not complete
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	f241 231c 	movw	r3, #4636	; 0x121c
 8008cbc:	4413      	add	r3, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
		break;
 8008cc2:	e00d      	b.n	8008ce0 <Sensor_putDummyData+0x14c>
	case VTHADC_ACTIVE:
		sens->regMap[1].regValue = 0x00; //ADC conversion not complete
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	f241 231c 	movw	r3, #4636	; 0x121c
 8008cca:	4413      	add	r3, r2
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
		break;
 8008cd0:	e006      	b.n	8008ce0 <Sensor_putDummyData+0x14c>
	case VARIOCAM_ACIVE:
		sens->regMap[1].regValue = 0x00; //Ir-Camera was not triggered
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	f241 231c 	movw	r3, #4636	; 0x121c
 8008cd8:	4413      	add	r3, r2
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]
	default: //TODO: ERROR
		break;
 8008cde:	bf00      	nop
	}
	return sensError;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop

08008cf0 <HAL_TIM_PeriodElapsedCallback>:

/* Callback functions -----------------------------------------------------------*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a05      	ldr	r2, [pc, #20]	; (8008d14 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d102      	bne.n	8008d08 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		cameraFrameReady = 1;
 8008d02:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	701a      	strb	r2, [r3, #0]
	}
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	40001000 	.word	0x40001000
 8008d18:	2000029b 	.word	0x2000029b

08008d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <HAL_MspInit+0x44>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	4a0e      	ldr	r2, [pc, #56]	; (8008d60 <HAL_MspInit+0x44>)
 8008d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <HAL_MspInit+0x44>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d36:	607b      	str	r3, [r7, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <HAL_MspInit+0x44>)
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <HAL_MspInit+0x44>)
 8008d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d44:	6453      	str	r3, [r2, #68]	; 0x44
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <HAL_MspInit+0x44>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	40023800 	.word	0x40023800

08008d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08c      	sub	sp, #48	; 0x30
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d6c:	f107 031c 	add.w	r3, r7, #28
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	605a      	str	r2, [r3, #4]
 8008d76:	609a      	str	r2, [r3, #8]
 8008d78:	60da      	str	r2, [r3, #12]
 8008d7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a41      	ldr	r2, [pc, #260]	; (8008e88 <HAL_ADC_MspInit+0x124>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d153      	bne.n	8008e2e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008d86:	4b41      	ldr	r3, [pc, #260]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d8a:	4a40      	ldr	r2, [pc, #256]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d90:	6453      	str	r3, [r2, #68]	; 0x44
 8008d92:	4b3e      	ldr	r3, [pc, #248]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d9e:	4b3b      	ldr	r3, [pc, #236]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	4a3a      	ldr	r2, [pc, #232]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	6313      	str	r3, [r2, #48]	; 0x30
 8008daa:	4b38      	ldr	r3, [pc, #224]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008db6:	2308      	movs	r3, #8
 8008db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dc2:	f107 031c 	add.w	r3, r7, #28
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4831      	ldr	r0, [pc, #196]	; (8008e90 <HAL_ADC_MspInit+0x12c>)
 8008dca:	f7f8 fe77 	bl	8001abc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8008dce:	4b31      	ldr	r3, [pc, #196]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008dd0:	4a31      	ldr	r2, [pc, #196]	; (8008e98 <HAL_ADC_MspInit+0x134>)
 8008dd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008dd4:	4b2f      	ldr	r3, [pc, #188]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008dda:	4b2e      	ldr	r3, [pc, #184]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008de0:	4b2c      	ldr	r3, [pc, #176]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008de6:	4b2b      	ldr	r3, [pc, #172]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008dec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008dee:	4b29      	ldr	r3, [pc, #164]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008df4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008df6:	4b27      	ldr	r3, [pc, #156]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008dfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8008dfe:	4b25      	ldr	r3, [pc, #148]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008e04:	4b23      	ldr	r3, [pc, #140]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e0a:	4b22      	ldr	r3, [pc, #136]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008e10:	4820      	ldr	r0, [pc, #128]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008e12:	f7f8 fabb 	bl	800138c <HAL_DMA_Init>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8008e1c:	f7fe fbb0 	bl	8007580 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a1c      	ldr	r2, [pc, #112]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38
 8008e26:	4a1b      	ldr	r2, [pc, #108]	; (8008e94 <HAL_ADC_MspInit+0x130>)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8008e2c:	e028      	b.n	8008e80 <HAL_ADC_MspInit+0x11c>
  else if(hadc->Instance==ADC2)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a1a      	ldr	r2, [pc, #104]	; (8008e9c <HAL_ADC_MspInit+0x138>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d123      	bne.n	8008e80 <HAL_ADC_MspInit+0x11c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8008e38:	4b14      	ldr	r3, [pc, #80]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3c:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e42:	6453      	str	r3, [r2, #68]	; 0x44
 8008e44:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e50:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	4a0d      	ldr	r2, [pc, #52]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <HAL_ADC_MspInit+0x128>)
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e74:	f107 031c 	add.w	r3, r7, #28
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4805      	ldr	r0, [pc, #20]	; (8008e90 <HAL_ADC_MspInit+0x12c>)
 8008e7c:	f7f8 fe1e 	bl	8001abc <HAL_GPIO_Init>
}
 8008e80:	bf00      	nop
 8008e82:	3730      	adds	r7, #48	; 0x30
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	40012000 	.word	0x40012000
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	40020000 	.word	0x40020000
 8008e94:	20004838 	.word	0x20004838
 8008e98:	40026470 	.word	0x40026470
 8008e9c:	40012100 	.word	0x40012100

08008ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	; 0x28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ea8:	f107 0314 	add.w	r3, r7, #20
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	605a      	str	r2, [r3, #4]
 8008eb2:	609a      	str	r2, [r3, #8]
 8008eb4:	60da      	str	r2, [r3, #12]
 8008eb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a46      	ldr	r2, [pc, #280]	; (8008fd8 <HAL_I2C_MspInit+0x138>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	f040 8085 	bne.w	8008fce <HAL_I2C_MspInit+0x12e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ec4:	4b45      	ldr	r3, [pc, #276]	; (8008fdc <HAL_I2C_MspInit+0x13c>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	4a44      	ldr	r2, [pc, #272]	; (8008fdc <HAL_I2C_MspInit+0x13c>)
 8008eca:	f043 0302 	orr.w	r3, r3, #2
 8008ece:	6313      	str	r3, [r2, #48]	; 0x30
 8008ed0:	4b42      	ldr	r3, [pc, #264]	; (8008fdc <HAL_I2C_MspInit+0x13c>)
 8008ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8008edc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ee2:	2312      	movs	r3, #18
 8008ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eea:	2303      	movs	r3, #3
 8008eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008eee:	2304      	movs	r3, #4
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ef2:	f107 0314 	add.w	r3, r7, #20
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4839      	ldr	r0, [pc, #228]	; (8008fe0 <HAL_I2C_MspInit+0x140>)
 8008efa:	f7f8 fddf 	bl	8001abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008efe:	4b37      	ldr	r3, [pc, #220]	; (8008fdc <HAL_I2C_MspInit+0x13c>)
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	4a36      	ldr	r2, [pc, #216]	; (8008fdc <HAL_I2C_MspInit+0x13c>)
 8008f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f08:	6413      	str	r3, [r2, #64]	; 0x40
 8008f0a:	4b34      	ldr	r3, [pc, #208]	; (8008fdc <HAL_I2C_MspInit+0x13c>)
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8008f16:	4b33      	ldr	r3, [pc, #204]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f18:	4a33      	ldr	r2, [pc, #204]	; (8008fe8 <HAL_I2C_MspInit+0x148>)
 8008f1a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8008f1c:	4b31      	ldr	r3, [pc, #196]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008f22:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f24:	4b2f      	ldr	r3, [pc, #188]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f2a:	4b2e      	ldr	r3, [pc, #184]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f30:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f36:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f38:	4b2a      	ldr	r3, [pc, #168]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f3e:	4b29      	ldr	r3, [pc, #164]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008f44:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008f4a:	4b26      	ldr	r3, [pc, #152]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008f50:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8008f56:	4823      	ldr	r0, [pc, #140]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f58:	f7f8 fa18 	bl	800138c <HAL_DMA_Init>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8008f62:	f7fe fb0d 	bl	8007580 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a1e      	ldr	r2, [pc, #120]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <HAL_I2C_MspInit+0x144>)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8008f72:	4b1e      	ldr	r3, [pc, #120]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008f74:	4a1e      	ldr	r2, [pc, #120]	; (8008ff0 <HAL_I2C_MspInit+0x150>)
 8008f76:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8008f78:	4b1c      	ldr	r3, [pc, #112]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008f7e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f80:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008f82:	2240      	movs	r2, #64	; 0x40
 8008f84:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f86:	4b19      	ldr	r3, [pc, #100]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008f8c:	4b17      	ldr	r3, [pc, #92]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f92:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f94:	4b15      	ldr	r3, [pc, #84]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f9a:	4b14      	ldr	r3, [pc, #80]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008fa0:	4b12      	ldr	r3, [pc, #72]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008fa6:	4b11      	ldr	r3, [pc, #68]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008fac:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008fb2:	480e      	ldr	r0, [pc, #56]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008fb4:	f7f8 f9ea 	bl	800138c <HAL_DMA_Init>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <HAL_I2C_MspInit+0x122>
    {
      Error_Handler();
 8008fbe:	f7fe fadf 	bl	8007580 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a09      	ldr	r2, [pc, #36]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8008fc8:	4a08      	ldr	r2, [pc, #32]	; (8008fec <HAL_I2C_MspInit+0x14c>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008fce:	bf00      	nop
 8008fd0:	3728      	adds	r7, #40	; 0x28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40005400 	.word	0x40005400
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	40020400 	.word	0x40020400
 8008fe4:	20005ed0 	.word	0x20005ed0
 8008fe8:	40026010 	.word	0x40026010
 8008fec:	200006f0 	.word	0x200006f0
 8008ff0:	400260a0 	.word	0x400260a0

08008ff4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a07      	ldr	r2, [pc, #28]	; (8009020 <HAL_RTC_MspInit+0x2c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d105      	bne.n	8009012 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009006:	4b07      	ldr	r3, [pc, #28]	; (8009024 <HAL_RTC_MspInit+0x30>)
 8009008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800900a:	4a06      	ldr	r2, [pc, #24]	; (8009024 <HAL_RTC_MspInit+0x30>)
 800900c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009010:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40002800 	.word	0x40002800
 8009024:	40023800 	.word	0x40023800

08009028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08a      	sub	sp, #40	; 0x28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009030:	f107 0314 	add.w	r3, r7, #20
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	60da      	str	r2, [r3, #12]
 800903e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a53      	ldr	r2, [pc, #332]	; (8009194 <HAL_SPI_MspInit+0x16c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	f040 80a0 	bne.w	800918c <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800904c:	4b52      	ldr	r3, [pc, #328]	; (8009198 <HAL_SPI_MspInit+0x170>)
 800904e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009050:	4a51      	ldr	r2, [pc, #324]	; (8009198 <HAL_SPI_MspInit+0x170>)
 8009052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009056:	6453      	str	r3, [r2, #68]	; 0x44
 8009058:	4b4f      	ldr	r3, [pc, #316]	; (8009198 <HAL_SPI_MspInit+0x170>)
 800905a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009060:	613b      	str	r3, [r7, #16]
 8009062:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009064:	4b4c      	ldr	r3, [pc, #304]	; (8009198 <HAL_SPI_MspInit+0x170>)
 8009066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009068:	4a4b      	ldr	r2, [pc, #300]	; (8009198 <HAL_SPI_MspInit+0x170>)
 800906a:	f043 0301 	orr.w	r3, r3, #1
 800906e:	6313      	str	r3, [r2, #48]	; 0x30
 8009070:	4b49      	ldr	r3, [pc, #292]	; (8009198 <HAL_SPI_MspInit+0x170>)
 8009072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	60fb      	str	r3, [r7, #12]
 800907a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800907c:	4b46      	ldr	r3, [pc, #280]	; (8009198 <HAL_SPI_MspInit+0x170>)
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	4a45      	ldr	r2, [pc, #276]	; (8009198 <HAL_SPI_MspInit+0x170>)
 8009082:	f043 0308 	orr.w	r3, r3, #8
 8009086:	6313      	str	r3, [r2, #48]	; 0x30
 8009088:	4b43      	ldr	r3, [pc, #268]	; (8009198 <HAL_SPI_MspInit+0x170>)
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	f003 0308 	and.w	r3, r3, #8
 8009090:	60bb      	str	r3, [r7, #8]
 8009092:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009094:	2360      	movs	r3, #96	; 0x60
 8009096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009098:	2302      	movs	r3, #2
 800909a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800909c:	2300      	movs	r3, #0
 800909e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090a0:	2303      	movs	r3, #3
 80090a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090a4:	2305      	movs	r3, #5
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a8:	f107 0314 	add.w	r3, r7, #20
 80090ac:	4619      	mov	r1, r3
 80090ae:	483b      	ldr	r0, [pc, #236]	; (800919c <HAL_SPI_MspInit+0x174>)
 80090b0:	f7f8 fd04 	bl	8001abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80090b4:	2380      	movs	r3, #128	; 0x80
 80090b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b8:	2302      	movs	r3, #2
 80090ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090c0:	2303      	movs	r3, #3
 80090c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80090c4:	2305      	movs	r3, #5
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80090c8:	f107 0314 	add.w	r3, r7, #20
 80090cc:	4619      	mov	r1, r3
 80090ce:	4834      	ldr	r0, [pc, #208]	; (80091a0 <HAL_SPI_MspInit+0x178>)
 80090d0:	f7f8 fcf4 	bl	8001abc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80090d4:	4b33      	ldr	r3, [pc, #204]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 80090d6:	4a34      	ldr	r2, [pc, #208]	; (80091a8 <HAL_SPI_MspInit+0x180>)
 80090d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80090da:	4b32      	ldr	r3, [pc, #200]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 80090dc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80090e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80090e2:	4b30      	ldr	r3, [pc, #192]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80090e8:	4b2e      	ldr	r3, [pc, #184]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090ee:	4b2d      	ldr	r3, [pc, #180]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 80090f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80090f6:	4b2b      	ldr	r3, [pc, #172]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80090fc:	4b29      	ldr	r3, [pc, #164]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 80090fe:	2200      	movs	r2, #0
 8009100:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8009102:	4b28      	ldr	r3, [pc, #160]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 8009104:	2200      	movs	r2, #0
 8009106:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009108:	4b26      	ldr	r3, [pc, #152]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 800910a:	2200      	movs	r2, #0
 800910c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800910e:	4b25      	ldr	r3, [pc, #148]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 8009110:	2200      	movs	r2, #0
 8009112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8009114:	4823      	ldr	r0, [pc, #140]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 8009116:	f7f8 f939 	bl	800138c <HAL_DMA_Init>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8009120:	f7fe fa2e 	bl	8007580 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 8009128:	659a      	str	r2, [r3, #88]	; 0x58
 800912a:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <HAL_SPI_MspInit+0x17c>)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8009130:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009132:	4a1f      	ldr	r2, [pc, #124]	; (80091b0 <HAL_SPI_MspInit+0x188>)
 8009134:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8009136:	4b1d      	ldr	r3, [pc, #116]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009138:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800913c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800913e:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009140:	2240      	movs	r2, #64	; 0x40
 8009142:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009144:	4b19      	ldr	r3, [pc, #100]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009146:	2200      	movs	r2, #0
 8009148:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800914a:	4b18      	ldr	r3, [pc, #96]	; (80091ac <HAL_SPI_MspInit+0x184>)
 800914c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009150:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009152:	4b16      	ldr	r3, [pc, #88]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009154:	2200      	movs	r2, #0
 8009156:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009158:	4b14      	ldr	r3, [pc, #80]	; (80091ac <HAL_SPI_MspInit+0x184>)
 800915a:	2200      	movs	r2, #0
 800915c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009160:	2200      	movs	r2, #0
 8009162:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009166:	2200      	movs	r2, #0
 8009168:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800916a:	4b10      	ldr	r3, [pc, #64]	; (80091ac <HAL_SPI_MspInit+0x184>)
 800916c:	2200      	movs	r2, #0
 800916e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8009170:	480e      	ldr	r0, [pc, #56]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009172:	f7f8 f90b 	bl	800138c <HAL_DMA_Init>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 800917c:	f7fe fa00 	bl	8007580 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a0a      	ldr	r2, [pc, #40]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009184:	655a      	str	r2, [r3, #84]	; 0x54
 8009186:	4a09      	ldr	r2, [pc, #36]	; (80091ac <HAL_SPI_MspInit+0x184>)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800918c:	bf00      	nop
 800918e:	3728      	adds	r7, #40	; 0x28
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	40013000 	.word	0x40013000
 8009198:	40023800 	.word	0x40023800
 800919c:	40020000 	.word	0x40020000
 80091a0:	40020c00 	.word	0x40020c00
 80091a4:	20000504 	.word	0x20000504
 80091a8:	40026410 	.word	0x40026410
 80091ac:	20000564 	.word	0x20000564
 80091b0:	40026458 	.word	0x40026458

080091b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1c      	ldr	r2, [pc, #112]	; (8009234 <HAL_TIM_Base_MspInit+0x80>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d10c      	bne.n	80091e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80091c6:	4b1c      	ldr	r3, [pc, #112]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 80091c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ca:	4a1b      	ldr	r2, [pc, #108]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 80091cc:	f043 0301 	orr.w	r3, r3, #1
 80091d0:	6453      	str	r3, [r2, #68]	; 0x44
 80091d2:	4b19      	ldr	r3, [pc, #100]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 80091d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80091de:	e022      	b.n	8009226 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a15      	ldr	r2, [pc, #84]	; (800923c <HAL_TIM_Base_MspInit+0x88>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d10c      	bne.n	8009204 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	4a12      	ldr	r2, [pc, #72]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 80091f0:	f043 0310 	orr.w	r3, r3, #16
 80091f4:	6413      	str	r3, [r2, #64]	; 0x40
 80091f6:	4b10      	ldr	r3, [pc, #64]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f003 0310 	and.w	r3, r3, #16
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	693b      	ldr	r3, [r7, #16]
}
 8009202:	e010      	b.n	8009226 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a0d      	ldr	r2, [pc, #52]	; (8009240 <HAL_TIM_Base_MspInit+0x8c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d10b      	bne.n	8009226 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800920e:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	4a09      	ldr	r2, [pc, #36]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 8009214:	f043 0320 	orr.w	r3, r3, #32
 8009218:	6413      	str	r3, [r2, #64]	; 0x40
 800921a:	4b07      	ldr	r3, [pc, #28]	; (8009238 <HAL_TIM_Base_MspInit+0x84>)
 800921c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921e:	f003 0320 	and.w	r3, r3, #32
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	68fb      	ldr	r3, [r7, #12]
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40010000 	.word	0x40010000
 8009238:	40023800 	.word	0x40023800
 800923c:	40001000 	.word	0x40001000
 8009240:	40001400 	.word	0x40001400

08009244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	; 0x28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	605a      	str	r2, [r3, #4]
 8009256:	609a      	str	r2, [r3, #8]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a46      	ldr	r2, [pc, #280]	; (800937c <HAL_UART_MspInit+0x138>)
 8009262:	4293      	cmp	r3, r2
 8009264:	f040 8085 	bne.w	8009372 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009268:	4b45      	ldr	r3, [pc, #276]	; (8009380 <HAL_UART_MspInit+0x13c>)
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	4a44      	ldr	r2, [pc, #272]	; (8009380 <HAL_UART_MspInit+0x13c>)
 800926e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009272:	6413      	str	r3, [r2, #64]	; 0x40
 8009274:	4b42      	ldr	r3, [pc, #264]	; (8009380 <HAL_UART_MspInit+0x13c>)
 8009276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009280:	4b3f      	ldr	r3, [pc, #252]	; (8009380 <HAL_UART_MspInit+0x13c>)
 8009282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009284:	4a3e      	ldr	r2, [pc, #248]	; (8009380 <HAL_UART_MspInit+0x13c>)
 8009286:	f043 0308 	orr.w	r3, r3, #8
 800928a:	6313      	str	r3, [r2, #48]	; 0x30
 800928c:	4b3c      	ldr	r3, [pc, #240]	; (8009380 <HAL_UART_MspInit+0x13c>)
 800928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009290:	f003 0308 	and.w	r3, r3, #8
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009298:	f44f 7340 	mov.w	r3, #768	; 0x300
 800929c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800929e:	2302      	movs	r3, #2
 80092a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a6:	2303      	movs	r3, #3
 80092a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80092aa:	2307      	movs	r3, #7
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80092ae:	f107 0314 	add.w	r3, r7, #20
 80092b2:	4619      	mov	r1, r3
 80092b4:	4833      	ldr	r0, [pc, #204]	; (8009384 <HAL_UART_MspInit+0x140>)
 80092b6:	f7f8 fc01 	bl	8001abc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80092ba:	4b33      	ldr	r3, [pc, #204]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092bc:	4a33      	ldr	r2, [pc, #204]	; (800938c <HAL_UART_MspInit+0x148>)
 80092be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80092c0:	4b31      	ldr	r3, [pc, #196]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80092c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80092c8:	4b2f      	ldr	r3, [pc, #188]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80092ce:	4b2e      	ldr	r3, [pc, #184]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80092d4:	4b2c      	ldr	r3, [pc, #176]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80092dc:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092de:	2200      	movs	r2, #0
 80092e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80092e2:	4b29      	ldr	r3, [pc, #164]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80092e8:	4b27      	ldr	r3, [pc, #156]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80092ee:	4b26      	ldr	r3, [pc, #152]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80092f4:	4b24      	ldr	r3, [pc, #144]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80092fa:	4823      	ldr	r0, [pc, #140]	; (8009388 <HAL_UART_MspInit+0x144>)
 80092fc:	f7f8 f846 	bl	800138c <HAL_DMA_Init>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8009306:	f7fe f93b 	bl	8007580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a1e      	ldr	r2, [pc, #120]	; (8009388 <HAL_UART_MspInit+0x144>)
 800930e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009310:	4a1d      	ldr	r2, [pc, #116]	; (8009388 <HAL_UART_MspInit+0x144>)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8009316:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <HAL_UART_MspInit+0x14c>)
 8009318:	4a1e      	ldr	r2, [pc, #120]	; (8009394 <HAL_UART_MspInit+0x150>)
 800931a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800931c:	4b1c      	ldr	r3, [pc, #112]	; (8009390 <HAL_UART_MspInit+0x14c>)
 800931e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009322:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009324:	4b1a      	ldr	r3, [pc, #104]	; (8009390 <HAL_UART_MspInit+0x14c>)
 8009326:	2240      	movs	r2, #64	; 0x40
 8009328:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800932a:	4b19      	ldr	r3, [pc, #100]	; (8009390 <HAL_UART_MspInit+0x14c>)
 800932c:	2200      	movs	r2, #0
 800932e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009330:	4b17      	ldr	r3, [pc, #92]	; (8009390 <HAL_UART_MspInit+0x14c>)
 8009332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009336:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009338:	4b15      	ldr	r3, [pc, #84]	; (8009390 <HAL_UART_MspInit+0x14c>)
 800933a:	2200      	movs	r2, #0
 800933c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <HAL_UART_MspInit+0x14c>)
 8009340:	2200      	movs	r2, #0
 8009342:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8009344:	4b12      	ldr	r3, [pc, #72]	; (8009390 <HAL_UART_MspInit+0x14c>)
 8009346:	2200      	movs	r2, #0
 8009348:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800934a:	4b11      	ldr	r3, [pc, #68]	; (8009390 <HAL_UART_MspInit+0x14c>)
 800934c:	2200      	movs	r2, #0
 800934e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <HAL_UART_MspInit+0x14c>)
 8009352:	2200      	movs	r2, #0
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8009356:	480e      	ldr	r0, [pc, #56]	; (8009390 <HAL_UART_MspInit+0x14c>)
 8009358:	f7f8 f818 	bl	800138c <HAL_DMA_Init>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8009362:	f7fe f90d 	bl	8007580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a09      	ldr	r2, [pc, #36]	; (8009390 <HAL_UART_MspInit+0x14c>)
 800936a:	669a      	str	r2, [r3, #104]	; 0x68
 800936c:	4a08      	ldr	r2, [pc, #32]	; (8009390 <HAL_UART_MspInit+0x14c>)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009372:	bf00      	nop
 8009374:	3728      	adds	r7, #40	; 0x28
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	40004800 	.word	0x40004800
 8009380:	40023800 	.word	0x40023800
 8009384:	40020c00 	.word	0x40020c00
 8009388:	200005c8 	.word	0x200005c8
 800938c:	40026028 	.word	0x40026028
 8009390:	20001cf0 	.word	0x20001cf0
 8009394:	40026058 	.word	0x40026058

08009398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800939c:	bf00      	nop
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093a6:	b480      	push	{r7}
 80093a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80093aa:	e7fe      	b.n	80093aa <HardFault_Handler+0x4>

080093ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80093b0:	e7fe      	b.n	80093b0 <MemManage_Handler+0x4>

080093b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80093b2:	b480      	push	{r7}
 80093b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80093b6:	e7fe      	b.n	80093b6 <BusFault_Handler+0x4>

080093b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80093bc:	e7fe      	b.n	80093bc <UsageFault_Handler+0x4>

080093be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80093be:	b480      	push	{r7}
 80093c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80093c2:	bf00      	nop
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80093d0:	bf00      	nop
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80093da:	b480      	push	{r7}
 80093dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80093de:	bf00      	nop
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80093ec:	f7f7 f94e 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80093f8:	4802      	ldr	r0, [pc, #8]	; (8009404 <DMA1_Stream0_IRQHandler+0x10>)
 80093fa:	f7f8 f8f7 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80093fe:	bf00      	nop
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20005ed0 	.word	0x20005ed0

08009408 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800940c:	4802      	ldr	r0, [pc, #8]	; (8009418 <DMA1_Stream1_IRQHandler+0x10>)
 800940e:	f7f8 f8ed 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009412:	bf00      	nop
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200005c8 	.word	0x200005c8

0800941c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009420:	4802      	ldr	r0, [pc, #8]	; (800942c <DMA1_Stream3_IRQHandler+0x10>)
 8009422:	f7f8 f8e3 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8009426:	bf00      	nop
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20001cf0 	.word	0x20001cf0

08009430 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009434:	4802      	ldr	r0, [pc, #8]	; (8009440 <DMA1_Stream6_IRQHandler+0x10>)
 8009436:	f7f8 f8d9 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800943a:	bf00      	nop
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200006f0 	.word	0x200006f0

08009444 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009448:	4803      	ldr	r0, [pc, #12]	; (8009458 <ADC_IRQHandler+0x14>)
 800944a:	f7f7 fae9 	bl	8000a20 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800944e:	4803      	ldr	r0, [pc, #12]	; (800945c <ADC_IRQHandler+0x18>)
 8009450:	f7f7 fae6 	bl	8000a20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009454:	bf00      	nop
 8009456:	bd80      	pop	{r7, pc}
 8009458:	200032a0 	.word	0x200032a0
 800945c:	200006a8 	.word	0x200006a8

08009460 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009464:	4802      	ldr	r0, [pc, #8]	; (8009470 <I2C1_EV_IRQHandler+0x10>)
 8009466:	f7f8 ff8b 	bl	8002380 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800946a:	bf00      	nop
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000750 	.word	0x20000750

08009474 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009478:	4802      	ldr	r0, [pc, #8]	; (8009484 <I2C1_ER_IRQHandler+0x10>)
 800947a:	f7f8 ff9b 	bl	80023b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800947e:	bf00      	nop
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000750 	.word	0x20000750

08009488 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800948c:	4802      	ldr	r0, [pc, #8]	; (8009498 <USART3_IRQHandler+0x10>)
 800948e:	f7fc faa7 	bl	80059e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009492:	bf00      	nop
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20000628 	.word	0x20000628

0800949c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80094a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80094a4:	f7f8 fcce 	bl	8001e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80094a8:	bf00      	nop
 80094aa:	bd80      	pop	{r7, pc}

080094ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80094b0:	4802      	ldr	r0, [pc, #8]	; (80094bc <TIM6_DAC_IRQHandler+0x10>)
 80094b2:	f7fb fee5 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80094b6:	bf00      	nop
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20004900 	.word	0x20004900

080094c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80094c4:	4802      	ldr	r0, [pc, #8]	; (80094d0 <DMA2_Stream0_IRQHandler+0x10>)
 80094c6:	f7f8 f891 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80094ca:	bf00      	nop
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000504 	.word	0x20000504

080094d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80094d8:	4802      	ldr	r0, [pc, #8]	; (80094e4 <DMA2_Stream3_IRQHandler+0x10>)
 80094da:	f7f8 f887 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80094de:	bf00      	nop
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20000564 	.word	0x20000564

080094e8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80094ec:	4802      	ldr	r0, [pc, #8]	; (80094f8 <DMA2_Stream4_IRQHandler+0x10>)
 80094ee:	f7f8 f87d 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80094f2:	bf00      	nop
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20004838 	.word	0x20004838

080094fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009504:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009508:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d013      	beq.n	800953c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8009514:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009518:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800951c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8009524:	e000      	b.n	8009528 <ITM_SendChar+0x2c>
    {
      __NOP();
 8009526:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8009528:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f9      	beq.n	8009526 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8009532:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	b2d2      	uxtb	r2, r2
 800953a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800953c:	687b      	ldr	r3, [r7, #4]
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b086      	sub	sp, #24
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	e00a      	b.n	8009572 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800955c:	f3af 8000 	nop.w
 8009560:	4601      	mov	r1, r0
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	60ba      	str	r2, [r7, #8]
 8009568:	b2ca      	uxtb	r2, r1
 800956a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	3301      	adds	r3, #1
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	dbf0      	blt.n	800955c <_read+0x12>
	}

return len;
 800957a:	687b      	ldr	r3, [r7, #4]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	e009      	b.n	80095aa <_write+0x26>
	{
		ITM_SendChar((*ptr++));
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	60ba      	str	r2, [r7, #8]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff ffac 	bl	80094fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	3301      	adds	r3, #1
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	dbf1      	blt.n	8009596 <_write+0x12>
		//__io_putchar(*ptr++);
	}
	return len;
 80095b2:	687b      	ldr	r3, [r7, #4]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <_close>:

int _close(int file)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	return -1;
 80095c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80095e4:	605a      	str	r2, [r3, #4]
	return 0;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <_isatty>:

int _isatty(int file)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	return 1;
 80095fc:	2301      	movs	r3, #1
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800960a:	b480      	push	{r7}
 800960c:	b085      	sub	sp, #20
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
	return 0;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800962c:	4b11      	ldr	r3, [pc, #68]	; (8009674 <_sbrk+0x50>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d102      	bne.n	800963a <_sbrk+0x16>
		heap_end = &end;
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <_sbrk+0x50>)
 8009636:	4a10      	ldr	r2, [pc, #64]	; (8009678 <_sbrk+0x54>)
 8009638:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800963a:	4b0e      	ldr	r3, [pc, #56]	; (8009674 <_sbrk+0x50>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <_sbrk+0x50>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4413      	add	r3, r2
 8009648:	466a      	mov	r2, sp
 800964a:	4293      	cmp	r3, r2
 800964c:	d907      	bls.n	800965e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800964e:	f000 f8fd 	bl	800984c <__errno>
 8009652:	4602      	mov	r2, r0
 8009654:	230c      	movs	r3, #12
 8009656:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009658:	f04f 33ff 	mov.w	r3, #4294967295
 800965c:	e006      	b.n	800966c <_sbrk+0x48>
	}

	heap_end += incr;
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <_sbrk+0x50>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4413      	add	r3, r2
 8009666:	4a03      	ldr	r2, [pc, #12]	; (8009674 <_sbrk+0x50>)
 8009668:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800966a:	68fb      	ldr	r3, [r7, #12]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	2000029c 	.word	0x2000029c
 8009678:	20007560 	.word	0x20007560

0800967c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009680:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <SystemInit+0x5c>)
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009686:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <SystemInit+0x5c>)
 8009688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800968c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009690:	4b12      	ldr	r3, [pc, #72]	; (80096dc <SystemInit+0x60>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a11      	ldr	r2, [pc, #68]	; (80096dc <SystemInit+0x60>)
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <SystemInit+0x60>)
 800969e:	2200      	movs	r2, #0
 80096a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80096a2:	4b0e      	ldr	r3, [pc, #56]	; (80096dc <SystemInit+0x60>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	490d      	ldr	r1, [pc, #52]	; (80096dc <SystemInit+0x60>)
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <SystemInit+0x64>)
 80096aa:	4013      	ands	r3, r2
 80096ac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80096ae:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <SystemInit+0x60>)
 80096b0:	4a0c      	ldr	r2, [pc, #48]	; (80096e4 <SystemInit+0x68>)
 80096b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <SystemInit+0x60>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a08      	ldr	r2, [pc, #32]	; (80096dc <SystemInit+0x60>)
 80096ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <SystemInit+0x60>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80096c6:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <SystemInit+0x5c>)
 80096c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096cc:	609a      	str	r2, [r3, #8]
#endif
}
 80096ce:	bf00      	nop
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	e000ed00 	.word	0xe000ed00
 80096dc:	40023800 	.word	0x40023800
 80096e0:	fef6ffff 	.word	0xfef6ffff
 80096e4:	24003010 	.word	0x24003010

080096e8 <turnOnCurrentSink>:
  * @brief  Turn on the current sink provided by the PSOC to measure the TSEP temperature
  * @param NONE
  * @retval NONE
  */
void turnOnCurrentSink(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 80096ec:	2201      	movs	r2, #1
 80096ee:	2101      	movs	r1, #1
 80096f0:	4804      	ldr	r0, [pc, #16]	; (8009704 <turnOnCurrentSink+0x1c>)
 80096f2:	f7f8 fb8d 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80096f6:	2200      	movs	r2, #0
 80096f8:	2101      	movs	r1, #1
 80096fa:	4802      	ldr	r0, [pc, #8]	; (8009704 <turnOnCurrentSink+0x1c>)
 80096fc:	f7f8 fb88 	bl	8001e10 <HAL_GPIO_WritePin>
}
 8009700:	bf00      	nop
 8009702:	bd80      	pop	{r7, pc}
 8009704:	40021800 	.word	0x40021800

08009708 <turnOffCurrentSink>:
  * @brief  Turn off the current sink provided by the PSOC to measure the TSEP temperature
  * @param NONE
  * @retval NONE
  */
void turnOffCurrentSink(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800970c:	2201      	movs	r2, #1
 800970e:	2102      	movs	r1, #2
 8009710:	4804      	ldr	r0, [pc, #16]	; (8009724 <turnOffCurrentSink+0x1c>)
 8009712:	f7f8 fb7d 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8009716:	2200      	movs	r2, #0
 8009718:	2102      	movs	r1, #2
 800971a:	4802      	ldr	r0, [pc, #8]	; (8009724 <turnOffCurrentSink+0x1c>)
 800971c:	f7f8 fb78 	bl	8001e10 <HAL_GPIO_WritePin>
}
 8009720:	bf00      	nop
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40020c00 	.word	0x40020c00

08009728 <setSystemTime>:
  * @param system_time structure of the RTC peripheral that holds the desired time value
  * @param system_date structure of the RTC peripheral that holds the desired date value
  * @retval NONE
  */
void setSystemTime(RTC_TimeTypeDef system_time, RTC_DateTypeDef system_date)
{
 8009728:	b084      	sub	sp, #16
 800972a:	b580      	push	{r7, lr}
 800972c:	af00      	add	r7, sp, #0
 800972e:	f107 0c08 	add.w	ip, r7, #8
 8009732:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_RTC_SetTime(&hrtc, &system_time, RTC_FORMAT_BCD);
 8009736:	2201      	movs	r2, #1
 8009738:	f107 0108 	add.w	r1, r7, #8
 800973c:	4807      	ldr	r0, [pc, #28]	; (800975c <setSystemTime+0x34>)
 800973e:	f7fa fee3 	bl	8004508 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &system_date, RTC_FORMAT_BCD);
 8009742:	f107 0320 	add.w	r3, r7, #32
 8009746:	2201      	movs	r2, #1
 8009748:	4619      	mov	r1, r3
 800974a:	4804      	ldr	r0, [pc, #16]	; (800975c <setSystemTime+0x34>)
 800974c:	f7fa fff8 	bl	8004740 <HAL_RTC_SetDate>
}
 8009750:	bf00      	nop
 8009752:	46bd      	mov	sp, r7
 8009754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009758:	b004      	add	sp, #16
 800975a:	4770      	bx	lr
 800975c:	200048e0 	.word	0x200048e0

08009760 <initDWT>:
  * @brief Inits the clock counter of the DWT core module
  * @param NONE
  * @retval NONE
  */
void initDWT(void)
{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
	DWT->LAR = 0xC5ACCE55;
 8009764:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <initDWT+0x34>)
 8009766:	4a0c      	ldr	r2, [pc, #48]	; (8009798 <initDWT+0x38>)
 8009768:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <initDWT+0x3c>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <initDWT+0x3c>)
 8009772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009776:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8009778:	4b06      	ldr	r3, [pc, #24]	; (8009794 <initDWT+0x34>)
 800977a:	2200      	movs	r2, #0
 800977c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= 1;
 800977e:	4b05      	ldr	r3, [pc, #20]	; (8009794 <initDWT+0x34>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a04      	ldr	r2, [pc, #16]	; (8009794 <initDWT+0x34>)
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	6013      	str	r3, [r2, #0]
}
 800978a:	bf00      	nop
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	e0001000 	.word	0xe0001000
 8009798:	c5acce55 	.word	0xc5acce55
 800979c:	e000edf0 	.word	0xe000edf0

080097a0 <delayUSDWT>:
  * @brief Delays the programm execution for the given microseconds
  * @param us delay in microseconds
  * @retval NONE
  */
void delayUSDWT(uint32_t us)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
	uint32_t cycles = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]
	uint32_t start  = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	60bb      	str	r3, [r7, #8]

	cycles = (SystemCoreClock / 1000000L) * us;
 80097b0:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <delayUSDWT+0x44>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a0c      	ldr	r2, [pc, #48]	; (80097e8 <delayUSDWT+0x48>)
 80097b6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ba:	0c9a      	lsrs	r2, r3, #18
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	fb02 f303 	mul.w	r3, r2, r3
 80097c2:	60fb      	str	r3, [r7, #12]
	start  = DWT->CYCCNT;
 80097c4:	4b09      	ldr	r3, [pc, #36]	; (80097ec <delayUSDWT+0x4c>)
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	60bb      	str	r3, [r7, #8]
	do {
	} while (DWT->CYCCNT - start < cycles);
 80097ca:	4b08      	ldr	r3, [pc, #32]	; (80097ec <delayUSDWT+0x4c>)
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d8f8      	bhi.n	80097ca <delayUSDWT+0x2a>
}
 80097d8:	bf00      	nop
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20000088 	.word	0x20000088
 80097e8:	431bde83 	.word	0x431bde83
 80097ec:	e0001000 	.word	0xe0001000

080097f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 80097f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009828 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80097f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80097f6:	e003      	b.n	8009800 <LoopCopyDataInit>

080097f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80097f8:	4b0c      	ldr	r3, [pc, #48]	; (800982c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80097fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80097fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80097fe:	3104      	adds	r1, #4

08009800 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009800:	480b      	ldr	r0, [pc, #44]	; (8009830 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009802:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009804:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009806:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009808:	d3f6      	bcc.n	80097f8 <CopyDataInit>
  ldr  r2, =_sbss
 800980a:	4a0b      	ldr	r2, [pc, #44]	; (8009838 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800980c:	e002      	b.n	8009814 <LoopFillZerobss>

0800980e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800980e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009810:	f842 3b04 	str.w	r3, [r2], #4

08009814 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009814:	4b09      	ldr	r3, [pc, #36]	; (800983c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009816:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009818:	d3f9      	bcc.n	800980e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800981a:	f7ff ff2f 	bl	800967c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800981e:	f000 f81b 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009822:	f7fd f967 	bl	8006af4 <main>
  bx  lr    
 8009826:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8009828:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800982c:	0800c59c 	.word	0x0800c59c
  ldr  r0, =_sdata
 8009830:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009834:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 8009838:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 800983c:	2000755c 	.word	0x2000755c

08009840 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009840:	e7fe      	b.n	8009840 <CAN1_RX0_IRQHandler>

08009842 <atoi>:
 8009842:	220a      	movs	r2, #10
 8009844:	2100      	movs	r1, #0
 8009846:	f000 bd17 	b.w	800a278 <strtol>
	...

0800984c <__errno>:
 800984c:	4b01      	ldr	r3, [pc, #4]	; (8009854 <__errno+0x8>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	2000008c 	.word	0x2000008c

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4e0d      	ldr	r6, [pc, #52]	; (8009890 <__libc_init_array+0x38>)
 800985c:	4c0d      	ldr	r4, [pc, #52]	; (8009894 <__libc_init_array+0x3c>)
 800985e:	1ba4      	subs	r4, r4, r6
 8009860:	10a4      	asrs	r4, r4, #2
 8009862:	2500      	movs	r5, #0
 8009864:	42a5      	cmp	r5, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	4e0b      	ldr	r6, [pc, #44]	; (8009898 <__libc_init_array+0x40>)
 800986a:	4c0c      	ldr	r4, [pc, #48]	; (800989c <__libc_init_array+0x44>)
 800986c:	f002 fcf8 	bl	800c260 <_init>
 8009870:	1ba4      	subs	r4, r4, r6
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	2500      	movs	r5, #0
 8009876:	42a5      	cmp	r5, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009880:	4798      	blx	r3
 8009882:	3501      	adds	r5, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800988a:	4798      	blx	r3
 800988c:	3501      	adds	r5, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	0800c594 	.word	0x0800c594
 8009894:	0800c594 	.word	0x0800c594
 8009898:	0800c594 	.word	0x0800c594
 800989c:	0800c598 	.word	0x0800c598

080098a0 <memset>:
 80098a0:	4402      	add	r2, r0
 80098a2:	4603      	mov	r3, r0
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d100      	bne.n	80098aa <memset+0xa>
 80098a8:	4770      	bx	lr
 80098aa:	f803 1b01 	strb.w	r1, [r3], #1
 80098ae:	e7f9      	b.n	80098a4 <memset+0x4>

080098b0 <__cvt>:
 80098b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b2:	ed2d 8b02 	vpush	{d8}
 80098b6:	eeb0 8b40 	vmov.f64	d8, d0
 80098ba:	b085      	sub	sp, #20
 80098bc:	4617      	mov	r7, r2
 80098be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80098c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80098c2:	ee18 2a90 	vmov	r2, s17
 80098c6:	f025 0520 	bic.w	r5, r5, #32
 80098ca:	2a00      	cmp	r2, #0
 80098cc:	bfb6      	itet	lt
 80098ce:	222d      	movlt	r2, #45	; 0x2d
 80098d0:	2200      	movge	r2, #0
 80098d2:	eeb1 8b40 	vneglt.f64	d8, d0
 80098d6:	2d46      	cmp	r5, #70	; 0x46
 80098d8:	460c      	mov	r4, r1
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	d004      	beq.n	80098e8 <__cvt+0x38>
 80098de:	2d45      	cmp	r5, #69	; 0x45
 80098e0:	d100      	bne.n	80098e4 <__cvt+0x34>
 80098e2:	3401      	adds	r4, #1
 80098e4:	2102      	movs	r1, #2
 80098e6:	e000      	b.n	80098ea <__cvt+0x3a>
 80098e8:	2103      	movs	r1, #3
 80098ea:	ab03      	add	r3, sp, #12
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	ab02      	add	r3, sp, #8
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	4622      	mov	r2, r4
 80098f4:	4633      	mov	r3, r6
 80098f6:	eeb0 0b48 	vmov.f64	d0, d8
 80098fa:	f000 fe21 	bl	800a540 <_dtoa_r>
 80098fe:	2d47      	cmp	r5, #71	; 0x47
 8009900:	d101      	bne.n	8009906 <__cvt+0x56>
 8009902:	07fb      	lsls	r3, r7, #31
 8009904:	d51e      	bpl.n	8009944 <__cvt+0x94>
 8009906:	2d46      	cmp	r5, #70	; 0x46
 8009908:	eb00 0304 	add.w	r3, r0, r4
 800990c:	d10c      	bne.n	8009928 <__cvt+0x78>
 800990e:	7802      	ldrb	r2, [r0, #0]
 8009910:	2a30      	cmp	r2, #48	; 0x30
 8009912:	d107      	bne.n	8009924 <__cvt+0x74>
 8009914:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991c:	bf1c      	itt	ne
 800991e:	f1c4 0401 	rsbne	r4, r4, #1
 8009922:	6034      	strne	r4, [r6, #0]
 8009924:	6832      	ldr	r2, [r6, #0]
 8009926:	4413      	add	r3, r2
 8009928:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800992c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009930:	d007      	beq.n	8009942 <__cvt+0x92>
 8009932:	2130      	movs	r1, #48	; 0x30
 8009934:	9a03      	ldr	r2, [sp, #12]
 8009936:	429a      	cmp	r2, r3
 8009938:	d204      	bcs.n	8009944 <__cvt+0x94>
 800993a:	1c54      	adds	r4, r2, #1
 800993c:	9403      	str	r4, [sp, #12]
 800993e:	7011      	strb	r1, [r2, #0]
 8009940:	e7f8      	b.n	8009934 <__cvt+0x84>
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009948:	1a1b      	subs	r3, r3, r0
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	b005      	add	sp, #20
 800994e:	ecbd 8b02 	vpop	{d8}
 8009952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009954 <__exponent>:
 8009954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009956:	2900      	cmp	r1, #0
 8009958:	4604      	mov	r4, r0
 800995a:	bfba      	itte	lt
 800995c:	4249      	neglt	r1, r1
 800995e:	232d      	movlt	r3, #45	; 0x2d
 8009960:	232b      	movge	r3, #43	; 0x2b
 8009962:	2909      	cmp	r1, #9
 8009964:	f804 2b02 	strb.w	r2, [r4], #2
 8009968:	7043      	strb	r3, [r0, #1]
 800996a:	dd20      	ble.n	80099ae <__exponent+0x5a>
 800996c:	f10d 0307 	add.w	r3, sp, #7
 8009970:	461f      	mov	r7, r3
 8009972:	260a      	movs	r6, #10
 8009974:	fb91 f5f6 	sdiv	r5, r1, r6
 8009978:	fb06 1115 	mls	r1, r6, r5, r1
 800997c:	3130      	adds	r1, #48	; 0x30
 800997e:	2d09      	cmp	r5, #9
 8009980:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009984:	f103 32ff 	add.w	r2, r3, #4294967295
 8009988:	4629      	mov	r1, r5
 800998a:	dc09      	bgt.n	80099a0 <__exponent+0x4c>
 800998c:	3130      	adds	r1, #48	; 0x30
 800998e:	3b02      	subs	r3, #2
 8009990:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009994:	42bb      	cmp	r3, r7
 8009996:	4622      	mov	r2, r4
 8009998:	d304      	bcc.n	80099a4 <__exponent+0x50>
 800999a:	1a10      	subs	r0, r2, r0
 800999c:	b003      	add	sp, #12
 800999e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a0:	4613      	mov	r3, r2
 80099a2:	e7e7      	b.n	8009974 <__exponent+0x20>
 80099a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a8:	f804 2b01 	strb.w	r2, [r4], #1
 80099ac:	e7f2      	b.n	8009994 <__exponent+0x40>
 80099ae:	2330      	movs	r3, #48	; 0x30
 80099b0:	4419      	add	r1, r3
 80099b2:	7083      	strb	r3, [r0, #2]
 80099b4:	1d02      	adds	r2, r0, #4
 80099b6:	70c1      	strb	r1, [r0, #3]
 80099b8:	e7ef      	b.n	800999a <__exponent+0x46>
 80099ba:	0000      	movs	r0, r0
 80099bc:	0000      	movs	r0, r0
	...

080099c0 <_printf_float>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	b08d      	sub	sp, #52	; 0x34
 80099c6:	460c      	mov	r4, r1
 80099c8:	4616      	mov	r6, r2
 80099ca:	461f      	mov	r7, r3
 80099cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80099d0:	4605      	mov	r5, r0
 80099d2:	f001 fc7f 	bl	800b2d4 <_localeconv_r>
 80099d6:	f8d0 b000 	ldr.w	fp, [r0]
 80099da:	4658      	mov	r0, fp
 80099dc:	f7f6 fc3a 	bl	8000254 <strlen>
 80099e0:	2300      	movs	r3, #0
 80099e2:	930a      	str	r3, [sp, #40]	; 0x28
 80099e4:	f8d8 3000 	ldr.w	r3, [r8]
 80099e8:	9005      	str	r0, [sp, #20]
 80099ea:	3307      	adds	r3, #7
 80099ec:	f023 0307 	bic.w	r3, r3, #7
 80099f0:	f103 0108 	add.w	r1, r3, #8
 80099f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80099f8:	6822      	ldr	r2, [r4, #0]
 80099fa:	f8c8 1000 	str.w	r1, [r8]
 80099fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009a06:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8009c90 <_printf_float+0x2d0>
 8009a0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009a0e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009a12:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1a:	dd24      	ble.n	8009a66 <_printf_float+0xa6>
 8009a1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a24:	d502      	bpl.n	8009a2c <_printf_float+0x6c>
 8009a26:	232d      	movs	r3, #45	; 0x2d
 8009a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a2c:	499a      	ldr	r1, [pc, #616]	; (8009c98 <_printf_float+0x2d8>)
 8009a2e:	4b9b      	ldr	r3, [pc, #620]	; (8009c9c <_printf_float+0x2dc>)
 8009a30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009a34:	bf8c      	ite	hi
 8009a36:	4688      	movhi	r8, r1
 8009a38:	4698      	movls	r8, r3
 8009a3a:	f022 0204 	bic.w	r2, r2, #4
 8009a3e:	2303      	movs	r3, #3
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	6022      	str	r2, [r4, #0]
 8009a44:	f04f 0a00 	mov.w	sl, #0
 8009a48:	9700      	str	r7, [sp, #0]
 8009a4a:	4633      	mov	r3, r6
 8009a4c:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4628      	mov	r0, r5
 8009a52:	f000 f9e1 	bl	8009e18 <_printf_common>
 8009a56:	3001      	adds	r0, #1
 8009a58:	f040 8089 	bne.w	8009b6e <_printf_float+0x1ae>
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	b00d      	add	sp, #52	; 0x34
 8009a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a66:	eeb4 0b40 	vcmp.f64	d0, d0
 8009a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6e:	d702      	bvc.n	8009a76 <_printf_float+0xb6>
 8009a70:	498b      	ldr	r1, [pc, #556]	; (8009ca0 <_printf_float+0x2e0>)
 8009a72:	4b8c      	ldr	r3, [pc, #560]	; (8009ca4 <_printf_float+0x2e4>)
 8009a74:	e7dc      	b.n	8009a30 <_printf_float+0x70>
 8009a76:	6861      	ldr	r1, [r4, #4]
 8009a78:	1c4b      	adds	r3, r1, #1
 8009a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a7e:	ab0a      	add	r3, sp, #40	; 0x28
 8009a80:	a809      	add	r0, sp, #36	; 0x24
 8009a82:	d13b      	bne.n	8009afc <_printf_float+0x13c>
 8009a84:	2106      	movs	r1, #6
 8009a86:	6061      	str	r1, [r4, #4]
 8009a88:	f04f 0c00 	mov.w	ip, #0
 8009a8c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009a90:	e9cd 0900 	strd	r0, r9, [sp]
 8009a94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a98:	6022      	str	r2, [r4, #0]
 8009a9a:	6861      	ldr	r1, [r4, #4]
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f7ff ff07 	bl	80098b0 <__cvt>
 8009aa2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8009aa6:	2b47      	cmp	r3, #71	; 0x47
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	d109      	bne.n	8009ac0 <_printf_float+0x100>
 8009aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aae:	1cd8      	adds	r0, r3, #3
 8009ab0:	db02      	blt.n	8009ab8 <_printf_float+0xf8>
 8009ab2:	6862      	ldr	r2, [r4, #4]
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	dd47      	ble.n	8009b48 <_printf_float+0x188>
 8009ab8:	f1a9 0902 	sub.w	r9, r9, #2
 8009abc:	fa5f f989 	uxtb.w	r9, r9
 8009ac0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ac6:	d824      	bhi.n	8009b12 <_printf_float+0x152>
 8009ac8:	3901      	subs	r1, #1
 8009aca:	464a      	mov	r2, r9
 8009acc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8009ad2:	f7ff ff3f 	bl	8009954 <__exponent>
 8009ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ad8:	1813      	adds	r3, r2, r0
 8009ada:	2a01      	cmp	r2, #1
 8009adc:	4682      	mov	sl, r0
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	dc02      	bgt.n	8009ae8 <_printf_float+0x128>
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	07d1      	lsls	r1, r2, #31
 8009ae6:	d501      	bpl.n	8009aec <_printf_float+0x12c>
 8009ae8:	3301      	adds	r3, #1
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0a9      	beq.n	8009a48 <_printf_float+0x88>
 8009af4:	232d      	movs	r3, #45	; 0x2d
 8009af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009afa:	e7a5      	b.n	8009a48 <_printf_float+0x88>
 8009afc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8009b00:	f000 8178 	beq.w	8009df4 <_printf_float+0x434>
 8009b04:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009b08:	d1be      	bne.n	8009a88 <_printf_float+0xc8>
 8009b0a:	2900      	cmp	r1, #0
 8009b0c:	d1bc      	bne.n	8009a88 <_printf_float+0xc8>
 8009b0e:	2101      	movs	r1, #1
 8009b10:	e7b9      	b.n	8009a86 <_printf_float+0xc6>
 8009b12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009b16:	d119      	bne.n	8009b4c <_printf_float+0x18c>
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	6863      	ldr	r3, [r4, #4]
 8009b1c:	dd0c      	ble.n	8009b38 <_printf_float+0x178>
 8009b1e:	6121      	str	r1, [r4, #16]
 8009b20:	b913      	cbnz	r3, 8009b28 <_printf_float+0x168>
 8009b22:	6822      	ldr	r2, [r4, #0]
 8009b24:	07d2      	lsls	r2, r2, #31
 8009b26:	d502      	bpl.n	8009b2e <_printf_float+0x16e>
 8009b28:	3301      	adds	r3, #1
 8009b2a:	440b      	add	r3, r1
 8009b2c:	6123      	str	r3, [r4, #16]
 8009b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b30:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b32:	f04f 0a00 	mov.w	sl, #0
 8009b36:	e7d9      	b.n	8009aec <_printf_float+0x12c>
 8009b38:	b913      	cbnz	r3, 8009b40 <_printf_float+0x180>
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	07d0      	lsls	r0, r2, #31
 8009b3e:	d501      	bpl.n	8009b44 <_printf_float+0x184>
 8009b40:	3302      	adds	r3, #2
 8009b42:	e7f3      	b.n	8009b2c <_printf_float+0x16c>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e7f1      	b.n	8009b2c <_printf_float+0x16c>
 8009b48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009b4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b50:	4293      	cmp	r3, r2
 8009b52:	db05      	blt.n	8009b60 <_printf_float+0x1a0>
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	6123      	str	r3, [r4, #16]
 8009b58:	07d1      	lsls	r1, r2, #31
 8009b5a:	d5e8      	bpl.n	8009b2e <_printf_float+0x16e>
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	e7e5      	b.n	8009b2c <_printf_float+0x16c>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bfd4      	ite	le
 8009b64:	f1c3 0302 	rsble	r3, r3, #2
 8009b68:	2301      	movgt	r3, #1
 8009b6a:	4413      	add	r3, r2
 8009b6c:	e7de      	b.n	8009b2c <_printf_float+0x16c>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	055a      	lsls	r2, r3, #21
 8009b72:	d407      	bmi.n	8009b84 <_printf_float+0x1c4>
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	4642      	mov	r2, r8
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d12a      	bne.n	8009bd8 <_printf_float+0x218>
 8009b82:	e76b      	b.n	8009a5c <_printf_float+0x9c>
 8009b84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009b88:	f240 80de 	bls.w	8009d48 <_printf_float+0x388>
 8009b8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009b90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b98:	d133      	bne.n	8009c02 <_printf_float+0x242>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4a42      	ldr	r2, [pc, #264]	; (8009ca8 <_printf_float+0x2e8>)
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b8      	blx	r7
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	f43f af59 	beq.w	8009a5c <_printf_float+0x9c>
 8009baa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	db02      	blt.n	8009bb8 <_printf_float+0x1f8>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	07d8      	lsls	r0, r3, #31
 8009bb6:	d50f      	bpl.n	8009bd8 <_printf_float+0x218>
 8009bb8:	9b05      	ldr	r3, [sp, #20]
 8009bba:	465a      	mov	r2, fp
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b8      	blx	r7
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f43f af4a 	beq.w	8009a5c <_printf_float+0x9c>
 8009bc8:	f04f 0800 	mov.w	r8, #0
 8009bcc:	f104 091a 	add.w	r9, r4, #26
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	4543      	cmp	r3, r8
 8009bd6:	dc09      	bgt.n	8009bec <_printf_float+0x22c>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	079b      	lsls	r3, r3, #30
 8009bdc:	f100 8105 	bmi.w	8009dea <_printf_float+0x42a>
 8009be0:	68e0      	ldr	r0, [r4, #12]
 8009be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be4:	4298      	cmp	r0, r3
 8009be6:	bfb8      	it	lt
 8009be8:	4618      	movlt	r0, r3
 8009bea:	e739      	b.n	8009a60 <_printf_float+0xa0>
 8009bec:	2301      	movs	r3, #1
 8009bee:	464a      	mov	r2, r9
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b8      	blx	r7
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	f43f af30 	beq.w	8009a5c <_printf_float+0x9c>
 8009bfc:	f108 0801 	add.w	r8, r8, #1
 8009c00:	e7e6      	b.n	8009bd0 <_printf_float+0x210>
 8009c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dc2b      	bgt.n	8009c60 <_printf_float+0x2a0>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	4a27      	ldr	r2, [pc, #156]	; (8009ca8 <_printf_float+0x2e8>)
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4628      	mov	r0, r5
 8009c10:	47b8      	blx	r7
 8009c12:	3001      	adds	r0, #1
 8009c14:	f43f af22 	beq.w	8009a5c <_printf_float+0x9c>
 8009c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1a:	b923      	cbnz	r3, 8009c26 <_printf_float+0x266>
 8009c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c1e:	b913      	cbnz	r3, 8009c26 <_printf_float+0x266>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	07d9      	lsls	r1, r3, #31
 8009c24:	d5d8      	bpl.n	8009bd8 <_printf_float+0x218>
 8009c26:	9b05      	ldr	r3, [sp, #20]
 8009c28:	465a      	mov	r2, fp
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	f43f af13 	beq.w	8009a5c <_printf_float+0x9c>
 8009c36:	f04f 0900 	mov.w	r9, #0
 8009c3a:	f104 0a1a 	add.w	sl, r4, #26
 8009c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c40:	425b      	negs	r3, r3
 8009c42:	454b      	cmp	r3, r9
 8009c44:	dc01      	bgt.n	8009c4a <_printf_float+0x28a>
 8009c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c48:	e795      	b.n	8009b76 <_printf_float+0x1b6>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4652      	mov	r2, sl
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b8      	blx	r7
 8009c54:	3001      	adds	r0, #1
 8009c56:	f43f af01 	beq.w	8009a5c <_printf_float+0x9c>
 8009c5a:	f109 0901 	add.w	r9, r9, #1
 8009c5e:	e7ee      	b.n	8009c3e <_printf_float+0x27e>
 8009c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c64:	429a      	cmp	r2, r3
 8009c66:	bfa8      	it	ge
 8009c68:	461a      	movge	r2, r3
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	4691      	mov	r9, r2
 8009c6e:	dd07      	ble.n	8009c80 <_printf_float+0x2c0>
 8009c70:	4613      	mov	r3, r2
 8009c72:	4631      	mov	r1, r6
 8009c74:	4642      	mov	r2, r8
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f43f aeee 	beq.w	8009a5c <_printf_float+0x9c>
 8009c80:	f104 031a 	add.w	r3, r4, #26
 8009c84:	f04f 0a00 	mov.w	sl, #0
 8009c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	e017      	b.n	8009cc0 <_printf_float+0x300>
 8009c90:	ffffffff 	.word	0xffffffff
 8009c94:	7fefffff 	.word	0x7fefffff
 8009c98:	0800c2c8 	.word	0x0800c2c8
 8009c9c:	0800c2c4 	.word	0x0800c2c4
 8009ca0:	0800c2d0 	.word	0x0800c2d0
 8009ca4:	0800c2cc 	.word	0x0800c2cc
 8009ca8:	0800c2d4 	.word	0x0800c2d4
 8009cac:	2301      	movs	r3, #1
 8009cae:	9a07      	ldr	r2, [sp, #28]
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b8      	blx	r7
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	f43f aed0 	beq.w	8009a5c <_printf_float+0x9c>
 8009cbc:	f10a 0a01 	add.w	sl, sl, #1
 8009cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cc2:	9306      	str	r3, [sp, #24]
 8009cc4:	eba3 0309 	sub.w	r3, r3, r9
 8009cc8:	4553      	cmp	r3, sl
 8009cca:	dcef      	bgt.n	8009cac <_printf_float+0x2ec>
 8009ccc:	9b06      	ldr	r3, [sp, #24]
 8009cce:	4498      	add	r8, r3
 8009cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	db15      	blt.n	8009d04 <_printf_float+0x344>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	07da      	lsls	r2, r3, #31
 8009cdc:	d412      	bmi.n	8009d04 <_printf_float+0x344>
 8009cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce0:	9a06      	ldr	r2, [sp, #24]
 8009ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce4:	1a9a      	subs	r2, r3, r2
 8009ce6:	eba3 0a01 	sub.w	sl, r3, r1
 8009cea:	4592      	cmp	sl, r2
 8009cec:	bfa8      	it	ge
 8009cee:	4692      	movge	sl, r2
 8009cf0:	f1ba 0f00 	cmp.w	sl, #0
 8009cf4:	dc0e      	bgt.n	8009d14 <_printf_float+0x354>
 8009cf6:	f04f 0800 	mov.w	r8, #0
 8009cfa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cfe:	f104 091a 	add.w	r9, r4, #26
 8009d02:	e019      	b.n	8009d38 <_printf_float+0x378>
 8009d04:	9b05      	ldr	r3, [sp, #20]
 8009d06:	465a      	mov	r2, fp
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	47b8      	blx	r7
 8009d0e:	3001      	adds	r0, #1
 8009d10:	d1e5      	bne.n	8009cde <_printf_float+0x31e>
 8009d12:	e6a3      	b.n	8009a5c <_printf_float+0x9c>
 8009d14:	4653      	mov	r3, sl
 8009d16:	4642      	mov	r2, r8
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	47b8      	blx	r7
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d1e9      	bne.n	8009cf6 <_printf_float+0x336>
 8009d22:	e69b      	b.n	8009a5c <_printf_float+0x9c>
 8009d24:	2301      	movs	r3, #1
 8009d26:	464a      	mov	r2, r9
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	47b8      	blx	r7
 8009d2e:	3001      	adds	r0, #1
 8009d30:	f43f ae94 	beq.w	8009a5c <_printf_float+0x9c>
 8009d34:	f108 0801 	add.w	r8, r8, #1
 8009d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d3c:	1a9b      	subs	r3, r3, r2
 8009d3e:	eba3 030a 	sub.w	r3, r3, sl
 8009d42:	4543      	cmp	r3, r8
 8009d44:	dcee      	bgt.n	8009d24 <_printf_float+0x364>
 8009d46:	e747      	b.n	8009bd8 <_printf_float+0x218>
 8009d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d4a:	2a01      	cmp	r2, #1
 8009d4c:	dc01      	bgt.n	8009d52 <_printf_float+0x392>
 8009d4e:	07db      	lsls	r3, r3, #31
 8009d50:	d539      	bpl.n	8009dc6 <_printf_float+0x406>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4642      	mov	r2, r8
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f ae7d 	beq.w	8009a5c <_printf_float+0x9c>
 8009d62:	9b05      	ldr	r3, [sp, #20]
 8009d64:	465a      	mov	r2, fp
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f108 0801 	add.w	r8, r8, #1
 8009d72:	f43f ae73 	beq.w	8009a5c <_printf_float+0x9c>
 8009d76:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d84:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d88:	d018      	beq.n	8009dbc <_printf_float+0x3fc>
 8009d8a:	4642      	mov	r2, r8
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b8      	blx	r7
 8009d92:	3001      	adds	r0, #1
 8009d94:	d10e      	bne.n	8009db4 <_printf_float+0x3f4>
 8009d96:	e661      	b.n	8009a5c <_printf_float+0x9c>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	464a      	mov	r2, r9
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f ae5a 	beq.w	8009a5c <_printf_float+0x9c>
 8009da8:	f108 0801 	add.w	r8, r8, #1
 8009dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4543      	cmp	r3, r8
 8009db2:	dcf1      	bgt.n	8009d98 <_printf_float+0x3d8>
 8009db4:	4653      	mov	r3, sl
 8009db6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dba:	e6dd      	b.n	8009b78 <_printf_float+0x1b8>
 8009dbc:	f04f 0800 	mov.w	r8, #0
 8009dc0:	f104 091a 	add.w	r9, r4, #26
 8009dc4:	e7f2      	b.n	8009dac <_printf_float+0x3ec>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e7df      	b.n	8009d8a <_printf_float+0x3ca>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	464a      	mov	r2, r9
 8009dce:	4631      	mov	r1, r6
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	47b8      	blx	r7
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	f43f ae41 	beq.w	8009a5c <_printf_float+0x9c>
 8009dda:	f108 0801 	add.w	r8, r8, #1
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	4543      	cmp	r3, r8
 8009de6:	dcf0      	bgt.n	8009dca <_printf_float+0x40a>
 8009de8:	e6fa      	b.n	8009be0 <_printf_float+0x220>
 8009dea:	f04f 0800 	mov.w	r8, #0
 8009dee:	f104 0919 	add.w	r9, r4, #25
 8009df2:	e7f4      	b.n	8009dde <_printf_float+0x41e>
 8009df4:	2900      	cmp	r1, #0
 8009df6:	f43f ae8a 	beq.w	8009b0e <_printf_float+0x14e>
 8009dfa:	f04f 0c00 	mov.w	ip, #0
 8009dfe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009e02:	e9cd 0900 	strd	r0, r9, [sp]
 8009e06:	6022      	str	r2, [r4, #0]
 8009e08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7ff fd4f 	bl	80098b0 <__cvt>
 8009e12:	4680      	mov	r8, r0
 8009e14:	e64a      	b.n	8009aac <_printf_float+0xec>
 8009e16:	bf00      	nop

08009e18 <_printf_common>:
 8009e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1c:	4691      	mov	r9, r2
 8009e1e:	461f      	mov	r7, r3
 8009e20:	688a      	ldr	r2, [r1, #8]
 8009e22:	690b      	ldr	r3, [r1, #16]
 8009e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	bfb8      	it	lt
 8009e2c:	4613      	movlt	r3, r2
 8009e2e:	f8c9 3000 	str.w	r3, [r9]
 8009e32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e36:	4606      	mov	r6, r0
 8009e38:	460c      	mov	r4, r1
 8009e3a:	b112      	cbz	r2, 8009e42 <_printf_common+0x2a>
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	f8c9 3000 	str.w	r3, [r9]
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	0699      	lsls	r1, r3, #26
 8009e46:	bf42      	ittt	mi
 8009e48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e4c:	3302      	addmi	r3, #2
 8009e4e:	f8c9 3000 	strmi.w	r3, [r9]
 8009e52:	6825      	ldr	r5, [r4, #0]
 8009e54:	f015 0506 	ands.w	r5, r5, #6
 8009e58:	d107      	bne.n	8009e6a <_printf_common+0x52>
 8009e5a:	f104 0a19 	add.w	sl, r4, #25
 8009e5e:	68e3      	ldr	r3, [r4, #12]
 8009e60:	f8d9 2000 	ldr.w	r2, [r9]
 8009e64:	1a9b      	subs	r3, r3, r2
 8009e66:	42ab      	cmp	r3, r5
 8009e68:	dc28      	bgt.n	8009ebc <_printf_common+0xa4>
 8009e6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	3300      	adds	r3, #0
 8009e72:	bf18      	it	ne
 8009e74:	2301      	movne	r3, #1
 8009e76:	0692      	lsls	r2, r2, #26
 8009e78:	d42d      	bmi.n	8009ed6 <_printf_common+0xbe>
 8009e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e7e:	4639      	mov	r1, r7
 8009e80:	4630      	mov	r0, r6
 8009e82:	47c0      	blx	r8
 8009e84:	3001      	adds	r0, #1
 8009e86:	d020      	beq.n	8009eca <_printf_common+0xb2>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	68e5      	ldr	r5, [r4, #12]
 8009e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e90:	f003 0306 	and.w	r3, r3, #6
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	bf08      	it	eq
 8009e98:	1aad      	subeq	r5, r5, r2
 8009e9a:	68a3      	ldr	r3, [r4, #8]
 8009e9c:	6922      	ldr	r2, [r4, #16]
 8009e9e:	bf0c      	ite	eq
 8009ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ea4:	2500      	movne	r5, #0
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	bfc4      	itt	gt
 8009eaa:	1a9b      	subgt	r3, r3, r2
 8009eac:	18ed      	addgt	r5, r5, r3
 8009eae:	f04f 0900 	mov.w	r9, #0
 8009eb2:	341a      	adds	r4, #26
 8009eb4:	454d      	cmp	r5, r9
 8009eb6:	d11a      	bne.n	8009eee <_printf_common+0xd6>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	e008      	b.n	8009ece <_printf_common+0xb6>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4652      	mov	r2, sl
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	47c0      	blx	r8
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d103      	bne.n	8009ed2 <_printf_common+0xba>
 8009eca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed2:	3501      	adds	r5, #1
 8009ed4:	e7c3      	b.n	8009e5e <_printf_common+0x46>
 8009ed6:	18e1      	adds	r1, r4, r3
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	2030      	movs	r0, #48	; 0x30
 8009edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ee0:	4422      	add	r2, r4
 8009ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009eea:	3302      	adds	r3, #2
 8009eec:	e7c5      	b.n	8009e7a <_printf_common+0x62>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	47c0      	blx	r8
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d0e6      	beq.n	8009eca <_printf_common+0xb2>
 8009efc:	f109 0901 	add.w	r9, r9, #1
 8009f00:	e7d8      	b.n	8009eb4 <_printf_common+0x9c>
	...

08009f04 <_printf_i>:
 8009f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	7e09      	ldrb	r1, [r1, #24]
 8009f10:	b085      	sub	sp, #20
 8009f12:	296e      	cmp	r1, #110	; 0x6e
 8009f14:	4617      	mov	r7, r2
 8009f16:	4606      	mov	r6, r0
 8009f18:	4698      	mov	r8, r3
 8009f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f1c:	f000 80b3 	beq.w	800a086 <_printf_i+0x182>
 8009f20:	d822      	bhi.n	8009f68 <_printf_i+0x64>
 8009f22:	2963      	cmp	r1, #99	; 0x63
 8009f24:	d036      	beq.n	8009f94 <_printf_i+0x90>
 8009f26:	d80a      	bhi.n	8009f3e <_printf_i+0x3a>
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	f000 80b9 	beq.w	800a0a0 <_printf_i+0x19c>
 8009f2e:	2958      	cmp	r1, #88	; 0x58
 8009f30:	f000 8083 	beq.w	800a03a <_printf_i+0x136>
 8009f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f3c:	e032      	b.n	8009fa4 <_printf_i+0xa0>
 8009f3e:	2964      	cmp	r1, #100	; 0x64
 8009f40:	d001      	beq.n	8009f46 <_printf_i+0x42>
 8009f42:	2969      	cmp	r1, #105	; 0x69
 8009f44:	d1f6      	bne.n	8009f34 <_printf_i+0x30>
 8009f46:	6820      	ldr	r0, [r4, #0]
 8009f48:	6813      	ldr	r3, [r2, #0]
 8009f4a:	0605      	lsls	r5, r0, #24
 8009f4c:	f103 0104 	add.w	r1, r3, #4
 8009f50:	d52a      	bpl.n	8009fa8 <_printf_i+0xa4>
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da03      	bge.n	8009f62 <_printf_i+0x5e>
 8009f5a:	222d      	movs	r2, #45	; 0x2d
 8009f5c:	425b      	negs	r3, r3
 8009f5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009f62:	486f      	ldr	r0, [pc, #444]	; (800a120 <_printf_i+0x21c>)
 8009f64:	220a      	movs	r2, #10
 8009f66:	e039      	b.n	8009fdc <_printf_i+0xd8>
 8009f68:	2973      	cmp	r1, #115	; 0x73
 8009f6a:	f000 809d 	beq.w	800a0a8 <_printf_i+0x1a4>
 8009f6e:	d808      	bhi.n	8009f82 <_printf_i+0x7e>
 8009f70:	296f      	cmp	r1, #111	; 0x6f
 8009f72:	d020      	beq.n	8009fb6 <_printf_i+0xb2>
 8009f74:	2970      	cmp	r1, #112	; 0x70
 8009f76:	d1dd      	bne.n	8009f34 <_printf_i+0x30>
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	f043 0320 	orr.w	r3, r3, #32
 8009f7e:	6023      	str	r3, [r4, #0]
 8009f80:	e003      	b.n	8009f8a <_printf_i+0x86>
 8009f82:	2975      	cmp	r1, #117	; 0x75
 8009f84:	d017      	beq.n	8009fb6 <_printf_i+0xb2>
 8009f86:	2978      	cmp	r1, #120	; 0x78
 8009f88:	d1d4      	bne.n	8009f34 <_printf_i+0x30>
 8009f8a:	2378      	movs	r3, #120	; 0x78
 8009f8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f90:	4864      	ldr	r0, [pc, #400]	; (800a124 <_printf_i+0x220>)
 8009f92:	e055      	b.n	800a040 <_printf_i+0x13c>
 8009f94:	6813      	ldr	r3, [r2, #0]
 8009f96:	1d19      	adds	r1, r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6011      	str	r1, [r2, #0]
 8009f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e08c      	b.n	800a0c2 <_printf_i+0x1be>
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6011      	str	r1, [r2, #0]
 8009fac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fb0:	bf18      	it	ne
 8009fb2:	b21b      	sxthne	r3, r3
 8009fb4:	e7cf      	b.n	8009f56 <_printf_i+0x52>
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	6825      	ldr	r5, [r4, #0]
 8009fba:	1d18      	adds	r0, r3, #4
 8009fbc:	6010      	str	r0, [r2, #0]
 8009fbe:	0628      	lsls	r0, r5, #24
 8009fc0:	d501      	bpl.n	8009fc6 <_printf_i+0xc2>
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	e002      	b.n	8009fcc <_printf_i+0xc8>
 8009fc6:	0668      	lsls	r0, r5, #25
 8009fc8:	d5fb      	bpl.n	8009fc2 <_printf_i+0xbe>
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	4854      	ldr	r0, [pc, #336]	; (800a120 <_printf_i+0x21c>)
 8009fce:	296f      	cmp	r1, #111	; 0x6f
 8009fd0:	bf14      	ite	ne
 8009fd2:	220a      	movne	r2, #10
 8009fd4:	2208      	moveq	r2, #8
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fdc:	6865      	ldr	r5, [r4, #4]
 8009fde:	60a5      	str	r5, [r4, #8]
 8009fe0:	2d00      	cmp	r5, #0
 8009fe2:	f2c0 8095 	blt.w	800a110 <_printf_i+0x20c>
 8009fe6:	6821      	ldr	r1, [r4, #0]
 8009fe8:	f021 0104 	bic.w	r1, r1, #4
 8009fec:	6021      	str	r1, [r4, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d13d      	bne.n	800a06e <_printf_i+0x16a>
 8009ff2:	2d00      	cmp	r5, #0
 8009ff4:	f040 808e 	bne.w	800a114 <_printf_i+0x210>
 8009ff8:	4665      	mov	r5, ip
 8009ffa:	2a08      	cmp	r2, #8
 8009ffc:	d10b      	bne.n	800a016 <_printf_i+0x112>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	07db      	lsls	r3, r3, #31
 800a002:	d508      	bpl.n	800a016 <_printf_i+0x112>
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	6862      	ldr	r2, [r4, #4]
 800a008:	429a      	cmp	r2, r3
 800a00a:	bfde      	ittt	le
 800a00c:	2330      	movle	r3, #48	; 0x30
 800a00e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a012:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a016:	ebac 0305 	sub.w	r3, ip, r5
 800a01a:	6123      	str	r3, [r4, #16]
 800a01c:	f8cd 8000 	str.w	r8, [sp]
 800a020:	463b      	mov	r3, r7
 800a022:	aa03      	add	r2, sp, #12
 800a024:	4621      	mov	r1, r4
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff fef6 	bl	8009e18 <_printf_common>
 800a02c:	3001      	adds	r0, #1
 800a02e:	d14d      	bne.n	800a0cc <_printf_i+0x1c8>
 800a030:	f04f 30ff 	mov.w	r0, #4294967295
 800a034:	b005      	add	sp, #20
 800a036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a03a:	4839      	ldr	r0, [pc, #228]	; (800a120 <_printf_i+0x21c>)
 800a03c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a040:	6813      	ldr	r3, [r2, #0]
 800a042:	6821      	ldr	r1, [r4, #0]
 800a044:	1d1d      	adds	r5, r3, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6015      	str	r5, [r2, #0]
 800a04a:	060a      	lsls	r2, r1, #24
 800a04c:	d50b      	bpl.n	800a066 <_printf_i+0x162>
 800a04e:	07ca      	lsls	r2, r1, #31
 800a050:	bf44      	itt	mi
 800a052:	f041 0120 	orrmi.w	r1, r1, #32
 800a056:	6021      	strmi	r1, [r4, #0]
 800a058:	b91b      	cbnz	r3, 800a062 <_printf_i+0x15e>
 800a05a:	6822      	ldr	r2, [r4, #0]
 800a05c:	f022 0220 	bic.w	r2, r2, #32
 800a060:	6022      	str	r2, [r4, #0]
 800a062:	2210      	movs	r2, #16
 800a064:	e7b7      	b.n	8009fd6 <_printf_i+0xd2>
 800a066:	064d      	lsls	r5, r1, #25
 800a068:	bf48      	it	mi
 800a06a:	b29b      	uxthmi	r3, r3
 800a06c:	e7ef      	b.n	800a04e <_printf_i+0x14a>
 800a06e:	4665      	mov	r5, ip
 800a070:	fbb3 f1f2 	udiv	r1, r3, r2
 800a074:	fb02 3311 	mls	r3, r2, r1, r3
 800a078:	5cc3      	ldrb	r3, [r0, r3]
 800a07a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a07e:	460b      	mov	r3, r1
 800a080:	2900      	cmp	r1, #0
 800a082:	d1f5      	bne.n	800a070 <_printf_i+0x16c>
 800a084:	e7b9      	b.n	8009ffa <_printf_i+0xf6>
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	6825      	ldr	r5, [r4, #0]
 800a08a:	6961      	ldr	r1, [r4, #20]
 800a08c:	1d18      	adds	r0, r3, #4
 800a08e:	6010      	str	r0, [r2, #0]
 800a090:	0628      	lsls	r0, r5, #24
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	d501      	bpl.n	800a09a <_printf_i+0x196>
 800a096:	6019      	str	r1, [r3, #0]
 800a098:	e002      	b.n	800a0a0 <_printf_i+0x19c>
 800a09a:	066a      	lsls	r2, r5, #25
 800a09c:	d5fb      	bpl.n	800a096 <_printf_i+0x192>
 800a09e:	8019      	strh	r1, [r3, #0]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6123      	str	r3, [r4, #16]
 800a0a4:	4665      	mov	r5, ip
 800a0a6:	e7b9      	b.n	800a01c <_printf_i+0x118>
 800a0a8:	6813      	ldr	r3, [r2, #0]
 800a0aa:	1d19      	adds	r1, r3, #4
 800a0ac:	6011      	str	r1, [r2, #0]
 800a0ae:	681d      	ldr	r5, [r3, #0]
 800a0b0:	6862      	ldr	r2, [r4, #4]
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f7f6 f8db 	bl	8000270 <memchr>
 800a0ba:	b108      	cbz	r0, 800a0c0 <_printf_i+0x1bc>
 800a0bc:	1b40      	subs	r0, r0, r5
 800a0be:	6060      	str	r0, [r4, #4]
 800a0c0:	6863      	ldr	r3, [r4, #4]
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ca:	e7a7      	b.n	800a01c <_printf_i+0x118>
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	462a      	mov	r2, r5
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	47c0      	blx	r8
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	d0aa      	beq.n	800a030 <_printf_i+0x12c>
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	079b      	lsls	r3, r3, #30
 800a0de:	d413      	bmi.n	800a108 <_printf_i+0x204>
 800a0e0:	68e0      	ldr	r0, [r4, #12]
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	4298      	cmp	r0, r3
 800a0e6:	bfb8      	it	lt
 800a0e8:	4618      	movlt	r0, r3
 800a0ea:	e7a3      	b.n	800a034 <_printf_i+0x130>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	464a      	mov	r2, r9
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	47c0      	blx	r8
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d09a      	beq.n	800a030 <_printf_i+0x12c>
 800a0fa:	3501      	adds	r5, #1
 800a0fc:	68e3      	ldr	r3, [r4, #12]
 800a0fe:	9a03      	ldr	r2, [sp, #12]
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	42ab      	cmp	r3, r5
 800a104:	dcf2      	bgt.n	800a0ec <_printf_i+0x1e8>
 800a106:	e7eb      	b.n	800a0e0 <_printf_i+0x1dc>
 800a108:	2500      	movs	r5, #0
 800a10a:	f104 0919 	add.w	r9, r4, #25
 800a10e:	e7f5      	b.n	800a0fc <_printf_i+0x1f8>
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1ac      	bne.n	800a06e <_printf_i+0x16a>
 800a114:	7803      	ldrb	r3, [r0, #0]
 800a116:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a11a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a11e:	e76c      	b.n	8009ffa <_printf_i+0xf6>
 800a120:	0800c2d6 	.word	0x0800c2d6
 800a124:	0800c2e7 	.word	0x0800c2e7

0800a128 <iprintf>:
 800a128:	b40f      	push	{r0, r1, r2, r3}
 800a12a:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <iprintf+0x2c>)
 800a12c:	b513      	push	{r0, r1, r4, lr}
 800a12e:	681c      	ldr	r4, [r3, #0]
 800a130:	b124      	cbz	r4, 800a13c <iprintf+0x14>
 800a132:	69a3      	ldr	r3, [r4, #24]
 800a134:	b913      	cbnz	r3, 800a13c <iprintf+0x14>
 800a136:	4620      	mov	r0, r4
 800a138:	f001 f83e 	bl	800b1b8 <__sinit>
 800a13c:	ab05      	add	r3, sp, #20
 800a13e:	9a04      	ldr	r2, [sp, #16]
 800a140:	68a1      	ldr	r1, [r4, #8]
 800a142:	9301      	str	r3, [sp, #4]
 800a144:	4620      	mov	r0, r4
 800a146:	f001 fd17 	bl	800bb78 <_vfiprintf_r>
 800a14a:	b002      	add	sp, #8
 800a14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a150:	b004      	add	sp, #16
 800a152:	4770      	bx	lr
 800a154:	2000008c 	.word	0x2000008c

0800a158 <strncpy>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	3901      	subs	r1, #1
 800a15c:	4604      	mov	r4, r0
 800a15e:	b902      	cbnz	r2, 800a162 <strncpy+0xa>
 800a160:	bd70      	pop	{r4, r5, r6, pc}
 800a162:	4623      	mov	r3, r4
 800a164:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a168:	f803 5b01 	strb.w	r5, [r3], #1
 800a16c:	1e56      	subs	r6, r2, #1
 800a16e:	b92d      	cbnz	r5, 800a17c <strncpy+0x24>
 800a170:	4414      	add	r4, r2
 800a172:	42a3      	cmp	r3, r4
 800a174:	d0f4      	beq.n	800a160 <strncpy+0x8>
 800a176:	f803 5b01 	strb.w	r5, [r3], #1
 800a17a:	e7fa      	b.n	800a172 <strncpy+0x1a>
 800a17c:	461c      	mov	r4, r3
 800a17e:	4632      	mov	r2, r6
 800a180:	e7ed      	b.n	800a15e <strncpy+0x6>

0800a182 <_strtol_l.isra.0>:
 800a182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a186:	4680      	mov	r8, r0
 800a188:	4689      	mov	r9, r1
 800a18a:	4692      	mov	sl, r2
 800a18c:	461e      	mov	r6, r3
 800a18e:	460f      	mov	r7, r1
 800a190:	463d      	mov	r5, r7
 800a192:	9808      	ldr	r0, [sp, #32]
 800a194:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a198:	f001 f898 	bl	800b2cc <__locale_ctype_ptr_l>
 800a19c:	4420      	add	r0, r4
 800a19e:	7843      	ldrb	r3, [r0, #1]
 800a1a0:	f013 0308 	ands.w	r3, r3, #8
 800a1a4:	d132      	bne.n	800a20c <_strtol_l.isra.0+0x8a>
 800a1a6:	2c2d      	cmp	r4, #45	; 0x2d
 800a1a8:	d132      	bne.n	800a210 <_strtol_l.isra.0+0x8e>
 800a1aa:	787c      	ldrb	r4, [r7, #1]
 800a1ac:	1cbd      	adds	r5, r7, #2
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	2e00      	cmp	r6, #0
 800a1b2:	d05d      	beq.n	800a270 <_strtol_l.isra.0+0xee>
 800a1b4:	2e10      	cmp	r6, #16
 800a1b6:	d109      	bne.n	800a1cc <_strtol_l.isra.0+0x4a>
 800a1b8:	2c30      	cmp	r4, #48	; 0x30
 800a1ba:	d107      	bne.n	800a1cc <_strtol_l.isra.0+0x4a>
 800a1bc:	782b      	ldrb	r3, [r5, #0]
 800a1be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1c2:	2b58      	cmp	r3, #88	; 0x58
 800a1c4:	d14f      	bne.n	800a266 <_strtol_l.isra.0+0xe4>
 800a1c6:	786c      	ldrb	r4, [r5, #1]
 800a1c8:	2610      	movs	r6, #16
 800a1ca:	3502      	adds	r5, #2
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	bf14      	ite	ne
 800a1d0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a1d4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a1d8:	2700      	movs	r7, #0
 800a1da:	fbb1 fcf6 	udiv	ip, r1, r6
 800a1de:	4638      	mov	r0, r7
 800a1e0:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a1e4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a1e8:	2b09      	cmp	r3, #9
 800a1ea:	d817      	bhi.n	800a21c <_strtol_l.isra.0+0x9a>
 800a1ec:	461c      	mov	r4, r3
 800a1ee:	42a6      	cmp	r6, r4
 800a1f0:	dd23      	ble.n	800a23a <_strtol_l.isra.0+0xb8>
 800a1f2:	1c7b      	adds	r3, r7, #1
 800a1f4:	d007      	beq.n	800a206 <_strtol_l.isra.0+0x84>
 800a1f6:	4584      	cmp	ip, r0
 800a1f8:	d31c      	bcc.n	800a234 <_strtol_l.isra.0+0xb2>
 800a1fa:	d101      	bne.n	800a200 <_strtol_l.isra.0+0x7e>
 800a1fc:	45a6      	cmp	lr, r4
 800a1fe:	db19      	blt.n	800a234 <_strtol_l.isra.0+0xb2>
 800a200:	fb00 4006 	mla	r0, r0, r6, r4
 800a204:	2701      	movs	r7, #1
 800a206:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a20a:	e7eb      	b.n	800a1e4 <_strtol_l.isra.0+0x62>
 800a20c:	462f      	mov	r7, r5
 800a20e:	e7bf      	b.n	800a190 <_strtol_l.isra.0+0xe>
 800a210:	2c2b      	cmp	r4, #43	; 0x2b
 800a212:	bf04      	itt	eq
 800a214:	1cbd      	addeq	r5, r7, #2
 800a216:	787c      	ldrbeq	r4, [r7, #1]
 800a218:	461a      	mov	r2, r3
 800a21a:	e7c9      	b.n	800a1b0 <_strtol_l.isra.0+0x2e>
 800a21c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a220:	2b19      	cmp	r3, #25
 800a222:	d801      	bhi.n	800a228 <_strtol_l.isra.0+0xa6>
 800a224:	3c37      	subs	r4, #55	; 0x37
 800a226:	e7e2      	b.n	800a1ee <_strtol_l.isra.0+0x6c>
 800a228:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a22c:	2b19      	cmp	r3, #25
 800a22e:	d804      	bhi.n	800a23a <_strtol_l.isra.0+0xb8>
 800a230:	3c57      	subs	r4, #87	; 0x57
 800a232:	e7dc      	b.n	800a1ee <_strtol_l.isra.0+0x6c>
 800a234:	f04f 37ff 	mov.w	r7, #4294967295
 800a238:	e7e5      	b.n	800a206 <_strtol_l.isra.0+0x84>
 800a23a:	1c7b      	adds	r3, r7, #1
 800a23c:	d108      	bne.n	800a250 <_strtol_l.isra.0+0xce>
 800a23e:	2322      	movs	r3, #34	; 0x22
 800a240:	f8c8 3000 	str.w	r3, [r8]
 800a244:	4608      	mov	r0, r1
 800a246:	f1ba 0f00 	cmp.w	sl, #0
 800a24a:	d107      	bne.n	800a25c <_strtol_l.isra.0+0xda>
 800a24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a250:	b102      	cbz	r2, 800a254 <_strtol_l.isra.0+0xd2>
 800a252:	4240      	negs	r0, r0
 800a254:	f1ba 0f00 	cmp.w	sl, #0
 800a258:	d0f8      	beq.n	800a24c <_strtol_l.isra.0+0xca>
 800a25a:	b10f      	cbz	r7, 800a260 <_strtol_l.isra.0+0xde>
 800a25c:	f105 39ff 	add.w	r9, r5, #4294967295
 800a260:	f8ca 9000 	str.w	r9, [sl]
 800a264:	e7f2      	b.n	800a24c <_strtol_l.isra.0+0xca>
 800a266:	2430      	movs	r4, #48	; 0x30
 800a268:	2e00      	cmp	r6, #0
 800a26a:	d1af      	bne.n	800a1cc <_strtol_l.isra.0+0x4a>
 800a26c:	2608      	movs	r6, #8
 800a26e:	e7ad      	b.n	800a1cc <_strtol_l.isra.0+0x4a>
 800a270:	2c30      	cmp	r4, #48	; 0x30
 800a272:	d0a3      	beq.n	800a1bc <_strtol_l.isra.0+0x3a>
 800a274:	260a      	movs	r6, #10
 800a276:	e7a9      	b.n	800a1cc <_strtol_l.isra.0+0x4a>

0800a278 <strtol>:
 800a278:	4b08      	ldr	r3, [pc, #32]	; (800a29c <strtol+0x24>)
 800a27a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a27c:	681c      	ldr	r4, [r3, #0]
 800a27e:	4d08      	ldr	r5, [pc, #32]	; (800a2a0 <strtol+0x28>)
 800a280:	6a23      	ldr	r3, [r4, #32]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bf08      	it	eq
 800a286:	462b      	moveq	r3, r5
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	4613      	mov	r3, r2
 800a28c:	460a      	mov	r2, r1
 800a28e:	4601      	mov	r1, r0
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff ff76 	bl	800a182 <_strtol_l.isra.0>
 800a296:	b003      	add	sp, #12
 800a298:	bd30      	pop	{r4, r5, pc}
 800a29a:	bf00      	nop
 800a29c:	2000008c 	.word	0x2000008c
 800a2a0:	200000f0 	.word	0x200000f0

0800a2a4 <__swbuf_r>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	460e      	mov	r6, r1
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	b118      	cbz	r0, 800a2b6 <__swbuf_r+0x12>
 800a2ae:	6983      	ldr	r3, [r0, #24]
 800a2b0:	b90b      	cbnz	r3, 800a2b6 <__swbuf_r+0x12>
 800a2b2:	f000 ff81 	bl	800b1b8 <__sinit>
 800a2b6:	4b21      	ldr	r3, [pc, #132]	; (800a33c <__swbuf_r+0x98>)
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	d12a      	bne.n	800a312 <__swbuf_r+0x6e>
 800a2bc:	686c      	ldr	r4, [r5, #4]
 800a2be:	69a3      	ldr	r3, [r4, #24]
 800a2c0:	60a3      	str	r3, [r4, #8]
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	071a      	lsls	r2, r3, #28
 800a2c6:	d52e      	bpl.n	800a326 <__swbuf_r+0x82>
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	b363      	cbz	r3, 800a326 <__swbuf_r+0x82>
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	6820      	ldr	r0, [r4, #0]
 800a2d0:	1ac0      	subs	r0, r0, r3
 800a2d2:	6963      	ldr	r3, [r4, #20]
 800a2d4:	b2f6      	uxtb	r6, r6
 800a2d6:	4283      	cmp	r3, r0
 800a2d8:	4637      	mov	r7, r6
 800a2da:	dc04      	bgt.n	800a2e6 <__swbuf_r+0x42>
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 ff00 	bl	800b0e4 <_fflush_r>
 800a2e4:	bb28      	cbnz	r0, 800a332 <__swbuf_r+0x8e>
 800a2e6:	68a3      	ldr	r3, [r4, #8]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	60a3      	str	r3, [r4, #8]
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	6022      	str	r2, [r4, #0]
 800a2f2:	701e      	strb	r6, [r3, #0]
 800a2f4:	6963      	ldr	r3, [r4, #20]
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	4283      	cmp	r3, r0
 800a2fa:	d004      	beq.n	800a306 <__swbuf_r+0x62>
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	07db      	lsls	r3, r3, #31
 800a300:	d519      	bpl.n	800a336 <__swbuf_r+0x92>
 800a302:	2e0a      	cmp	r6, #10
 800a304:	d117      	bne.n	800a336 <__swbuf_r+0x92>
 800a306:	4621      	mov	r1, r4
 800a308:	4628      	mov	r0, r5
 800a30a:	f000 feeb 	bl	800b0e4 <_fflush_r>
 800a30e:	b190      	cbz	r0, 800a336 <__swbuf_r+0x92>
 800a310:	e00f      	b.n	800a332 <__swbuf_r+0x8e>
 800a312:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <__swbuf_r+0x9c>)
 800a314:	429c      	cmp	r4, r3
 800a316:	d101      	bne.n	800a31c <__swbuf_r+0x78>
 800a318:	68ac      	ldr	r4, [r5, #8]
 800a31a:	e7d0      	b.n	800a2be <__swbuf_r+0x1a>
 800a31c:	4b09      	ldr	r3, [pc, #36]	; (800a344 <__swbuf_r+0xa0>)
 800a31e:	429c      	cmp	r4, r3
 800a320:	bf08      	it	eq
 800a322:	68ec      	ldreq	r4, [r5, #12]
 800a324:	e7cb      	b.n	800a2be <__swbuf_r+0x1a>
 800a326:	4621      	mov	r1, r4
 800a328:	4628      	mov	r0, r5
 800a32a:	f000 f80d 	bl	800a348 <__swsetup_r>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d0cc      	beq.n	800a2cc <__swbuf_r+0x28>
 800a332:	f04f 37ff 	mov.w	r7, #4294967295
 800a336:	4638      	mov	r0, r7
 800a338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	0800c328 	.word	0x0800c328
 800a340:	0800c348 	.word	0x0800c348
 800a344:	0800c308 	.word	0x0800c308

0800a348 <__swsetup_r>:
 800a348:	4b32      	ldr	r3, [pc, #200]	; (800a414 <__swsetup_r+0xcc>)
 800a34a:	b570      	push	{r4, r5, r6, lr}
 800a34c:	681d      	ldr	r5, [r3, #0]
 800a34e:	4606      	mov	r6, r0
 800a350:	460c      	mov	r4, r1
 800a352:	b125      	cbz	r5, 800a35e <__swsetup_r+0x16>
 800a354:	69ab      	ldr	r3, [r5, #24]
 800a356:	b913      	cbnz	r3, 800a35e <__swsetup_r+0x16>
 800a358:	4628      	mov	r0, r5
 800a35a:	f000 ff2d 	bl	800b1b8 <__sinit>
 800a35e:	4b2e      	ldr	r3, [pc, #184]	; (800a418 <__swsetup_r+0xd0>)
 800a360:	429c      	cmp	r4, r3
 800a362:	d10f      	bne.n	800a384 <__swsetup_r+0x3c>
 800a364:	686c      	ldr	r4, [r5, #4]
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	0715      	lsls	r5, r2, #28
 800a36e:	d42c      	bmi.n	800a3ca <__swsetup_r+0x82>
 800a370:	06d0      	lsls	r0, r2, #27
 800a372:	d411      	bmi.n	800a398 <__swsetup_r+0x50>
 800a374:	2209      	movs	r2, #9
 800a376:	6032      	str	r2, [r6, #0]
 800a378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	f04f 30ff 	mov.w	r0, #4294967295
 800a382:	e03e      	b.n	800a402 <__swsetup_r+0xba>
 800a384:	4b25      	ldr	r3, [pc, #148]	; (800a41c <__swsetup_r+0xd4>)
 800a386:	429c      	cmp	r4, r3
 800a388:	d101      	bne.n	800a38e <__swsetup_r+0x46>
 800a38a:	68ac      	ldr	r4, [r5, #8]
 800a38c:	e7eb      	b.n	800a366 <__swsetup_r+0x1e>
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <__swsetup_r+0xd8>)
 800a390:	429c      	cmp	r4, r3
 800a392:	bf08      	it	eq
 800a394:	68ec      	ldreq	r4, [r5, #12]
 800a396:	e7e6      	b.n	800a366 <__swsetup_r+0x1e>
 800a398:	0751      	lsls	r1, r2, #29
 800a39a:	d512      	bpl.n	800a3c2 <__swsetup_r+0x7a>
 800a39c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a39e:	b141      	cbz	r1, 800a3b2 <__swsetup_r+0x6a>
 800a3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a4:	4299      	cmp	r1, r3
 800a3a6:	d002      	beq.n	800a3ae <__swsetup_r+0x66>
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f001 fb13 	bl	800b9d4 <_free_r>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6363      	str	r3, [r4, #52]	; 0x34
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3b8:	81a3      	strh	r3, [r4, #12]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6063      	str	r3, [r4, #4]
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f043 0308 	orr.w	r3, r3, #8
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	b94b      	cbnz	r3, 800a3e2 <__swsetup_r+0x9a>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d8:	d003      	beq.n	800a3e2 <__swsetup_r+0x9a>
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f000 ffab 	bl	800b338 <__smakebuf_r>
 800a3e2:	89a2      	ldrh	r2, [r4, #12]
 800a3e4:	f012 0301 	ands.w	r3, r2, #1
 800a3e8:	d00c      	beq.n	800a404 <__swsetup_r+0xbc>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60a3      	str	r3, [r4, #8]
 800a3ee:	6963      	ldr	r3, [r4, #20]
 800a3f0:	425b      	negs	r3, r3
 800a3f2:	61a3      	str	r3, [r4, #24]
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	b953      	cbnz	r3, 800a40e <__swsetup_r+0xc6>
 800a3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a400:	d1ba      	bne.n	800a378 <__swsetup_r+0x30>
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	0792      	lsls	r2, r2, #30
 800a406:	bf58      	it	pl
 800a408:	6963      	ldrpl	r3, [r4, #20]
 800a40a:	60a3      	str	r3, [r4, #8]
 800a40c:	e7f2      	b.n	800a3f4 <__swsetup_r+0xac>
 800a40e:	2000      	movs	r0, #0
 800a410:	e7f7      	b.n	800a402 <__swsetup_r+0xba>
 800a412:	bf00      	nop
 800a414:	2000008c 	.word	0x2000008c
 800a418:	0800c328 	.word	0x0800c328
 800a41c:	0800c348 	.word	0x0800c348
 800a420:	0800c308 	.word	0x0800c308

0800a424 <quorem>:
 800a424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	6903      	ldr	r3, [r0, #16]
 800a42a:	690c      	ldr	r4, [r1, #16]
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	4680      	mov	r8, r0
 800a430:	f2c0 8082 	blt.w	800a538 <quorem+0x114>
 800a434:	3c01      	subs	r4, #1
 800a436:	f101 0714 	add.w	r7, r1, #20
 800a43a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a43e:	f100 0614 	add.w	r6, r0, #20
 800a442:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a446:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a44a:	eb06 030c 	add.w	r3, r6, ip
 800a44e:	3501      	adds	r5, #1
 800a450:	eb07 090c 	add.w	r9, r7, ip
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	fbb0 f5f5 	udiv	r5, r0, r5
 800a45a:	b395      	cbz	r5, 800a4c2 <quorem+0x9e>
 800a45c:	f04f 0a00 	mov.w	sl, #0
 800a460:	4638      	mov	r0, r7
 800a462:	46b6      	mov	lr, r6
 800a464:	46d3      	mov	fp, sl
 800a466:	f850 2b04 	ldr.w	r2, [r0], #4
 800a46a:	b293      	uxth	r3, r2
 800a46c:	fb05 a303 	mla	r3, r5, r3, sl
 800a470:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a474:	b29b      	uxth	r3, r3
 800a476:	ebab 0303 	sub.w	r3, fp, r3
 800a47a:	0c12      	lsrs	r2, r2, #16
 800a47c:	f8de b000 	ldr.w	fp, [lr]
 800a480:	fb05 a202 	mla	r2, r5, r2, sl
 800a484:	fa13 f38b 	uxtah	r3, r3, fp
 800a488:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a48c:	fa1f fb82 	uxth.w	fp, r2
 800a490:	f8de 2000 	ldr.w	r2, [lr]
 800a494:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a2:	4581      	cmp	r9, r0
 800a4a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a4a8:	f84e 3b04 	str.w	r3, [lr], #4
 800a4ac:	d2db      	bcs.n	800a466 <quorem+0x42>
 800a4ae:	f856 300c 	ldr.w	r3, [r6, ip]
 800a4b2:	b933      	cbnz	r3, 800a4c2 <quorem+0x9e>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	3b04      	subs	r3, #4
 800a4b8:	429e      	cmp	r6, r3
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	d330      	bcc.n	800a520 <quorem+0xfc>
 800a4be:	f8c8 4010 	str.w	r4, [r8, #16]
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	f001 f9b2 	bl	800b82c <__mcmp>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	db25      	blt.n	800a518 <quorem+0xf4>
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f04f 0c00 	mov.w	ip, #0
 800a4d4:	f857 2b04 	ldr.w	r2, [r7], #4
 800a4d8:	f8d0 e000 	ldr.w	lr, [r0]
 800a4dc:	b293      	uxth	r3, r2
 800a4de:	ebac 0303 	sub.w	r3, ip, r3
 800a4e2:	0c12      	lsrs	r2, r2, #16
 800a4e4:	fa13 f38e 	uxtah	r3, r3, lr
 800a4e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a4ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4f6:	45b9      	cmp	r9, r7
 800a4f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4fc:	f840 3b04 	str.w	r3, [r0], #4
 800a500:	d2e8      	bcs.n	800a4d4 <quorem+0xb0>
 800a502:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a506:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a50a:	b92a      	cbnz	r2, 800a518 <quorem+0xf4>
 800a50c:	3b04      	subs	r3, #4
 800a50e:	429e      	cmp	r6, r3
 800a510:	461a      	mov	r2, r3
 800a512:	d30b      	bcc.n	800a52c <quorem+0x108>
 800a514:	f8c8 4010 	str.w	r4, [r8, #16]
 800a518:	4628      	mov	r0, r5
 800a51a:	b003      	add	sp, #12
 800a51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a520:	6812      	ldr	r2, [r2, #0]
 800a522:	3b04      	subs	r3, #4
 800a524:	2a00      	cmp	r2, #0
 800a526:	d1ca      	bne.n	800a4be <quorem+0x9a>
 800a528:	3c01      	subs	r4, #1
 800a52a:	e7c5      	b.n	800a4b8 <quorem+0x94>
 800a52c:	6812      	ldr	r2, [r2, #0]
 800a52e:	3b04      	subs	r3, #4
 800a530:	2a00      	cmp	r2, #0
 800a532:	d1ef      	bne.n	800a514 <quorem+0xf0>
 800a534:	3c01      	subs	r4, #1
 800a536:	e7ea      	b.n	800a50e <quorem+0xea>
 800a538:	2000      	movs	r0, #0
 800a53a:	e7ee      	b.n	800a51a <quorem+0xf6>
 800a53c:	0000      	movs	r0, r0
	...

0800a540 <_dtoa_r>:
 800a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	ec57 6b10 	vmov	r6, r7, d0
 800a548:	b095      	sub	sp, #84	; 0x54
 800a54a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a54c:	9108      	str	r1, [sp, #32]
 800a54e:	4604      	mov	r4, r0
 800a550:	920a      	str	r2, [sp, #40]	; 0x28
 800a552:	9311      	str	r3, [sp, #68]	; 0x44
 800a554:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a558:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a55c:	b93d      	cbnz	r5, 800a56e <_dtoa_r+0x2e>
 800a55e:	2010      	movs	r0, #16
 800a560:	f000 ff2a 	bl	800b3b8 <malloc>
 800a564:	6260      	str	r0, [r4, #36]	; 0x24
 800a566:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a56a:	6005      	str	r5, [r0, #0]
 800a56c:	60c5      	str	r5, [r0, #12]
 800a56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a570:	6819      	ldr	r1, [r3, #0]
 800a572:	b151      	cbz	r1, 800a58a <_dtoa_r+0x4a>
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	604a      	str	r2, [r1, #4]
 800a578:	2301      	movs	r3, #1
 800a57a:	4093      	lsls	r3, r2
 800a57c:	608b      	str	r3, [r1, #8]
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 ff73 	bl	800b46a <_Bfree>
 800a584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a586:	2200      	movs	r2, #0
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	1e3b      	subs	r3, r7, #0
 800a58c:	bfb9      	ittee	lt
 800a58e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a592:	9303      	strlt	r3, [sp, #12]
 800a594:	2300      	movge	r3, #0
 800a596:	f8c8 3000 	strge.w	r3, [r8]
 800a59a:	9d03      	ldr	r5, [sp, #12]
 800a59c:	4bac      	ldr	r3, [pc, #688]	; (800a850 <_dtoa_r+0x310>)
 800a59e:	bfbc      	itt	lt
 800a5a0:	2201      	movlt	r2, #1
 800a5a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a5a6:	43ab      	bics	r3, r5
 800a5a8:	d11b      	bne.n	800a5e2 <_dtoa_r+0xa2>
 800a5aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5ac:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	9b02      	ldr	r3, [sp, #8]
 800a5b4:	b923      	cbnz	r3, 800a5c0 <_dtoa_r+0x80>
 800a5b6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a5ba:	2d00      	cmp	r5, #0
 800a5bc:	f000 84dd 	beq.w	800af7a <_dtoa_r+0xa3a>
 800a5c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a5c2:	b953      	cbnz	r3, 800a5da <_dtoa_r+0x9a>
 800a5c4:	4ba3      	ldr	r3, [pc, #652]	; (800a854 <_dtoa_r+0x314>)
 800a5c6:	e020      	b.n	800a60a <_dtoa_r+0xca>
 800a5c8:	4ba3      	ldr	r3, [pc, #652]	; (800a858 <_dtoa_r+0x318>)
 800a5ca:	9304      	str	r3, [sp, #16]
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	9804      	ldr	r0, [sp, #16]
 800a5d4:	b015      	add	sp, #84	; 0x54
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	4b9e      	ldr	r3, [pc, #632]	; (800a854 <_dtoa_r+0x314>)
 800a5dc:	9304      	str	r3, [sp, #16]
 800a5de:	3303      	adds	r3, #3
 800a5e0:	e7f5      	b.n	800a5ce <_dtoa_r+0x8e>
 800a5e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a5f2:	d10c      	bne.n	800a60e <_dtoa_r+0xce>
 800a5f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 84b9 	beq.w	800af74 <_dtoa_r+0xa34>
 800a602:	4b96      	ldr	r3, [pc, #600]	; (800a85c <_dtoa_r+0x31c>)
 800a604:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	3b01      	subs	r3, #1
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	e7e1      	b.n	800a5d2 <_dtoa_r+0x92>
 800a60e:	a913      	add	r1, sp, #76	; 0x4c
 800a610:	aa12      	add	r2, sp, #72	; 0x48
 800a612:	ed9d 0b04 	vldr	d0, [sp, #16]
 800a616:	4620      	mov	r0, r4
 800a618:	f001 f97f 	bl	800b91a <__d2b>
 800a61c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800a620:	9001      	str	r0, [sp, #4]
 800a622:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a624:	2e00      	cmp	r6, #0
 800a626:	d046      	beq.n	800a6b6 <_dtoa_r+0x176>
 800a628:	9805      	ldr	r0, [sp, #20]
 800a62a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800a62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a632:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800a636:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a63a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800a63e:	2700      	movs	r7, #0
 800a640:	ee07 aa90 	vmov	s15, sl
 800a644:	ec43 2b16 	vmov	d6, r2, r3
 800a648:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a64c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800a838 <_dtoa_r+0x2f8>
 800a650:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a654:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a658:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800a840 <_dtoa_r+0x300>
 800a65c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a660:	eeb0 7b46 	vmov.f64	d7, d6
 800a664:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a848 <_dtoa_r+0x308>
 800a668:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a66c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a670:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a678:	ee16 ba90 	vmov	fp, s13
 800a67c:	d508      	bpl.n	800a690 <_dtoa_r+0x150>
 800a67e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a682:	eeb4 6b47 	vcmp.f64	d6, d7
 800a686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68a:	bf18      	it	ne
 800a68c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a690:	f1bb 0f16 	cmp.w	fp, #22
 800a694:	d834      	bhi.n	800a700 <_dtoa_r+0x1c0>
 800a696:	4b72      	ldr	r3, [pc, #456]	; (800a860 <_dtoa_r+0x320>)
 800a698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a69c:	ed93 7b00 	vldr	d7, [r3]
 800a6a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a6a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ac:	dd01      	ble.n	800a6b2 <_dtoa_r+0x172>
 800a6ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e025      	b.n	800a702 <_dtoa_r+0x1c2>
 800a6b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6b8:	eb01 0a03 	add.w	sl, r1, r3
 800a6bc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800a6c0:	2b20      	cmp	r3, #32
 800a6c2:	dd17      	ble.n	800a6f4 <_dtoa_r+0x1b4>
 800a6c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a6c8:	9a02      	ldr	r2, [sp, #8]
 800a6ca:	409d      	lsls	r5, r3
 800a6cc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800a6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d4:	432b      	orrs	r3, r5
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a6de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a6e6:	9805      	ldr	r0, [sp, #20]
 800a6e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ec:	2701      	movs	r7, #1
 800a6ee:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800a6f2:	e7a5      	b.n	800a640 <_dtoa_r+0x100>
 800a6f4:	9a02      	ldr	r2, [sp, #8]
 800a6f6:	f1c3 0320 	rsb	r3, r3, #32
 800a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fe:	e7ea      	b.n	800a6d6 <_dtoa_r+0x196>
 800a700:	2301      	movs	r3, #1
 800a702:	eba1 0a0a 	sub.w	sl, r1, sl
 800a706:	9310      	str	r3, [sp, #64]	; 0x40
 800a708:	f1ba 0301 	subs.w	r3, sl, #1
 800a70c:	9307      	str	r3, [sp, #28]
 800a70e:	bf43      	ittte	mi
 800a710:	2300      	movmi	r3, #0
 800a712:	f1ca 0a01 	rsbmi	sl, sl, #1
 800a716:	9307      	strmi	r3, [sp, #28]
 800a718:	f04f 0a00 	movpl.w	sl, #0
 800a71c:	f1bb 0f00 	cmp.w	fp, #0
 800a720:	db19      	blt.n	800a756 <_dtoa_r+0x216>
 800a722:	9b07      	ldr	r3, [sp, #28]
 800a724:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a728:	445b      	add	r3, fp
 800a72a:	9307      	str	r3, [sp, #28]
 800a72c:	f04f 0800 	mov.w	r8, #0
 800a730:	9b08      	ldr	r3, [sp, #32]
 800a732:	2b09      	cmp	r3, #9
 800a734:	d866      	bhi.n	800a804 <_dtoa_r+0x2c4>
 800a736:	2b05      	cmp	r3, #5
 800a738:	bfc4      	itt	gt
 800a73a:	3b04      	subgt	r3, #4
 800a73c:	9308      	strgt	r3, [sp, #32]
 800a73e:	9b08      	ldr	r3, [sp, #32]
 800a740:	f1a3 0302 	sub.w	r3, r3, #2
 800a744:	bfcc      	ite	gt
 800a746:	2500      	movgt	r5, #0
 800a748:	2501      	movle	r5, #1
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d866      	bhi.n	800a81c <_dtoa_r+0x2dc>
 800a74e:	e8df f003 	tbb	[pc, r3]
 800a752:	5755      	.short	0x5755
 800a754:	4909      	.short	0x4909
 800a756:	2300      	movs	r3, #0
 800a758:	ebaa 0a0b 	sub.w	sl, sl, fp
 800a75c:	f1cb 0800 	rsb	r8, fp, #0
 800a760:	930b      	str	r3, [sp, #44]	; 0x2c
 800a762:	e7e5      	b.n	800a730 <_dtoa_r+0x1f0>
 800a764:	2301      	movs	r3, #1
 800a766:	9309      	str	r3, [sp, #36]	; 0x24
 800a768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dd59      	ble.n	800a822 <_dtoa_r+0x2e2>
 800a76e:	9306      	str	r3, [sp, #24]
 800a770:	4699      	mov	r9, r3
 800a772:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a774:	2200      	movs	r2, #0
 800a776:	6072      	str	r2, [r6, #4]
 800a778:	2204      	movs	r2, #4
 800a77a:	f102 0014 	add.w	r0, r2, #20
 800a77e:	4298      	cmp	r0, r3
 800a780:	6871      	ldr	r1, [r6, #4]
 800a782:	d953      	bls.n	800a82c <_dtoa_r+0x2ec>
 800a784:	4620      	mov	r0, r4
 800a786:	f000 fe3c 	bl	800b402 <_Balloc>
 800a78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a78c:	6030      	str	r0, [r6, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	f1b9 0f0e 	cmp.w	r9, #14
 800a796:	f200 80c2 	bhi.w	800a91e <_dtoa_r+0x3de>
 800a79a:	2d00      	cmp	r5, #0
 800a79c:	f000 80bf 	beq.w	800a91e <_dtoa_r+0x3de>
 800a7a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7a4:	f1bb 0f00 	cmp.w	fp, #0
 800a7a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a7ac:	f340 80e6 	ble.w	800a97c <_dtoa_r+0x43c>
 800a7b0:	4a2b      	ldr	r2, [pc, #172]	; (800a860 <_dtoa_r+0x320>)
 800a7b2:	f00b 030f 	and.w	r3, fp, #15
 800a7b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a7ba:	ed93 7b00 	vldr	d7, [r3]
 800a7be:	ea4f 132b 	mov.w	r3, fp, asr #4
 800a7c2:	06da      	lsls	r2, r3, #27
 800a7c4:	f140 80d8 	bpl.w	800a978 <_dtoa_r+0x438>
 800a7c8:	4a26      	ldr	r2, [pc, #152]	; (800a864 <_dtoa_r+0x324>)
 800a7ca:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800a7ce:	ed92 6b08 	vldr	d6, [r2, #32]
 800a7d2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a7d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	2203      	movs	r2, #3
 800a7e0:	4920      	ldr	r1, [pc, #128]	; (800a864 <_dtoa_r+0x324>)
 800a7e2:	e04a      	b.n	800a87a <_dtoa_r+0x33a>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ea:	445b      	add	r3, fp
 800a7ec:	f103 0901 	add.w	r9, r3, #1
 800a7f0:	9306      	str	r3, [sp, #24]
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	bfb8      	it	lt
 800a7f8:	2301      	movlt	r3, #1
 800a7fa:	e7ba      	b.n	800a772 <_dtoa_r+0x232>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	e7b2      	b.n	800a766 <_dtoa_r+0x226>
 800a800:	2300      	movs	r3, #0
 800a802:	e7f0      	b.n	800a7e6 <_dtoa_r+0x2a6>
 800a804:	2501      	movs	r5, #1
 800a806:	2300      	movs	r3, #0
 800a808:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800a80c:	f04f 33ff 	mov.w	r3, #4294967295
 800a810:	9306      	str	r3, [sp, #24]
 800a812:	4699      	mov	r9, r3
 800a814:	2200      	movs	r2, #0
 800a816:	2312      	movs	r3, #18
 800a818:	920a      	str	r2, [sp, #40]	; 0x28
 800a81a:	e7aa      	b.n	800a772 <_dtoa_r+0x232>
 800a81c:	2301      	movs	r3, #1
 800a81e:	9309      	str	r3, [sp, #36]	; 0x24
 800a820:	e7f4      	b.n	800a80c <_dtoa_r+0x2cc>
 800a822:	2301      	movs	r3, #1
 800a824:	9306      	str	r3, [sp, #24]
 800a826:	4699      	mov	r9, r3
 800a828:	461a      	mov	r2, r3
 800a82a:	e7f5      	b.n	800a818 <_dtoa_r+0x2d8>
 800a82c:	3101      	adds	r1, #1
 800a82e:	6071      	str	r1, [r6, #4]
 800a830:	0052      	lsls	r2, r2, #1
 800a832:	e7a2      	b.n	800a77a <_dtoa_r+0x23a>
 800a834:	f3af 8000 	nop.w
 800a838:	636f4361 	.word	0x636f4361
 800a83c:	3fd287a7 	.word	0x3fd287a7
 800a840:	8b60c8b3 	.word	0x8b60c8b3
 800a844:	3fc68a28 	.word	0x3fc68a28
 800a848:	509f79fb 	.word	0x509f79fb
 800a84c:	3fd34413 	.word	0x3fd34413
 800a850:	7ff00000 	.word	0x7ff00000
 800a854:	0800c301 	.word	0x0800c301
 800a858:	0800c2f8 	.word	0x0800c2f8
 800a85c:	0800c2d5 	.word	0x0800c2d5
 800a860:	0800c3a0 	.word	0x0800c3a0
 800a864:	0800c378 	.word	0x0800c378
 800a868:	07de      	lsls	r6, r3, #31
 800a86a:	d504      	bpl.n	800a876 <_dtoa_r+0x336>
 800a86c:	ed91 6b00 	vldr	d6, [r1]
 800a870:	3201      	adds	r2, #1
 800a872:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a876:	105b      	asrs	r3, r3, #1
 800a878:	3108      	adds	r1, #8
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f4      	bne.n	800a868 <_dtoa_r+0x328>
 800a87e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a882:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a886:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a88a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f000 80a7 	beq.w	800a9e0 <_dtoa_r+0x4a0>
 800a892:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a896:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a89a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a2:	f140 809d 	bpl.w	800a9e0 <_dtoa_r+0x4a0>
 800a8a6:	f1b9 0f00 	cmp.w	r9, #0
 800a8aa:	f000 8099 	beq.w	800a9e0 <_dtoa_r+0x4a0>
 800a8ae:	9b06      	ldr	r3, [sp, #24]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dd30      	ble.n	800a916 <_dtoa_r+0x3d6>
 800a8b4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a8b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8c0:	9d06      	ldr	r5, [sp, #24]
 800a8c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a8c6:	3201      	adds	r2, #1
 800a8c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a8cc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a8d0:	ee07 2a90 	vmov	s15, r2
 800a8d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a8d8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a8dc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a8e0:	9a03      	ldr	r2, [sp, #12]
 800a8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800a8ea:	2d00      	cmp	r5, #0
 800a8ec:	d17b      	bne.n	800a9e6 <_dtoa_r+0x4a6>
 800a8ee:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a8f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a8f6:	ec41 0b17 	vmov	d7, r0, r1
 800a8fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a902:	f300 8253 	bgt.w	800adac <_dtoa_r+0x86c>
 800a906:	eeb1 7b47 	vneg.f64	d7, d7
 800a90a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a912:	f100 8249 	bmi.w	800ada8 <_dtoa_r+0x868>
 800a916:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a91a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a91e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a920:	2b00      	cmp	r3, #0
 800a922:	f2c0 8119 	blt.w	800ab58 <_dtoa_r+0x618>
 800a926:	f1bb 0f0e 	cmp.w	fp, #14
 800a92a:	f300 8115 	bgt.w	800ab58 <_dtoa_r+0x618>
 800a92e:	4bc3      	ldr	r3, [pc, #780]	; (800ac3c <_dtoa_r+0x6fc>)
 800a930:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a934:	ed93 6b00 	vldr	d6, [r3]
 800a938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f280 80ba 	bge.w	800aab4 <_dtoa_r+0x574>
 800a940:	f1b9 0f00 	cmp.w	r9, #0
 800a944:	f300 80b6 	bgt.w	800aab4 <_dtoa_r+0x574>
 800a948:	f040 822d 	bne.w	800ada6 <_dtoa_r+0x866>
 800a94c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a950:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a954:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a958:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a960:	464d      	mov	r5, r9
 800a962:	464f      	mov	r7, r9
 800a964:	f280 8204 	bge.w	800ad70 <_dtoa_r+0x830>
 800a968:	9b04      	ldr	r3, [sp, #16]
 800a96a:	9a04      	ldr	r2, [sp, #16]
 800a96c:	1c5e      	adds	r6, r3, #1
 800a96e:	2331      	movs	r3, #49	; 0x31
 800a970:	7013      	strb	r3, [r2, #0]
 800a972:	f10b 0b01 	add.w	fp, fp, #1
 800a976:	e1ff      	b.n	800ad78 <_dtoa_r+0x838>
 800a978:	2202      	movs	r2, #2
 800a97a:	e731      	b.n	800a7e0 <_dtoa_r+0x2a0>
 800a97c:	d02e      	beq.n	800a9dc <_dtoa_r+0x49c>
 800a97e:	f1cb 0300 	rsb	r3, fp, #0
 800a982:	4aae      	ldr	r2, [pc, #696]	; (800ac3c <_dtoa_r+0x6fc>)
 800a984:	f003 010f 	and.w	r1, r3, #15
 800a988:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a98c:	ed92 7b00 	vldr	d7, [r2]
 800a990:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800a994:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a998:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a99c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800a9a0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a9a4:	49a6      	ldr	r1, [pc, #664]	; (800ac40 <_dtoa_r+0x700>)
 800a9a6:	111b      	asrs	r3, r3, #4
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	b93b      	cbnz	r3, 800a9be <_dtoa_r+0x47e>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	f43f af6b 	beq.w	800a88a <_dtoa_r+0x34a>
 800a9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9bc:	e765      	b.n	800a88a <_dtoa_r+0x34a>
 800a9be:	07dd      	lsls	r5, r3, #31
 800a9c0:	d509      	bpl.n	800a9d6 <_dtoa_r+0x496>
 800a9c2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a9c6:	ed91 7b00 	vldr	d7, [r1]
 800a9ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a9ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	2001      	movs	r0, #1
 800a9d6:	105b      	asrs	r3, r3, #1
 800a9d8:	3108      	adds	r1, #8
 800a9da:	e7e7      	b.n	800a9ac <_dtoa_r+0x46c>
 800a9dc:	2202      	movs	r2, #2
 800a9de:	e754      	b.n	800a88a <_dtoa_r+0x34a>
 800a9e0:	465b      	mov	r3, fp
 800a9e2:	464d      	mov	r5, r9
 800a9e4:	e770      	b.n	800a8c8 <_dtoa_r+0x388>
 800a9e6:	4a95      	ldr	r2, [pc, #596]	; (800ac3c <_dtoa_r+0x6fc>)
 800a9e8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800a9ec:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9f2:	ec41 0b17 	vmov	d7, r0, r1
 800a9f6:	b35a      	cbz	r2, 800aa50 <_dtoa_r+0x510>
 800a9f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a9fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800aa00:	9e04      	ldr	r6, [sp, #16]
 800aa02:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800aa06:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aa0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aa0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa12:	ee14 2a90 	vmov	r2, s9
 800aa16:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa1a:	3230      	adds	r2, #48	; 0x30
 800aa1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa28:	f806 2b01 	strb.w	r2, [r6], #1
 800aa2c:	d43b      	bmi.n	800aaa6 <_dtoa_r+0x566>
 800aa2e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800aa32:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800aa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3a:	d472      	bmi.n	800ab22 <_dtoa_r+0x5e2>
 800aa3c:	9a04      	ldr	r2, [sp, #16]
 800aa3e:	1ab2      	subs	r2, r6, r2
 800aa40:	4295      	cmp	r5, r2
 800aa42:	f77f af68 	ble.w	800a916 <_dtoa_r+0x3d6>
 800aa46:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aa4a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aa4e:	e7de      	b.n	800aa0e <_dtoa_r+0x4ce>
 800aa50:	9a04      	ldr	r2, [sp, #16]
 800aa52:	ee24 7b07 	vmul.f64	d7, d4, d7
 800aa56:	1956      	adds	r6, r2, r5
 800aa58:	4611      	mov	r1, r2
 800aa5a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aa5e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa62:	ee14 2a90 	vmov	r2, s9
 800aa66:	3230      	adds	r2, #48	; 0x30
 800aa68:	f801 2b01 	strb.w	r2, [r1], #1
 800aa6c:	42b1      	cmp	r1, r6
 800aa6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa72:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa76:	d11a      	bne.n	800aaae <_dtoa_r+0x56e>
 800aa78:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aa7c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aa80:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aa84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa88:	dc4b      	bgt.n	800ab22 <_dtoa_r+0x5e2>
 800aa8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aa8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa96:	f57f af3e 	bpl.w	800a916 <_dtoa_r+0x3d6>
 800aa9a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa9e:	2a30      	cmp	r2, #48	; 0x30
 800aaa0:	f106 31ff 	add.w	r1, r6, #4294967295
 800aaa4:	d001      	beq.n	800aaaa <_dtoa_r+0x56a>
 800aaa6:	469b      	mov	fp, r3
 800aaa8:	e02a      	b.n	800ab00 <_dtoa_r+0x5c0>
 800aaaa:	460e      	mov	r6, r1
 800aaac:	e7f5      	b.n	800aa9a <_dtoa_r+0x55a>
 800aaae:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aab2:	e7d4      	b.n	800aa5e <_dtoa_r+0x51e>
 800aab4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aab8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800aabc:	9e04      	ldr	r6, [sp, #16]
 800aabe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aac2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aac6:	ee15 3a10 	vmov	r3, s10
 800aaca:	3330      	adds	r3, #48	; 0x30
 800aacc:	f806 3b01 	strb.w	r3, [r6], #1
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	1af3      	subs	r3, r6, r3
 800aad4:	4599      	cmp	r9, r3
 800aad6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aada:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aade:	d133      	bne.n	800ab48 <_dtoa_r+0x608>
 800aae0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaec:	dc18      	bgt.n	800ab20 <_dtoa_r+0x5e0>
 800aaee:	eeb4 7b46 	vcmp.f64	d7, d6
 800aaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf6:	d103      	bne.n	800ab00 <_dtoa_r+0x5c0>
 800aaf8:	ee15 3a10 	vmov	r3, s10
 800aafc:	07db      	lsls	r3, r3, #31
 800aafe:	d40f      	bmi.n	800ab20 <_dtoa_r+0x5e0>
 800ab00:	9901      	ldr	r1, [sp, #4]
 800ab02:	4620      	mov	r0, r4
 800ab04:	f000 fcb1 	bl	800b46a <_Bfree>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab0c:	7033      	strb	r3, [r6, #0]
 800ab0e:	f10b 0301 	add.w	r3, fp, #1
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f43f ad5b 	beq.w	800a5d2 <_dtoa_r+0x92>
 800ab1c:	601e      	str	r6, [r3, #0]
 800ab1e:	e558      	b.n	800a5d2 <_dtoa_r+0x92>
 800ab20:	465b      	mov	r3, fp
 800ab22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab26:	2939      	cmp	r1, #57	; 0x39
 800ab28:	f106 32ff 	add.w	r2, r6, #4294967295
 800ab2c:	d106      	bne.n	800ab3c <_dtoa_r+0x5fc>
 800ab2e:	9904      	ldr	r1, [sp, #16]
 800ab30:	4291      	cmp	r1, r2
 800ab32:	d107      	bne.n	800ab44 <_dtoa_r+0x604>
 800ab34:	2230      	movs	r2, #48	; 0x30
 800ab36:	700a      	strb	r2, [r1, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	460a      	mov	r2, r1
 800ab3c:	7811      	ldrb	r1, [r2, #0]
 800ab3e:	3101      	adds	r1, #1
 800ab40:	7011      	strb	r1, [r2, #0]
 800ab42:	e7b0      	b.n	800aaa6 <_dtoa_r+0x566>
 800ab44:	4616      	mov	r6, r2
 800ab46:	e7ec      	b.n	800ab22 <_dtoa_r+0x5e2>
 800ab48:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab54:	d1b3      	bne.n	800aabe <_dtoa_r+0x57e>
 800ab56:	e7d3      	b.n	800ab00 <_dtoa_r+0x5c0>
 800ab58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	f000 808d 	beq.w	800ac7a <_dtoa_r+0x73a>
 800ab60:	9a08      	ldr	r2, [sp, #32]
 800ab62:	2a01      	cmp	r2, #1
 800ab64:	dc72      	bgt.n	800ac4c <_dtoa_r+0x70c>
 800ab66:	2f00      	cmp	r7, #0
 800ab68:	d06c      	beq.n	800ac44 <_dtoa_r+0x704>
 800ab6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab6e:	4645      	mov	r5, r8
 800ab70:	4656      	mov	r6, sl
 800ab72:	9a07      	ldr	r2, [sp, #28]
 800ab74:	2101      	movs	r1, #1
 800ab76:	441a      	add	r2, r3
 800ab78:	4620      	mov	r0, r4
 800ab7a:	449a      	add	sl, r3
 800ab7c:	9207      	str	r2, [sp, #28]
 800ab7e:	f000 fd14 	bl	800b5aa <__i2b>
 800ab82:	4607      	mov	r7, r0
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	dd0b      	ble.n	800aba0 <_dtoa_r+0x660>
 800ab88:	9b07      	ldr	r3, [sp, #28]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dd08      	ble.n	800aba0 <_dtoa_r+0x660>
 800ab8e:	42b3      	cmp	r3, r6
 800ab90:	9a07      	ldr	r2, [sp, #28]
 800ab92:	bfa8      	it	ge
 800ab94:	4633      	movge	r3, r6
 800ab96:	ebaa 0a03 	sub.w	sl, sl, r3
 800ab9a:	1af6      	subs	r6, r6, r3
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	9307      	str	r3, [sp, #28]
 800aba0:	f1b8 0f00 	cmp.w	r8, #0
 800aba4:	d01d      	beq.n	800abe2 <_dtoa_r+0x6a2>
 800aba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d06a      	beq.n	800ac82 <_dtoa_r+0x742>
 800abac:	b18d      	cbz	r5, 800abd2 <_dtoa_r+0x692>
 800abae:	4639      	mov	r1, r7
 800abb0:	462a      	mov	r2, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fd98 	bl	800b6e8 <__pow5mult>
 800abb8:	9a01      	ldr	r2, [sp, #4]
 800abba:	4601      	mov	r1, r0
 800abbc:	4607      	mov	r7, r0
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 fcfc 	bl	800b5bc <__multiply>
 800abc4:	9901      	ldr	r1, [sp, #4]
 800abc6:	900c      	str	r0, [sp, #48]	; 0x30
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fc4e 	bl	800b46a <_Bfree>
 800abce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	ebb8 0205 	subs.w	r2, r8, r5
 800abd6:	d004      	beq.n	800abe2 <_dtoa_r+0x6a2>
 800abd8:	9901      	ldr	r1, [sp, #4]
 800abda:	4620      	mov	r0, r4
 800abdc:	f000 fd84 	bl	800b6e8 <__pow5mult>
 800abe0:	9001      	str	r0, [sp, #4]
 800abe2:	2101      	movs	r1, #1
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 fce0 	bl	800b5aa <__i2b>
 800abea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abec:	4605      	mov	r5, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 81ca 	beq.w	800af88 <_dtoa_r+0xa48>
 800abf4:	461a      	mov	r2, r3
 800abf6:	4601      	mov	r1, r0
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fd75 	bl	800b6e8 <__pow5mult>
 800abfe:	9b08      	ldr	r3, [sp, #32]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	4605      	mov	r5, r0
 800ac04:	dc44      	bgt.n	800ac90 <_dtoa_r+0x750>
 800ac06:	9b02      	ldr	r3, [sp, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d13c      	bne.n	800ac86 <_dtoa_r+0x746>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d137      	bne.n	800ac86 <_dtoa_r+0x746>
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac1c:	0d1b      	lsrs	r3, r3, #20
 800ac1e:	051b      	lsls	r3, r3, #20
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d033      	beq.n	800ac8c <_dtoa_r+0x74c>
 800ac24:	9b07      	ldr	r3, [sp, #28]
 800ac26:	3301      	adds	r3, #1
 800ac28:	f10a 0a01 	add.w	sl, sl, #1
 800ac2c:	9307      	str	r3, [sp, #28]
 800ac2e:	f04f 0801 	mov.w	r8, #1
 800ac32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac34:	bb73      	cbnz	r3, 800ac94 <_dtoa_r+0x754>
 800ac36:	2001      	movs	r0, #1
 800ac38:	e034      	b.n	800aca4 <_dtoa_r+0x764>
 800ac3a:	bf00      	nop
 800ac3c:	0800c3a0 	.word	0x0800c3a0
 800ac40:	0800c378 	.word	0x0800c378
 800ac44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac4a:	e790      	b.n	800ab6e <_dtoa_r+0x62e>
 800ac4c:	f109 35ff 	add.w	r5, r9, #4294967295
 800ac50:	45a8      	cmp	r8, r5
 800ac52:	bfbf      	itttt	lt
 800ac54:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800ac56:	eba5 0808 	sublt.w	r8, r5, r8
 800ac5a:	4443      	addlt	r3, r8
 800ac5c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800ac5e:	bfb6      	itet	lt
 800ac60:	46a8      	movlt	r8, r5
 800ac62:	eba8 0505 	subge.w	r5, r8, r5
 800ac66:	2500      	movlt	r5, #0
 800ac68:	f1b9 0f00 	cmp.w	r9, #0
 800ac6c:	bfb9      	ittee	lt
 800ac6e:	ebaa 0609 	sublt.w	r6, sl, r9
 800ac72:	2300      	movlt	r3, #0
 800ac74:	4656      	movge	r6, sl
 800ac76:	464b      	movge	r3, r9
 800ac78:	e77b      	b.n	800ab72 <_dtoa_r+0x632>
 800ac7a:	4645      	mov	r5, r8
 800ac7c:	4656      	mov	r6, sl
 800ac7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac80:	e780      	b.n	800ab84 <_dtoa_r+0x644>
 800ac82:	4642      	mov	r2, r8
 800ac84:	e7a8      	b.n	800abd8 <_dtoa_r+0x698>
 800ac86:	f04f 0800 	mov.w	r8, #0
 800ac8a:	e7d2      	b.n	800ac32 <_dtoa_r+0x6f2>
 800ac8c:	4698      	mov	r8, r3
 800ac8e:	e7d0      	b.n	800ac32 <_dtoa_r+0x6f2>
 800ac90:	f04f 0800 	mov.w	r8, #0
 800ac94:	692b      	ldr	r3, [r5, #16]
 800ac96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ac9a:	6918      	ldr	r0, [r3, #16]
 800ac9c:	f000 fc37 	bl	800b50e <__hi0bits>
 800aca0:	f1c0 0020 	rsb	r0, r0, #32
 800aca4:	9b07      	ldr	r3, [sp, #28]
 800aca6:	4418      	add	r0, r3
 800aca8:	f010 001f 	ands.w	r0, r0, #31
 800acac:	d047      	beq.n	800ad3e <_dtoa_r+0x7fe>
 800acae:	f1c0 0320 	rsb	r3, r0, #32
 800acb2:	2b04      	cmp	r3, #4
 800acb4:	dd3b      	ble.n	800ad2e <_dtoa_r+0x7ee>
 800acb6:	9b07      	ldr	r3, [sp, #28]
 800acb8:	f1c0 001c 	rsb	r0, r0, #28
 800acbc:	4482      	add	sl, r0
 800acbe:	4406      	add	r6, r0
 800acc0:	4403      	add	r3, r0
 800acc2:	9307      	str	r3, [sp, #28]
 800acc4:	f1ba 0f00 	cmp.w	sl, #0
 800acc8:	dd05      	ble.n	800acd6 <_dtoa_r+0x796>
 800acca:	4652      	mov	r2, sl
 800accc:	9901      	ldr	r1, [sp, #4]
 800acce:	4620      	mov	r0, r4
 800acd0:	f000 fd58 	bl	800b784 <__lshift>
 800acd4:	9001      	str	r0, [sp, #4]
 800acd6:	9b07      	ldr	r3, [sp, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dd05      	ble.n	800ace8 <_dtoa_r+0x7a8>
 800acdc:	4629      	mov	r1, r5
 800acde:	461a      	mov	r2, r3
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fd4f 	bl	800b784 <__lshift>
 800ace6:	4605      	mov	r5, r0
 800ace8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acea:	b353      	cbz	r3, 800ad42 <_dtoa_r+0x802>
 800acec:	4629      	mov	r1, r5
 800acee:	9801      	ldr	r0, [sp, #4]
 800acf0:	f000 fd9c 	bl	800b82c <__mcmp>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	da24      	bge.n	800ad42 <_dtoa_r+0x802>
 800acf8:	2300      	movs	r3, #0
 800acfa:	220a      	movs	r2, #10
 800acfc:	9901      	ldr	r1, [sp, #4]
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 fbca 	bl	800b498 <__multadd>
 800ad04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad06:	9001      	str	r0, [sp, #4]
 800ad08:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 8142 	beq.w	800af96 <_dtoa_r+0xa56>
 800ad12:	2300      	movs	r3, #0
 800ad14:	4639      	mov	r1, r7
 800ad16:	220a      	movs	r2, #10
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 fbbd 	bl	800b498 <__multadd>
 800ad1e:	9b06      	ldr	r3, [sp, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	4607      	mov	r7, r0
 800ad24:	dc4b      	bgt.n	800adbe <_dtoa_r+0x87e>
 800ad26:	9b08      	ldr	r3, [sp, #32]
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	dd48      	ble.n	800adbe <_dtoa_r+0x87e>
 800ad2c:	e011      	b.n	800ad52 <_dtoa_r+0x812>
 800ad2e:	d0c9      	beq.n	800acc4 <_dtoa_r+0x784>
 800ad30:	9a07      	ldr	r2, [sp, #28]
 800ad32:	331c      	adds	r3, #28
 800ad34:	441a      	add	r2, r3
 800ad36:	449a      	add	sl, r3
 800ad38:	441e      	add	r6, r3
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	e7c1      	b.n	800acc2 <_dtoa_r+0x782>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	e7f6      	b.n	800ad30 <_dtoa_r+0x7f0>
 800ad42:	f1b9 0f00 	cmp.w	r9, #0
 800ad46:	dc34      	bgt.n	800adb2 <_dtoa_r+0x872>
 800ad48:	9b08      	ldr	r3, [sp, #32]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	dd31      	ble.n	800adb2 <_dtoa_r+0x872>
 800ad4e:	f8cd 9018 	str.w	r9, [sp, #24]
 800ad52:	9b06      	ldr	r3, [sp, #24]
 800ad54:	b963      	cbnz	r3, 800ad70 <_dtoa_r+0x830>
 800ad56:	4629      	mov	r1, r5
 800ad58:	2205      	movs	r2, #5
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 fb9c 	bl	800b498 <__multadd>
 800ad60:	4601      	mov	r1, r0
 800ad62:	4605      	mov	r5, r0
 800ad64:	9801      	ldr	r0, [sp, #4]
 800ad66:	f000 fd61 	bl	800b82c <__mcmp>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	f73f adfc 	bgt.w	800a968 <_dtoa_r+0x428>
 800ad70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad72:	9e04      	ldr	r6, [sp, #16]
 800ad74:	ea6f 0b03 	mvn.w	fp, r3
 800ad78:	f04f 0900 	mov.w	r9, #0
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 fb73 	bl	800b46a <_Bfree>
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	f43f aebb 	beq.w	800ab00 <_dtoa_r+0x5c0>
 800ad8a:	f1b9 0f00 	cmp.w	r9, #0
 800ad8e:	d005      	beq.n	800ad9c <_dtoa_r+0x85c>
 800ad90:	45b9      	cmp	r9, r7
 800ad92:	d003      	beq.n	800ad9c <_dtoa_r+0x85c>
 800ad94:	4649      	mov	r1, r9
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fb67 	bl	800b46a <_Bfree>
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 fb63 	bl	800b46a <_Bfree>
 800ada4:	e6ac      	b.n	800ab00 <_dtoa_r+0x5c0>
 800ada6:	2500      	movs	r5, #0
 800ada8:	462f      	mov	r7, r5
 800adaa:	e7e1      	b.n	800ad70 <_dtoa_r+0x830>
 800adac:	469b      	mov	fp, r3
 800adae:	462f      	mov	r7, r5
 800adb0:	e5da      	b.n	800a968 <_dtoa_r+0x428>
 800adb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb4:	f8cd 9018 	str.w	r9, [sp, #24]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 80f3 	beq.w	800afa4 <_dtoa_r+0xa64>
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	dd05      	ble.n	800adce <_dtoa_r+0x88e>
 800adc2:	4639      	mov	r1, r7
 800adc4:	4632      	mov	r2, r6
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 fcdc 	bl	800b784 <__lshift>
 800adcc:	4607      	mov	r7, r0
 800adce:	f1b8 0f00 	cmp.w	r8, #0
 800add2:	d04c      	beq.n	800ae6e <_dtoa_r+0x92e>
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fb13 	bl	800b402 <_Balloc>
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	3202      	adds	r2, #2
 800ade0:	4606      	mov	r6, r0
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	f107 010c 	add.w	r1, r7, #12
 800ade8:	300c      	adds	r0, #12
 800adea:	f000 faff 	bl	800b3ec <memcpy>
 800adee:	2201      	movs	r2, #1
 800adf0:	4631      	mov	r1, r6
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 fcc6 	bl	800b784 <__lshift>
 800adf8:	9b02      	ldr	r3, [sp, #8]
 800adfa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	46b9      	mov	r9, r7
 800ae04:	9307      	str	r3, [sp, #28]
 800ae06:	4607      	mov	r7, r0
 800ae08:	4629      	mov	r1, r5
 800ae0a:	9801      	ldr	r0, [sp, #4]
 800ae0c:	f7ff fb0a 	bl	800a424 <quorem>
 800ae10:	4649      	mov	r1, r9
 800ae12:	4606      	mov	r6, r0
 800ae14:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae18:	9801      	ldr	r0, [sp, #4]
 800ae1a:	f000 fd07 	bl	800b82c <__mcmp>
 800ae1e:	463a      	mov	r2, r7
 800ae20:	9002      	str	r0, [sp, #8]
 800ae22:	4629      	mov	r1, r5
 800ae24:	4620      	mov	r0, r4
 800ae26:	f000 fd1b 	bl	800b860 <__mdiff>
 800ae2a:	68c3      	ldr	r3, [r0, #12]
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	bb03      	cbnz	r3, 800ae72 <_dtoa_r+0x932>
 800ae30:	4601      	mov	r1, r0
 800ae32:	9009      	str	r0, [sp, #36]	; 0x24
 800ae34:	9801      	ldr	r0, [sp, #4]
 800ae36:	f000 fcf9 	bl	800b82c <__mcmp>
 800ae3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4620      	mov	r0, r4
 800ae42:	9309      	str	r3, [sp, #36]	; 0x24
 800ae44:	f000 fb11 	bl	800b46a <_Bfree>
 800ae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4a:	b9a3      	cbnz	r3, 800ae76 <_dtoa_r+0x936>
 800ae4c:	9a08      	ldr	r2, [sp, #32]
 800ae4e:	b992      	cbnz	r2, 800ae76 <_dtoa_r+0x936>
 800ae50:	9a07      	ldr	r2, [sp, #28]
 800ae52:	b982      	cbnz	r2, 800ae76 <_dtoa_r+0x936>
 800ae54:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae58:	d029      	beq.n	800aeae <_dtoa_r+0x96e>
 800ae5a:	9b02      	ldr	r3, [sp, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dd01      	ble.n	800ae64 <_dtoa_r+0x924>
 800ae60:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ae64:	f10a 0601 	add.w	r6, sl, #1
 800ae68:	f88a 8000 	strb.w	r8, [sl]
 800ae6c:	e786      	b.n	800ad7c <_dtoa_r+0x83c>
 800ae6e:	4638      	mov	r0, r7
 800ae70:	e7c2      	b.n	800adf8 <_dtoa_r+0x8b8>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e7e3      	b.n	800ae3e <_dtoa_r+0x8fe>
 800ae76:	9a02      	ldr	r2, [sp, #8]
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	db04      	blt.n	800ae86 <_dtoa_r+0x946>
 800ae7c:	d124      	bne.n	800aec8 <_dtoa_r+0x988>
 800ae7e:	9a08      	ldr	r2, [sp, #32]
 800ae80:	bb12      	cbnz	r2, 800aec8 <_dtoa_r+0x988>
 800ae82:	9a07      	ldr	r2, [sp, #28]
 800ae84:	bb02      	cbnz	r2, 800aec8 <_dtoa_r+0x988>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	ddec      	ble.n	800ae64 <_dtoa_r+0x924>
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	9901      	ldr	r1, [sp, #4]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f000 fc78 	bl	800b784 <__lshift>
 800ae94:	4629      	mov	r1, r5
 800ae96:	9001      	str	r0, [sp, #4]
 800ae98:	f000 fcc8 	bl	800b82c <__mcmp>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	dc03      	bgt.n	800aea8 <_dtoa_r+0x968>
 800aea0:	d1e0      	bne.n	800ae64 <_dtoa_r+0x924>
 800aea2:	f018 0f01 	tst.w	r8, #1
 800aea6:	d0dd      	beq.n	800ae64 <_dtoa_r+0x924>
 800aea8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aeac:	d1d8      	bne.n	800ae60 <_dtoa_r+0x920>
 800aeae:	2339      	movs	r3, #57	; 0x39
 800aeb0:	f10a 0601 	add.w	r6, sl, #1
 800aeb4:	f88a 3000 	strb.w	r3, [sl]
 800aeb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aebc:	2b39      	cmp	r3, #57	; 0x39
 800aebe:	f106 32ff 	add.w	r2, r6, #4294967295
 800aec2:	d04c      	beq.n	800af5e <_dtoa_r+0xa1e>
 800aec4:	3301      	adds	r3, #1
 800aec6:	e051      	b.n	800af6c <_dtoa_r+0xa2c>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f10a 0601 	add.w	r6, sl, #1
 800aece:	dd05      	ble.n	800aedc <_dtoa_r+0x99c>
 800aed0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aed4:	d0eb      	beq.n	800aeae <_dtoa_r+0x96e>
 800aed6:	f108 0801 	add.w	r8, r8, #1
 800aeda:	e7c5      	b.n	800ae68 <_dtoa_r+0x928>
 800aedc:	9b04      	ldr	r3, [sp, #16]
 800aede:	9a06      	ldr	r2, [sp, #24]
 800aee0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800aee4:	1af3      	subs	r3, r6, r3
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d021      	beq.n	800af2e <_dtoa_r+0x9ee>
 800aeea:	2300      	movs	r3, #0
 800aeec:	220a      	movs	r2, #10
 800aeee:	9901      	ldr	r1, [sp, #4]
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 fad1 	bl	800b498 <__multadd>
 800aef6:	45b9      	cmp	r9, r7
 800aef8:	9001      	str	r0, [sp, #4]
 800aefa:	f04f 0300 	mov.w	r3, #0
 800aefe:	f04f 020a 	mov.w	r2, #10
 800af02:	4649      	mov	r1, r9
 800af04:	4620      	mov	r0, r4
 800af06:	d105      	bne.n	800af14 <_dtoa_r+0x9d4>
 800af08:	f000 fac6 	bl	800b498 <__multadd>
 800af0c:	4681      	mov	r9, r0
 800af0e:	4607      	mov	r7, r0
 800af10:	46b2      	mov	sl, r6
 800af12:	e779      	b.n	800ae08 <_dtoa_r+0x8c8>
 800af14:	f000 fac0 	bl	800b498 <__multadd>
 800af18:	4639      	mov	r1, r7
 800af1a:	4681      	mov	r9, r0
 800af1c:	2300      	movs	r3, #0
 800af1e:	220a      	movs	r2, #10
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fab9 	bl	800b498 <__multadd>
 800af26:	4607      	mov	r7, r0
 800af28:	e7f2      	b.n	800af10 <_dtoa_r+0x9d0>
 800af2a:	f04f 0900 	mov.w	r9, #0
 800af2e:	2201      	movs	r2, #1
 800af30:	9901      	ldr	r1, [sp, #4]
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fc26 	bl	800b784 <__lshift>
 800af38:	4629      	mov	r1, r5
 800af3a:	9001      	str	r0, [sp, #4]
 800af3c:	f000 fc76 	bl	800b82c <__mcmp>
 800af40:	2800      	cmp	r0, #0
 800af42:	dcb9      	bgt.n	800aeb8 <_dtoa_r+0x978>
 800af44:	d102      	bne.n	800af4c <_dtoa_r+0xa0c>
 800af46:	f018 0f01 	tst.w	r8, #1
 800af4a:	d1b5      	bne.n	800aeb8 <_dtoa_r+0x978>
 800af4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af50:	2b30      	cmp	r3, #48	; 0x30
 800af52:	f106 32ff 	add.w	r2, r6, #4294967295
 800af56:	f47f af11 	bne.w	800ad7c <_dtoa_r+0x83c>
 800af5a:	4616      	mov	r6, r2
 800af5c:	e7f6      	b.n	800af4c <_dtoa_r+0xa0c>
 800af5e:	9b04      	ldr	r3, [sp, #16]
 800af60:	4293      	cmp	r3, r2
 800af62:	d105      	bne.n	800af70 <_dtoa_r+0xa30>
 800af64:	9a04      	ldr	r2, [sp, #16]
 800af66:	f10b 0b01 	add.w	fp, fp, #1
 800af6a:	2331      	movs	r3, #49	; 0x31
 800af6c:	7013      	strb	r3, [r2, #0]
 800af6e:	e705      	b.n	800ad7c <_dtoa_r+0x83c>
 800af70:	4616      	mov	r6, r2
 800af72:	e7a1      	b.n	800aeb8 <_dtoa_r+0x978>
 800af74:	4b16      	ldr	r3, [pc, #88]	; (800afd0 <_dtoa_r+0xa90>)
 800af76:	f7ff bb48 	b.w	800a60a <_dtoa_r+0xca>
 800af7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f47f ab23 	bne.w	800a5c8 <_dtoa_r+0x88>
 800af82:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <_dtoa_r+0xa94>)
 800af84:	f7ff bb41 	b.w	800a60a <_dtoa_r+0xca>
 800af88:	9b08      	ldr	r3, [sp, #32]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	f77f ae3b 	ble.w	800ac06 <_dtoa_r+0x6c6>
 800af90:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800af94:	e64f      	b.n	800ac36 <_dtoa_r+0x6f6>
 800af96:	9b06      	ldr	r3, [sp, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	dc03      	bgt.n	800afa4 <_dtoa_r+0xa64>
 800af9c:	9b08      	ldr	r3, [sp, #32]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	f73f aed7 	bgt.w	800ad52 <_dtoa_r+0x812>
 800afa4:	9e04      	ldr	r6, [sp, #16]
 800afa6:	9801      	ldr	r0, [sp, #4]
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7ff fa3b 	bl	800a424 <quorem>
 800afae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800afb2:	f806 8b01 	strb.w	r8, [r6], #1
 800afb6:	9b04      	ldr	r3, [sp, #16]
 800afb8:	9a06      	ldr	r2, [sp, #24]
 800afba:	1af3      	subs	r3, r6, r3
 800afbc:	429a      	cmp	r2, r3
 800afbe:	ddb4      	ble.n	800af2a <_dtoa_r+0x9ea>
 800afc0:	2300      	movs	r3, #0
 800afc2:	220a      	movs	r2, #10
 800afc4:	9901      	ldr	r1, [sp, #4]
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 fa66 	bl	800b498 <__multadd>
 800afcc:	9001      	str	r0, [sp, #4]
 800afce:	e7ea      	b.n	800afa6 <_dtoa_r+0xa66>
 800afd0:	0800c2d4 	.word	0x0800c2d4
 800afd4:	0800c2f8 	.word	0x0800c2f8

0800afd8 <__sflush_r>:
 800afd8:	898a      	ldrh	r2, [r1, #12]
 800afda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	4605      	mov	r5, r0
 800afe0:	0710      	lsls	r0, r2, #28
 800afe2:	460c      	mov	r4, r1
 800afe4:	d458      	bmi.n	800b098 <__sflush_r+0xc0>
 800afe6:	684b      	ldr	r3, [r1, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	dc05      	bgt.n	800aff8 <__sflush_r+0x20>
 800afec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dc02      	bgt.n	800aff8 <__sflush_r+0x20>
 800aff2:	2000      	movs	r0, #0
 800aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800affa:	2e00      	cmp	r6, #0
 800affc:	d0f9      	beq.n	800aff2 <__sflush_r+0x1a>
 800affe:	2300      	movs	r3, #0
 800b000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b004:	682f      	ldr	r7, [r5, #0]
 800b006:	6a21      	ldr	r1, [r4, #32]
 800b008:	602b      	str	r3, [r5, #0]
 800b00a:	d032      	beq.n	800b072 <__sflush_r+0x9a>
 800b00c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	075a      	lsls	r2, r3, #29
 800b012:	d505      	bpl.n	800b020 <__sflush_r+0x48>
 800b014:	6863      	ldr	r3, [r4, #4]
 800b016:	1ac0      	subs	r0, r0, r3
 800b018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b01a:	b10b      	cbz	r3, 800b020 <__sflush_r+0x48>
 800b01c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b01e:	1ac0      	subs	r0, r0, r3
 800b020:	2300      	movs	r3, #0
 800b022:	4602      	mov	r2, r0
 800b024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b026:	6a21      	ldr	r1, [r4, #32]
 800b028:	4628      	mov	r0, r5
 800b02a:	47b0      	blx	r6
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	d106      	bne.n	800b040 <__sflush_r+0x68>
 800b032:	6829      	ldr	r1, [r5, #0]
 800b034:	291d      	cmp	r1, #29
 800b036:	d848      	bhi.n	800b0ca <__sflush_r+0xf2>
 800b038:	4a29      	ldr	r2, [pc, #164]	; (800b0e0 <__sflush_r+0x108>)
 800b03a:	40ca      	lsrs	r2, r1
 800b03c:	07d6      	lsls	r6, r2, #31
 800b03e:	d544      	bpl.n	800b0ca <__sflush_r+0xf2>
 800b040:	2200      	movs	r2, #0
 800b042:	6062      	str	r2, [r4, #4]
 800b044:	04d9      	lsls	r1, r3, #19
 800b046:	6922      	ldr	r2, [r4, #16]
 800b048:	6022      	str	r2, [r4, #0]
 800b04a:	d504      	bpl.n	800b056 <__sflush_r+0x7e>
 800b04c:	1c42      	adds	r2, r0, #1
 800b04e:	d101      	bne.n	800b054 <__sflush_r+0x7c>
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	b903      	cbnz	r3, 800b056 <__sflush_r+0x7e>
 800b054:	6560      	str	r0, [r4, #84]	; 0x54
 800b056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b058:	602f      	str	r7, [r5, #0]
 800b05a:	2900      	cmp	r1, #0
 800b05c:	d0c9      	beq.n	800aff2 <__sflush_r+0x1a>
 800b05e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b062:	4299      	cmp	r1, r3
 800b064:	d002      	beq.n	800b06c <__sflush_r+0x94>
 800b066:	4628      	mov	r0, r5
 800b068:	f000 fcb4 	bl	800b9d4 <_free_r>
 800b06c:	2000      	movs	r0, #0
 800b06e:	6360      	str	r0, [r4, #52]	; 0x34
 800b070:	e7c0      	b.n	800aff4 <__sflush_r+0x1c>
 800b072:	2301      	movs	r3, #1
 800b074:	4628      	mov	r0, r5
 800b076:	47b0      	blx	r6
 800b078:	1c41      	adds	r1, r0, #1
 800b07a:	d1c8      	bne.n	800b00e <__sflush_r+0x36>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0c5      	beq.n	800b00e <__sflush_r+0x36>
 800b082:	2b1d      	cmp	r3, #29
 800b084:	d001      	beq.n	800b08a <__sflush_r+0xb2>
 800b086:	2b16      	cmp	r3, #22
 800b088:	d101      	bne.n	800b08e <__sflush_r+0xb6>
 800b08a:	602f      	str	r7, [r5, #0]
 800b08c:	e7b1      	b.n	800aff2 <__sflush_r+0x1a>
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	e7ad      	b.n	800aff4 <__sflush_r+0x1c>
 800b098:	690f      	ldr	r7, [r1, #16]
 800b09a:	2f00      	cmp	r7, #0
 800b09c:	d0a9      	beq.n	800aff2 <__sflush_r+0x1a>
 800b09e:	0793      	lsls	r3, r2, #30
 800b0a0:	680e      	ldr	r6, [r1, #0]
 800b0a2:	bf08      	it	eq
 800b0a4:	694b      	ldreq	r3, [r1, #20]
 800b0a6:	600f      	str	r7, [r1, #0]
 800b0a8:	bf18      	it	ne
 800b0aa:	2300      	movne	r3, #0
 800b0ac:	eba6 0807 	sub.w	r8, r6, r7
 800b0b0:	608b      	str	r3, [r1, #8]
 800b0b2:	f1b8 0f00 	cmp.w	r8, #0
 800b0b6:	dd9c      	ble.n	800aff2 <__sflush_r+0x1a>
 800b0b8:	4643      	mov	r3, r8
 800b0ba:	463a      	mov	r2, r7
 800b0bc:	6a21      	ldr	r1, [r4, #32]
 800b0be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	47b0      	blx	r6
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	dc06      	bgt.n	800b0d6 <__sflush_r+0xfe>
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	e78e      	b.n	800aff4 <__sflush_r+0x1c>
 800b0d6:	4407      	add	r7, r0
 800b0d8:	eba8 0800 	sub.w	r8, r8, r0
 800b0dc:	e7e9      	b.n	800b0b2 <__sflush_r+0xda>
 800b0de:	bf00      	nop
 800b0e0:	20400001 	.word	0x20400001

0800b0e4 <_fflush_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	690b      	ldr	r3, [r1, #16]
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	b1db      	cbz	r3, 800b126 <_fflush_r+0x42>
 800b0ee:	b118      	cbz	r0, 800b0f8 <_fflush_r+0x14>
 800b0f0:	6983      	ldr	r3, [r0, #24]
 800b0f2:	b90b      	cbnz	r3, 800b0f8 <_fflush_r+0x14>
 800b0f4:	f000 f860 	bl	800b1b8 <__sinit>
 800b0f8:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <_fflush_r+0x48>)
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	d109      	bne.n	800b112 <_fflush_r+0x2e>
 800b0fe:	686c      	ldr	r4, [r5, #4]
 800b100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b104:	b17b      	cbz	r3, 800b126 <_fflush_r+0x42>
 800b106:	4621      	mov	r1, r4
 800b108:	4628      	mov	r0, r5
 800b10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b10e:	f7ff bf63 	b.w	800afd8 <__sflush_r>
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <_fflush_r+0x4c>)
 800b114:	429c      	cmp	r4, r3
 800b116:	d101      	bne.n	800b11c <_fflush_r+0x38>
 800b118:	68ac      	ldr	r4, [r5, #8]
 800b11a:	e7f1      	b.n	800b100 <_fflush_r+0x1c>
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <_fflush_r+0x50>)
 800b11e:	429c      	cmp	r4, r3
 800b120:	bf08      	it	eq
 800b122:	68ec      	ldreq	r4, [r5, #12]
 800b124:	e7ec      	b.n	800b100 <_fflush_r+0x1c>
 800b126:	2000      	movs	r0, #0
 800b128:	bd38      	pop	{r3, r4, r5, pc}
 800b12a:	bf00      	nop
 800b12c:	0800c328 	.word	0x0800c328
 800b130:	0800c348 	.word	0x0800c348
 800b134:	0800c308 	.word	0x0800c308

0800b138 <std>:
 800b138:	2300      	movs	r3, #0
 800b13a:	b510      	push	{r4, lr}
 800b13c:	4604      	mov	r4, r0
 800b13e:	e9c0 3300 	strd	r3, r3, [r0]
 800b142:	6083      	str	r3, [r0, #8]
 800b144:	8181      	strh	r1, [r0, #12]
 800b146:	6643      	str	r3, [r0, #100]	; 0x64
 800b148:	81c2      	strh	r2, [r0, #14]
 800b14a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b14e:	6183      	str	r3, [r0, #24]
 800b150:	4619      	mov	r1, r3
 800b152:	2208      	movs	r2, #8
 800b154:	305c      	adds	r0, #92	; 0x5c
 800b156:	f7fe fba3 	bl	80098a0 <memset>
 800b15a:	4b05      	ldr	r3, [pc, #20]	; (800b170 <std+0x38>)
 800b15c:	6263      	str	r3, [r4, #36]	; 0x24
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <std+0x3c>)
 800b160:	62a3      	str	r3, [r4, #40]	; 0x28
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <std+0x40>)
 800b164:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <std+0x44>)
 800b168:	6224      	str	r4, [r4, #32]
 800b16a:	6323      	str	r3, [r4, #48]	; 0x30
 800b16c:	bd10      	pop	{r4, pc}
 800b16e:	bf00      	nop
 800b170:	0800bdc5 	.word	0x0800bdc5
 800b174:	0800bde7 	.word	0x0800bde7
 800b178:	0800be1f 	.word	0x0800be1f
 800b17c:	0800be43 	.word	0x0800be43

0800b180 <_cleanup_r>:
 800b180:	4901      	ldr	r1, [pc, #4]	; (800b188 <_cleanup_r+0x8>)
 800b182:	f000 b885 	b.w	800b290 <_fwalk_reent>
 800b186:	bf00      	nop
 800b188:	0800b0e5 	.word	0x0800b0e5

0800b18c <__sfmoreglue>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	1e4a      	subs	r2, r1, #1
 800b190:	2568      	movs	r5, #104	; 0x68
 800b192:	4355      	muls	r5, r2
 800b194:	460e      	mov	r6, r1
 800b196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b19a:	f000 fc69 	bl	800ba70 <_malloc_r>
 800b19e:	4604      	mov	r4, r0
 800b1a0:	b140      	cbz	r0, 800b1b4 <__sfmoreglue+0x28>
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1a8:	300c      	adds	r0, #12
 800b1aa:	60a0      	str	r0, [r4, #8]
 800b1ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1b0:	f7fe fb76 	bl	80098a0 <memset>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}

0800b1b8 <__sinit>:
 800b1b8:	6983      	ldr	r3, [r0, #24]
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	bb33      	cbnz	r3, 800b20e <__sinit+0x56>
 800b1c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b1c4:	6503      	str	r3, [r0, #80]	; 0x50
 800b1c6:	4b12      	ldr	r3, [pc, #72]	; (800b210 <__sinit+0x58>)
 800b1c8:	4a12      	ldr	r2, [pc, #72]	; (800b214 <__sinit+0x5c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6282      	str	r2, [r0, #40]	; 0x28
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	bf04      	itt	eq
 800b1d2:	2301      	moveq	r3, #1
 800b1d4:	6183      	streq	r3, [r0, #24]
 800b1d6:	f000 f81f 	bl	800b218 <__sfp>
 800b1da:	6060      	str	r0, [r4, #4]
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 f81b 	bl	800b218 <__sfp>
 800b1e2:	60a0      	str	r0, [r4, #8]
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f000 f817 	bl	800b218 <__sfp>
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	60e0      	str	r0, [r4, #12]
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	6860      	ldr	r0, [r4, #4]
 800b1f2:	f7ff ffa1 	bl	800b138 <std>
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	2109      	movs	r1, #9
 800b1fa:	68a0      	ldr	r0, [r4, #8]
 800b1fc:	f7ff ff9c 	bl	800b138 <std>
 800b200:	2202      	movs	r2, #2
 800b202:	2112      	movs	r1, #18
 800b204:	68e0      	ldr	r0, [r4, #12]
 800b206:	f7ff ff97 	bl	800b138 <std>
 800b20a:	2301      	movs	r3, #1
 800b20c:	61a3      	str	r3, [r4, #24]
 800b20e:	bd10      	pop	{r4, pc}
 800b210:	0800c2c0 	.word	0x0800c2c0
 800b214:	0800b181 	.word	0x0800b181

0800b218 <__sfp>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	4b1b      	ldr	r3, [pc, #108]	; (800b288 <__sfp+0x70>)
 800b21c:	681e      	ldr	r6, [r3, #0]
 800b21e:	69b3      	ldr	r3, [r6, #24]
 800b220:	4607      	mov	r7, r0
 800b222:	b913      	cbnz	r3, 800b22a <__sfp+0x12>
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff ffc7 	bl	800b1b8 <__sinit>
 800b22a:	3648      	adds	r6, #72	; 0x48
 800b22c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b230:	3b01      	subs	r3, #1
 800b232:	d503      	bpl.n	800b23c <__sfp+0x24>
 800b234:	6833      	ldr	r3, [r6, #0]
 800b236:	b133      	cbz	r3, 800b246 <__sfp+0x2e>
 800b238:	6836      	ldr	r6, [r6, #0]
 800b23a:	e7f7      	b.n	800b22c <__sfp+0x14>
 800b23c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b240:	b16d      	cbz	r5, 800b25e <__sfp+0x46>
 800b242:	3468      	adds	r4, #104	; 0x68
 800b244:	e7f4      	b.n	800b230 <__sfp+0x18>
 800b246:	2104      	movs	r1, #4
 800b248:	4638      	mov	r0, r7
 800b24a:	f7ff ff9f 	bl	800b18c <__sfmoreglue>
 800b24e:	6030      	str	r0, [r6, #0]
 800b250:	2800      	cmp	r0, #0
 800b252:	d1f1      	bne.n	800b238 <__sfp+0x20>
 800b254:	230c      	movs	r3, #12
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	4604      	mov	r4, r0
 800b25a:	4620      	mov	r0, r4
 800b25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <__sfp+0x74>)
 800b260:	6665      	str	r5, [r4, #100]	; 0x64
 800b262:	e9c4 5500 	strd	r5, r5, [r4]
 800b266:	60a5      	str	r5, [r4, #8]
 800b268:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b26c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b270:	2208      	movs	r2, #8
 800b272:	4629      	mov	r1, r5
 800b274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b278:	f7fe fb12 	bl	80098a0 <memset>
 800b27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b284:	e7e9      	b.n	800b25a <__sfp+0x42>
 800b286:	bf00      	nop
 800b288:	0800c2c0 	.word	0x0800c2c0
 800b28c:	ffff0001 	.word	0xffff0001

0800b290 <_fwalk_reent>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	4680      	mov	r8, r0
 800b296:	4689      	mov	r9, r1
 800b298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b29c:	2600      	movs	r6, #0
 800b29e:	b914      	cbnz	r4, 800b2a6 <_fwalk_reent+0x16>
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b2aa:	3f01      	subs	r7, #1
 800b2ac:	d501      	bpl.n	800b2b2 <_fwalk_reent+0x22>
 800b2ae:	6824      	ldr	r4, [r4, #0]
 800b2b0:	e7f5      	b.n	800b29e <_fwalk_reent+0xe>
 800b2b2:	89ab      	ldrh	r3, [r5, #12]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d907      	bls.n	800b2c8 <_fwalk_reent+0x38>
 800b2b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	d003      	beq.n	800b2c8 <_fwalk_reent+0x38>
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	47c8      	blx	r9
 800b2c6:	4306      	orrs	r6, r0
 800b2c8:	3568      	adds	r5, #104	; 0x68
 800b2ca:	e7ee      	b.n	800b2aa <_fwalk_reent+0x1a>

0800b2cc <__locale_ctype_ptr_l>:
 800b2cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b2d0:	4770      	bx	lr
	...

0800b2d4 <_localeconv_r>:
 800b2d4:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <_localeconv_r+0x14>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	6a18      	ldr	r0, [r3, #32]
 800b2da:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <_localeconv_r+0x18>)
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	bf08      	it	eq
 800b2e0:	4618      	moveq	r0, r3
 800b2e2:	30f0      	adds	r0, #240	; 0xf0
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	2000008c 	.word	0x2000008c
 800b2ec:	200000f0 	.word	0x200000f0

0800b2f0 <__swhatbuf_r>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	460e      	mov	r6, r1
 800b2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f8:	2900      	cmp	r1, #0
 800b2fa:	b096      	sub	sp, #88	; 0x58
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	461d      	mov	r5, r3
 800b300:	da07      	bge.n	800b312 <__swhatbuf_r+0x22>
 800b302:	2300      	movs	r3, #0
 800b304:	602b      	str	r3, [r5, #0]
 800b306:	89b3      	ldrh	r3, [r6, #12]
 800b308:	061a      	lsls	r2, r3, #24
 800b30a:	d410      	bmi.n	800b32e <__swhatbuf_r+0x3e>
 800b30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b310:	e00e      	b.n	800b330 <__swhatbuf_r+0x40>
 800b312:	466a      	mov	r2, sp
 800b314:	f000 fdc8 	bl	800bea8 <_fstat_r>
 800b318:	2800      	cmp	r0, #0
 800b31a:	dbf2      	blt.n	800b302 <__swhatbuf_r+0x12>
 800b31c:	9a01      	ldr	r2, [sp, #4]
 800b31e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b322:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b326:	425a      	negs	r2, r3
 800b328:	415a      	adcs	r2, r3
 800b32a:	602a      	str	r2, [r5, #0]
 800b32c:	e7ee      	b.n	800b30c <__swhatbuf_r+0x1c>
 800b32e:	2340      	movs	r3, #64	; 0x40
 800b330:	2000      	movs	r0, #0
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	b016      	add	sp, #88	; 0x58
 800b336:	bd70      	pop	{r4, r5, r6, pc}

0800b338 <__smakebuf_r>:
 800b338:	898b      	ldrh	r3, [r1, #12]
 800b33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b33c:	079d      	lsls	r5, r3, #30
 800b33e:	4606      	mov	r6, r0
 800b340:	460c      	mov	r4, r1
 800b342:	d507      	bpl.n	800b354 <__smakebuf_r+0x1c>
 800b344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	6123      	str	r3, [r4, #16]
 800b34c:	2301      	movs	r3, #1
 800b34e:	6163      	str	r3, [r4, #20]
 800b350:	b002      	add	sp, #8
 800b352:	bd70      	pop	{r4, r5, r6, pc}
 800b354:	ab01      	add	r3, sp, #4
 800b356:	466a      	mov	r2, sp
 800b358:	f7ff ffca 	bl	800b2f0 <__swhatbuf_r>
 800b35c:	9900      	ldr	r1, [sp, #0]
 800b35e:	4605      	mov	r5, r0
 800b360:	4630      	mov	r0, r6
 800b362:	f000 fb85 	bl	800ba70 <_malloc_r>
 800b366:	b948      	cbnz	r0, 800b37c <__smakebuf_r+0x44>
 800b368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b36c:	059a      	lsls	r2, r3, #22
 800b36e:	d4ef      	bmi.n	800b350 <__smakebuf_r+0x18>
 800b370:	f023 0303 	bic.w	r3, r3, #3
 800b374:	f043 0302 	orr.w	r3, r3, #2
 800b378:	81a3      	strh	r3, [r4, #12]
 800b37a:	e7e3      	b.n	800b344 <__smakebuf_r+0xc>
 800b37c:	4b0d      	ldr	r3, [pc, #52]	; (800b3b4 <__smakebuf_r+0x7c>)
 800b37e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	6020      	str	r0, [r4, #0]
 800b384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b388:	81a3      	strh	r3, [r4, #12]
 800b38a:	9b00      	ldr	r3, [sp, #0]
 800b38c:	6163      	str	r3, [r4, #20]
 800b38e:	9b01      	ldr	r3, [sp, #4]
 800b390:	6120      	str	r0, [r4, #16]
 800b392:	b15b      	cbz	r3, 800b3ac <__smakebuf_r+0x74>
 800b394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b398:	4630      	mov	r0, r6
 800b39a:	f000 fd97 	bl	800becc <_isatty_r>
 800b39e:	b128      	cbz	r0, 800b3ac <__smakebuf_r+0x74>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f023 0303 	bic.w	r3, r3, #3
 800b3a6:	f043 0301 	orr.w	r3, r3, #1
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	431d      	orrs	r5, r3
 800b3b0:	81a5      	strh	r5, [r4, #12]
 800b3b2:	e7cd      	b.n	800b350 <__smakebuf_r+0x18>
 800b3b4:	0800b181 	.word	0x0800b181

0800b3b8 <malloc>:
 800b3b8:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <malloc+0xc>)
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	f000 bb57 	b.w	800ba70 <_malloc_r>
 800b3c2:	bf00      	nop
 800b3c4:	2000008c 	.word	0x2000008c

0800b3c8 <__ascii_mbtowc>:
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	b901      	cbnz	r1, 800b3ce <__ascii_mbtowc+0x6>
 800b3cc:	a901      	add	r1, sp, #4
 800b3ce:	b142      	cbz	r2, 800b3e2 <__ascii_mbtowc+0x1a>
 800b3d0:	b14b      	cbz	r3, 800b3e6 <__ascii_mbtowc+0x1e>
 800b3d2:	7813      	ldrb	r3, [r2, #0]
 800b3d4:	600b      	str	r3, [r1, #0]
 800b3d6:	7812      	ldrb	r2, [r2, #0]
 800b3d8:	1c10      	adds	r0, r2, #0
 800b3da:	bf18      	it	ne
 800b3dc:	2001      	movne	r0, #1
 800b3de:	b002      	add	sp, #8
 800b3e0:	4770      	bx	lr
 800b3e2:	4610      	mov	r0, r2
 800b3e4:	e7fb      	b.n	800b3de <__ascii_mbtowc+0x16>
 800b3e6:	f06f 0001 	mvn.w	r0, #1
 800b3ea:	e7f8      	b.n	800b3de <__ascii_mbtowc+0x16>

0800b3ec <memcpy>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	1e43      	subs	r3, r0, #1
 800b3f0:	440a      	add	r2, r1
 800b3f2:	4291      	cmp	r1, r2
 800b3f4:	d100      	bne.n	800b3f8 <memcpy+0xc>
 800b3f6:	bd10      	pop	{r4, pc}
 800b3f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b400:	e7f7      	b.n	800b3f2 <memcpy+0x6>

0800b402 <_Balloc>:
 800b402:	b570      	push	{r4, r5, r6, lr}
 800b404:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b406:	4604      	mov	r4, r0
 800b408:	460e      	mov	r6, r1
 800b40a:	b93d      	cbnz	r5, 800b41c <_Balloc+0x1a>
 800b40c:	2010      	movs	r0, #16
 800b40e:	f7ff ffd3 	bl	800b3b8 <malloc>
 800b412:	6260      	str	r0, [r4, #36]	; 0x24
 800b414:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b418:	6005      	str	r5, [r0, #0]
 800b41a:	60c5      	str	r5, [r0, #12]
 800b41c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b41e:	68eb      	ldr	r3, [r5, #12]
 800b420:	b183      	cbz	r3, 800b444 <_Balloc+0x42>
 800b422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b42a:	b9b8      	cbnz	r0, 800b45c <_Balloc+0x5a>
 800b42c:	2101      	movs	r1, #1
 800b42e:	fa01 f506 	lsl.w	r5, r1, r6
 800b432:	1d6a      	adds	r2, r5, #5
 800b434:	0092      	lsls	r2, r2, #2
 800b436:	4620      	mov	r0, r4
 800b438:	f000 fabe 	bl	800b9b8 <_calloc_r>
 800b43c:	b160      	cbz	r0, 800b458 <_Balloc+0x56>
 800b43e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b442:	e00e      	b.n	800b462 <_Balloc+0x60>
 800b444:	2221      	movs	r2, #33	; 0x21
 800b446:	2104      	movs	r1, #4
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 fab5 	bl	800b9b8 <_calloc_r>
 800b44e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b450:	60e8      	str	r0, [r5, #12]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e4      	bne.n	800b422 <_Balloc+0x20>
 800b458:	2000      	movs	r0, #0
 800b45a:	bd70      	pop	{r4, r5, r6, pc}
 800b45c:	6802      	ldr	r2, [r0, #0]
 800b45e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b462:	2300      	movs	r3, #0
 800b464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b468:	e7f7      	b.n	800b45a <_Balloc+0x58>

0800b46a <_Bfree>:
 800b46a:	b570      	push	{r4, r5, r6, lr}
 800b46c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b46e:	4606      	mov	r6, r0
 800b470:	460d      	mov	r5, r1
 800b472:	b93c      	cbnz	r4, 800b484 <_Bfree+0x1a>
 800b474:	2010      	movs	r0, #16
 800b476:	f7ff ff9f 	bl	800b3b8 <malloc>
 800b47a:	6270      	str	r0, [r6, #36]	; 0x24
 800b47c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b480:	6004      	str	r4, [r0, #0]
 800b482:	60c4      	str	r4, [r0, #12]
 800b484:	b13d      	cbz	r5, 800b496 <_Bfree+0x2c>
 800b486:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b488:	686a      	ldr	r2, [r5, #4]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b490:	6029      	str	r1, [r5, #0]
 800b492:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b496:	bd70      	pop	{r4, r5, r6, pc}

0800b498 <__multadd>:
 800b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49c:	690d      	ldr	r5, [r1, #16]
 800b49e:	461f      	mov	r7, r3
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	f101 0c14 	add.w	ip, r1, #20
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f8dc 0000 	ldr.w	r0, [ip]
 800b4ae:	b281      	uxth	r1, r0
 800b4b0:	fb02 7101 	mla	r1, r2, r1, r7
 800b4b4:	0c0f      	lsrs	r7, r1, #16
 800b4b6:	0c00      	lsrs	r0, r0, #16
 800b4b8:	fb02 7000 	mla	r0, r2, r0, r7
 800b4bc:	b289      	uxth	r1, r1
 800b4be:	3301      	adds	r3, #1
 800b4c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b4c4:	429d      	cmp	r5, r3
 800b4c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b4ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b4ce:	dcec      	bgt.n	800b4aa <__multadd+0x12>
 800b4d0:	b1d7      	cbz	r7, 800b508 <__multadd+0x70>
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	42ab      	cmp	r3, r5
 800b4d6:	dc12      	bgt.n	800b4fe <__multadd+0x66>
 800b4d8:	6861      	ldr	r1, [r4, #4]
 800b4da:	4630      	mov	r0, r6
 800b4dc:	3101      	adds	r1, #1
 800b4de:	f7ff ff90 	bl	800b402 <_Balloc>
 800b4e2:	6922      	ldr	r2, [r4, #16]
 800b4e4:	3202      	adds	r2, #2
 800b4e6:	f104 010c 	add.w	r1, r4, #12
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	0092      	lsls	r2, r2, #2
 800b4ee:	300c      	adds	r0, #12
 800b4f0:	f7ff ff7c 	bl	800b3ec <memcpy>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f7ff ffb7 	bl	800b46a <_Bfree>
 800b4fc:	4644      	mov	r4, r8
 800b4fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b502:	3501      	adds	r5, #1
 800b504:	615f      	str	r7, [r3, #20]
 800b506:	6125      	str	r5, [r4, #16]
 800b508:	4620      	mov	r0, r4
 800b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b50e <__hi0bits>:
 800b50e:	0c02      	lsrs	r2, r0, #16
 800b510:	0412      	lsls	r2, r2, #16
 800b512:	4603      	mov	r3, r0
 800b514:	b9b2      	cbnz	r2, 800b544 <__hi0bits+0x36>
 800b516:	0403      	lsls	r3, r0, #16
 800b518:	2010      	movs	r0, #16
 800b51a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b51e:	bf04      	itt	eq
 800b520:	021b      	lsleq	r3, r3, #8
 800b522:	3008      	addeq	r0, #8
 800b524:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b528:	bf04      	itt	eq
 800b52a:	011b      	lsleq	r3, r3, #4
 800b52c:	3004      	addeq	r0, #4
 800b52e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b532:	bf04      	itt	eq
 800b534:	009b      	lsleq	r3, r3, #2
 800b536:	3002      	addeq	r0, #2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	db06      	blt.n	800b54a <__hi0bits+0x3c>
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	d503      	bpl.n	800b548 <__hi0bits+0x3a>
 800b540:	3001      	adds	r0, #1
 800b542:	4770      	bx	lr
 800b544:	2000      	movs	r0, #0
 800b546:	e7e8      	b.n	800b51a <__hi0bits+0xc>
 800b548:	2020      	movs	r0, #32
 800b54a:	4770      	bx	lr

0800b54c <__lo0bits>:
 800b54c:	6803      	ldr	r3, [r0, #0]
 800b54e:	f013 0207 	ands.w	r2, r3, #7
 800b552:	4601      	mov	r1, r0
 800b554:	d00b      	beq.n	800b56e <__lo0bits+0x22>
 800b556:	07da      	lsls	r2, r3, #31
 800b558:	d423      	bmi.n	800b5a2 <__lo0bits+0x56>
 800b55a:	0798      	lsls	r0, r3, #30
 800b55c:	bf49      	itett	mi
 800b55e:	085b      	lsrmi	r3, r3, #1
 800b560:	089b      	lsrpl	r3, r3, #2
 800b562:	2001      	movmi	r0, #1
 800b564:	600b      	strmi	r3, [r1, #0]
 800b566:	bf5c      	itt	pl
 800b568:	600b      	strpl	r3, [r1, #0]
 800b56a:	2002      	movpl	r0, #2
 800b56c:	4770      	bx	lr
 800b56e:	b298      	uxth	r0, r3
 800b570:	b9a8      	cbnz	r0, 800b59e <__lo0bits+0x52>
 800b572:	0c1b      	lsrs	r3, r3, #16
 800b574:	2010      	movs	r0, #16
 800b576:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b57a:	bf04      	itt	eq
 800b57c:	0a1b      	lsreq	r3, r3, #8
 800b57e:	3008      	addeq	r0, #8
 800b580:	071a      	lsls	r2, r3, #28
 800b582:	bf04      	itt	eq
 800b584:	091b      	lsreq	r3, r3, #4
 800b586:	3004      	addeq	r0, #4
 800b588:	079a      	lsls	r2, r3, #30
 800b58a:	bf04      	itt	eq
 800b58c:	089b      	lsreq	r3, r3, #2
 800b58e:	3002      	addeq	r0, #2
 800b590:	07da      	lsls	r2, r3, #31
 800b592:	d402      	bmi.n	800b59a <__lo0bits+0x4e>
 800b594:	085b      	lsrs	r3, r3, #1
 800b596:	d006      	beq.n	800b5a6 <__lo0bits+0x5a>
 800b598:	3001      	adds	r0, #1
 800b59a:	600b      	str	r3, [r1, #0]
 800b59c:	4770      	bx	lr
 800b59e:	4610      	mov	r0, r2
 800b5a0:	e7e9      	b.n	800b576 <__lo0bits+0x2a>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	4770      	bx	lr
 800b5a6:	2020      	movs	r0, #32
 800b5a8:	4770      	bx	lr

0800b5aa <__i2b>:
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	f7ff ff27 	bl	800b402 <_Balloc>
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	6144      	str	r4, [r0, #20]
 800b5b8:	6102      	str	r2, [r0, #16]
 800b5ba:	bd10      	pop	{r4, pc}

0800b5bc <__multiply>:
 800b5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	690a      	ldr	r2, [r1, #16]
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	bfb8      	it	lt
 800b5ca:	460b      	movlt	r3, r1
 800b5cc:	4688      	mov	r8, r1
 800b5ce:	bfbc      	itt	lt
 800b5d0:	46a0      	movlt	r8, r4
 800b5d2:	461c      	movlt	r4, r3
 800b5d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5e4:	eb07 0609 	add.w	r6, r7, r9
 800b5e8:	42b3      	cmp	r3, r6
 800b5ea:	bfb8      	it	lt
 800b5ec:	3101      	addlt	r1, #1
 800b5ee:	f7ff ff08 	bl	800b402 <_Balloc>
 800b5f2:	f100 0514 	add.w	r5, r0, #20
 800b5f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4573      	cmp	r3, lr
 800b600:	d316      	bcc.n	800b630 <__multiply+0x74>
 800b602:	f104 0214 	add.w	r2, r4, #20
 800b606:	f108 0114 	add.w	r1, r8, #20
 800b60a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b60e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	9201      	str	r2, [sp, #4]
 800b618:	4293      	cmp	r3, r2
 800b61a:	d80c      	bhi.n	800b636 <__multiply+0x7a>
 800b61c:	2e00      	cmp	r6, #0
 800b61e:	dd03      	ble.n	800b628 <__multiply+0x6c>
 800b620:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b624:	2b00      	cmp	r3, #0
 800b626:	d05d      	beq.n	800b6e4 <__multiply+0x128>
 800b628:	6106      	str	r6, [r0, #16]
 800b62a:	b003      	add	sp, #12
 800b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b630:	f843 2b04 	str.w	r2, [r3], #4
 800b634:	e7e3      	b.n	800b5fe <__multiply+0x42>
 800b636:	f8b2 b000 	ldrh.w	fp, [r2]
 800b63a:	f1bb 0f00 	cmp.w	fp, #0
 800b63e:	d023      	beq.n	800b688 <__multiply+0xcc>
 800b640:	4689      	mov	r9, r1
 800b642:	46ac      	mov	ip, r5
 800b644:	f04f 0800 	mov.w	r8, #0
 800b648:	f859 4b04 	ldr.w	r4, [r9], #4
 800b64c:	f8dc a000 	ldr.w	sl, [ip]
 800b650:	b2a3      	uxth	r3, r4
 800b652:	fa1f fa8a 	uxth.w	sl, sl
 800b656:	fb0b a303 	mla	r3, fp, r3, sl
 800b65a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b65e:	f8dc 4000 	ldr.w	r4, [ip]
 800b662:	4443      	add	r3, r8
 800b664:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b668:	fb0b 840a 	mla	r4, fp, sl, r8
 800b66c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b670:	46e2      	mov	sl, ip
 800b672:	b29b      	uxth	r3, r3
 800b674:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b678:	454f      	cmp	r7, r9
 800b67a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b67e:	f84a 3b04 	str.w	r3, [sl], #4
 800b682:	d82b      	bhi.n	800b6dc <__multiply+0x120>
 800b684:	f8cc 8004 	str.w	r8, [ip, #4]
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b68e:	3204      	adds	r2, #4
 800b690:	f1ba 0f00 	cmp.w	sl, #0
 800b694:	d020      	beq.n	800b6d8 <__multiply+0x11c>
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	4689      	mov	r9, r1
 800b69a:	46a8      	mov	r8, r5
 800b69c:	f04f 0b00 	mov.w	fp, #0
 800b6a0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b6a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b6a8:	fb0a 440c 	mla	r4, sl, ip, r4
 800b6ac:	445c      	add	r4, fp
 800b6ae:	46c4      	mov	ip, r8
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6b6:	f84c 3b04 	str.w	r3, [ip], #4
 800b6ba:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b6c2:	0c1b      	lsrs	r3, r3, #16
 800b6c4:	fb0a b303 	mla	r3, sl, r3, fp
 800b6c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b6cc:	454f      	cmp	r7, r9
 800b6ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b6d2:	d805      	bhi.n	800b6e0 <__multiply+0x124>
 800b6d4:	f8c8 3004 	str.w	r3, [r8, #4]
 800b6d8:	3504      	adds	r5, #4
 800b6da:	e79b      	b.n	800b614 <__multiply+0x58>
 800b6dc:	46d4      	mov	ip, sl
 800b6de:	e7b3      	b.n	800b648 <__multiply+0x8c>
 800b6e0:	46e0      	mov	r8, ip
 800b6e2:	e7dd      	b.n	800b6a0 <__multiply+0xe4>
 800b6e4:	3e01      	subs	r6, #1
 800b6e6:	e799      	b.n	800b61c <__multiply+0x60>

0800b6e8 <__pow5mult>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	4615      	mov	r5, r2
 800b6ee:	f012 0203 	ands.w	r2, r2, #3
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	d007      	beq.n	800b708 <__pow5mult+0x20>
 800b6f8:	3a01      	subs	r2, #1
 800b6fa:	4c21      	ldr	r4, [pc, #132]	; (800b780 <__pow5mult+0x98>)
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b702:	f7ff fec9 	bl	800b498 <__multadd>
 800b706:	4607      	mov	r7, r0
 800b708:	10ad      	asrs	r5, r5, #2
 800b70a:	d035      	beq.n	800b778 <__pow5mult+0x90>
 800b70c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b70e:	b93c      	cbnz	r4, 800b720 <__pow5mult+0x38>
 800b710:	2010      	movs	r0, #16
 800b712:	f7ff fe51 	bl	800b3b8 <malloc>
 800b716:	6270      	str	r0, [r6, #36]	; 0x24
 800b718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b71c:	6004      	str	r4, [r0, #0]
 800b71e:	60c4      	str	r4, [r0, #12]
 800b720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b728:	b94c      	cbnz	r4, 800b73e <__pow5mult+0x56>
 800b72a:	f240 2171 	movw	r1, #625	; 0x271
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff ff3b 	bl	800b5aa <__i2b>
 800b734:	2300      	movs	r3, #0
 800b736:	f8c8 0008 	str.w	r0, [r8, #8]
 800b73a:	4604      	mov	r4, r0
 800b73c:	6003      	str	r3, [r0, #0]
 800b73e:	f04f 0800 	mov.w	r8, #0
 800b742:	07eb      	lsls	r3, r5, #31
 800b744:	d50a      	bpl.n	800b75c <__pow5mult+0x74>
 800b746:	4639      	mov	r1, r7
 800b748:	4622      	mov	r2, r4
 800b74a:	4630      	mov	r0, r6
 800b74c:	f7ff ff36 	bl	800b5bc <__multiply>
 800b750:	4639      	mov	r1, r7
 800b752:	4681      	mov	r9, r0
 800b754:	4630      	mov	r0, r6
 800b756:	f7ff fe88 	bl	800b46a <_Bfree>
 800b75a:	464f      	mov	r7, r9
 800b75c:	106d      	asrs	r5, r5, #1
 800b75e:	d00b      	beq.n	800b778 <__pow5mult+0x90>
 800b760:	6820      	ldr	r0, [r4, #0]
 800b762:	b938      	cbnz	r0, 800b774 <__pow5mult+0x8c>
 800b764:	4622      	mov	r2, r4
 800b766:	4621      	mov	r1, r4
 800b768:	4630      	mov	r0, r6
 800b76a:	f7ff ff27 	bl	800b5bc <__multiply>
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	f8c0 8000 	str.w	r8, [r0]
 800b774:	4604      	mov	r4, r0
 800b776:	e7e4      	b.n	800b742 <__pow5mult+0x5a>
 800b778:	4638      	mov	r0, r7
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	bf00      	nop
 800b780:	0800c468 	.word	0x0800c468

0800b784 <__lshift>:
 800b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b78e:	6923      	ldr	r3, [r4, #16]
 800b790:	6849      	ldr	r1, [r1, #4]
 800b792:	eb0a 0903 	add.w	r9, sl, r3
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	4607      	mov	r7, r0
 800b79a:	4616      	mov	r6, r2
 800b79c:	f109 0501 	add.w	r5, r9, #1
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	db32      	blt.n	800b80a <__lshift+0x86>
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	f7ff fe2c 	bl	800b402 <_Balloc>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	f100 0114 	add.w	r1, r0, #20
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4553      	cmp	r3, sl
 800b7b6:	db2b      	blt.n	800b810 <__lshift+0x8c>
 800b7b8:	6920      	ldr	r0, [r4, #16]
 800b7ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7be:	f104 0314 	add.w	r3, r4, #20
 800b7c2:	f016 021f 	ands.w	r2, r6, #31
 800b7c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7ce:	d025      	beq.n	800b81c <__lshift+0x98>
 800b7d0:	f1c2 0e20 	rsb	lr, r2, #32
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	681e      	ldr	r6, [r3, #0]
 800b7d8:	468a      	mov	sl, r1
 800b7da:	4096      	lsls	r6, r2
 800b7dc:	4330      	orrs	r0, r6
 800b7de:	f84a 0b04 	str.w	r0, [sl], #4
 800b7e2:	f853 0b04 	ldr.w	r0, [r3], #4
 800b7e6:	459c      	cmp	ip, r3
 800b7e8:	fa20 f00e 	lsr.w	r0, r0, lr
 800b7ec:	d814      	bhi.n	800b818 <__lshift+0x94>
 800b7ee:	6048      	str	r0, [r1, #4]
 800b7f0:	b108      	cbz	r0, 800b7f6 <__lshift+0x72>
 800b7f2:	f109 0502 	add.w	r5, r9, #2
 800b7f6:	3d01      	subs	r5, #1
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f8c8 5010 	str.w	r5, [r8, #16]
 800b7fe:	4621      	mov	r1, r4
 800b800:	f7ff fe33 	bl	800b46a <_Bfree>
 800b804:	4640      	mov	r0, r8
 800b806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80a:	3101      	adds	r1, #1
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	e7c7      	b.n	800b7a0 <__lshift+0x1c>
 800b810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b814:	3301      	adds	r3, #1
 800b816:	e7cd      	b.n	800b7b4 <__lshift+0x30>
 800b818:	4651      	mov	r1, sl
 800b81a:	e7dc      	b.n	800b7d6 <__lshift+0x52>
 800b81c:	3904      	subs	r1, #4
 800b81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b822:	f841 2f04 	str.w	r2, [r1, #4]!
 800b826:	459c      	cmp	ip, r3
 800b828:	d8f9      	bhi.n	800b81e <__lshift+0x9a>
 800b82a:	e7e4      	b.n	800b7f6 <__lshift+0x72>

0800b82c <__mcmp>:
 800b82c:	6903      	ldr	r3, [r0, #16]
 800b82e:	690a      	ldr	r2, [r1, #16]
 800b830:	1a9b      	subs	r3, r3, r2
 800b832:	b530      	push	{r4, r5, lr}
 800b834:	d10c      	bne.n	800b850 <__mcmp+0x24>
 800b836:	0092      	lsls	r2, r2, #2
 800b838:	3014      	adds	r0, #20
 800b83a:	3114      	adds	r1, #20
 800b83c:	1884      	adds	r4, r0, r2
 800b83e:	4411      	add	r1, r2
 800b840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b848:	4295      	cmp	r5, r2
 800b84a:	d003      	beq.n	800b854 <__mcmp+0x28>
 800b84c:	d305      	bcc.n	800b85a <__mcmp+0x2e>
 800b84e:	2301      	movs	r3, #1
 800b850:	4618      	mov	r0, r3
 800b852:	bd30      	pop	{r4, r5, pc}
 800b854:	42a0      	cmp	r0, r4
 800b856:	d3f3      	bcc.n	800b840 <__mcmp+0x14>
 800b858:	e7fa      	b.n	800b850 <__mcmp+0x24>
 800b85a:	f04f 33ff 	mov.w	r3, #4294967295
 800b85e:	e7f7      	b.n	800b850 <__mcmp+0x24>

0800b860 <__mdiff>:
 800b860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	460d      	mov	r5, r1
 800b866:	4607      	mov	r7, r0
 800b868:	4611      	mov	r1, r2
 800b86a:	4628      	mov	r0, r5
 800b86c:	4614      	mov	r4, r2
 800b86e:	f7ff ffdd 	bl	800b82c <__mcmp>
 800b872:	1e06      	subs	r6, r0, #0
 800b874:	d108      	bne.n	800b888 <__mdiff+0x28>
 800b876:	4631      	mov	r1, r6
 800b878:	4638      	mov	r0, r7
 800b87a:	f7ff fdc2 	bl	800b402 <_Balloc>
 800b87e:	2301      	movs	r3, #1
 800b880:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b888:	bfa4      	itt	ge
 800b88a:	4623      	movge	r3, r4
 800b88c:	462c      	movge	r4, r5
 800b88e:	4638      	mov	r0, r7
 800b890:	6861      	ldr	r1, [r4, #4]
 800b892:	bfa6      	itte	ge
 800b894:	461d      	movge	r5, r3
 800b896:	2600      	movge	r6, #0
 800b898:	2601      	movlt	r6, #1
 800b89a:	f7ff fdb2 	bl	800b402 <_Balloc>
 800b89e:	692b      	ldr	r3, [r5, #16]
 800b8a0:	60c6      	str	r6, [r0, #12]
 800b8a2:	6926      	ldr	r6, [r4, #16]
 800b8a4:	f105 0914 	add.w	r9, r5, #20
 800b8a8:	f104 0214 	add.w	r2, r4, #20
 800b8ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b8b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b8b4:	f100 0514 	add.w	r5, r0, #20
 800b8b8:	f04f 0e00 	mov.w	lr, #0
 800b8bc:	f852 ab04 	ldr.w	sl, [r2], #4
 800b8c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b8c4:	fa1e f18a 	uxtah	r1, lr, sl
 800b8c8:	b2a3      	uxth	r3, r4
 800b8ca:	1ac9      	subs	r1, r1, r3
 800b8cc:	0c23      	lsrs	r3, r4, #16
 800b8ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b8d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8d6:	b289      	uxth	r1, r1
 800b8d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b8dc:	45c8      	cmp	r8, r9
 800b8de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8e2:	4694      	mov	ip, r2
 800b8e4:	f845 3b04 	str.w	r3, [r5], #4
 800b8e8:	d8e8      	bhi.n	800b8bc <__mdiff+0x5c>
 800b8ea:	45bc      	cmp	ip, r7
 800b8ec:	d304      	bcc.n	800b8f8 <__mdiff+0x98>
 800b8ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b8f2:	b183      	cbz	r3, 800b916 <__mdiff+0xb6>
 800b8f4:	6106      	str	r6, [r0, #16]
 800b8f6:	e7c5      	b.n	800b884 <__mdiff+0x24>
 800b8f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8fc:	fa1e f381 	uxtah	r3, lr, r1
 800b900:	141a      	asrs	r2, r3, #16
 800b902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b906:	b29b      	uxth	r3, r3
 800b908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b90c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b910:	f845 3b04 	str.w	r3, [r5], #4
 800b914:	e7e9      	b.n	800b8ea <__mdiff+0x8a>
 800b916:	3e01      	subs	r6, #1
 800b918:	e7e9      	b.n	800b8ee <__mdiff+0x8e>

0800b91a <__d2b>:
 800b91a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b91e:	460e      	mov	r6, r1
 800b920:	2101      	movs	r1, #1
 800b922:	ec59 8b10 	vmov	r8, r9, d0
 800b926:	4615      	mov	r5, r2
 800b928:	f7ff fd6b 	bl	800b402 <_Balloc>
 800b92c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b930:	4607      	mov	r7, r0
 800b932:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b936:	bb34      	cbnz	r4, 800b986 <__d2b+0x6c>
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	f1b8 0300 	subs.w	r3, r8, #0
 800b93e:	d027      	beq.n	800b990 <__d2b+0x76>
 800b940:	a802      	add	r0, sp, #8
 800b942:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b946:	f7ff fe01 	bl	800b54c <__lo0bits>
 800b94a:	9900      	ldr	r1, [sp, #0]
 800b94c:	b1f0      	cbz	r0, 800b98c <__d2b+0x72>
 800b94e:	9a01      	ldr	r2, [sp, #4]
 800b950:	f1c0 0320 	rsb	r3, r0, #32
 800b954:	fa02 f303 	lsl.w	r3, r2, r3
 800b958:	430b      	orrs	r3, r1
 800b95a:	40c2      	lsrs	r2, r0
 800b95c:	617b      	str	r3, [r7, #20]
 800b95e:	9201      	str	r2, [sp, #4]
 800b960:	9b01      	ldr	r3, [sp, #4]
 800b962:	61bb      	str	r3, [r7, #24]
 800b964:	2b00      	cmp	r3, #0
 800b966:	bf14      	ite	ne
 800b968:	2102      	movne	r1, #2
 800b96a:	2101      	moveq	r1, #1
 800b96c:	6139      	str	r1, [r7, #16]
 800b96e:	b1c4      	cbz	r4, 800b9a2 <__d2b+0x88>
 800b970:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b974:	4404      	add	r4, r0
 800b976:	6034      	str	r4, [r6, #0]
 800b978:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b97c:	6028      	str	r0, [r5, #0]
 800b97e:	4638      	mov	r0, r7
 800b980:	b003      	add	sp, #12
 800b982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b98a:	e7d5      	b.n	800b938 <__d2b+0x1e>
 800b98c:	6179      	str	r1, [r7, #20]
 800b98e:	e7e7      	b.n	800b960 <__d2b+0x46>
 800b990:	a801      	add	r0, sp, #4
 800b992:	f7ff fddb 	bl	800b54c <__lo0bits>
 800b996:	9b01      	ldr	r3, [sp, #4]
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	2101      	movs	r1, #1
 800b99c:	6139      	str	r1, [r7, #16]
 800b99e:	3020      	adds	r0, #32
 800b9a0:	e7e5      	b.n	800b96e <__d2b+0x54>
 800b9a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b9a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9aa:	6030      	str	r0, [r6, #0]
 800b9ac:	6918      	ldr	r0, [r3, #16]
 800b9ae:	f7ff fdae 	bl	800b50e <__hi0bits>
 800b9b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b9b6:	e7e1      	b.n	800b97c <__d2b+0x62>

0800b9b8 <_calloc_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	fb02 f401 	mul.w	r4, r2, r1
 800b9be:	4621      	mov	r1, r4
 800b9c0:	f000 f856 	bl	800ba70 <_malloc_r>
 800b9c4:	4605      	mov	r5, r0
 800b9c6:	b118      	cbz	r0, 800b9d0 <_calloc_r+0x18>
 800b9c8:	4622      	mov	r2, r4
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	f7fd ff68 	bl	80098a0 <memset>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}

0800b9d4 <_free_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	2900      	cmp	r1, #0
 800b9da:	d045      	beq.n	800ba68 <_free_r+0x94>
 800b9dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e0:	1f0c      	subs	r4, r1, #4
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	bfb8      	it	lt
 800b9e6:	18e4      	addlt	r4, r4, r3
 800b9e8:	f000 fa92 	bl	800bf10 <__malloc_lock>
 800b9ec:	4a1f      	ldr	r2, [pc, #124]	; (800ba6c <_free_r+0x98>)
 800b9ee:	6813      	ldr	r3, [r2, #0]
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	b933      	cbnz	r3, 800ba02 <_free_r+0x2e>
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	6014      	str	r4, [r2, #0]
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9fe:	f000 ba88 	b.w	800bf12 <__malloc_unlock>
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	d90c      	bls.n	800ba20 <_free_r+0x4c>
 800ba06:	6821      	ldr	r1, [r4, #0]
 800ba08:	1862      	adds	r2, r4, r1
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	bf04      	itt	eq
 800ba0e:	681a      	ldreq	r2, [r3, #0]
 800ba10:	685b      	ldreq	r3, [r3, #4]
 800ba12:	6063      	str	r3, [r4, #4]
 800ba14:	bf04      	itt	eq
 800ba16:	1852      	addeq	r2, r2, r1
 800ba18:	6022      	streq	r2, [r4, #0]
 800ba1a:	6004      	str	r4, [r0, #0]
 800ba1c:	e7ec      	b.n	800b9f8 <_free_r+0x24>
 800ba1e:	4613      	mov	r3, r2
 800ba20:	685a      	ldr	r2, [r3, #4]
 800ba22:	b10a      	cbz	r2, 800ba28 <_free_r+0x54>
 800ba24:	42a2      	cmp	r2, r4
 800ba26:	d9fa      	bls.n	800ba1e <_free_r+0x4a>
 800ba28:	6819      	ldr	r1, [r3, #0]
 800ba2a:	1858      	adds	r0, r3, r1
 800ba2c:	42a0      	cmp	r0, r4
 800ba2e:	d10b      	bne.n	800ba48 <_free_r+0x74>
 800ba30:	6820      	ldr	r0, [r4, #0]
 800ba32:	4401      	add	r1, r0
 800ba34:	1858      	adds	r0, r3, r1
 800ba36:	4282      	cmp	r2, r0
 800ba38:	6019      	str	r1, [r3, #0]
 800ba3a:	d1dd      	bne.n	800b9f8 <_free_r+0x24>
 800ba3c:	6810      	ldr	r0, [r2, #0]
 800ba3e:	6852      	ldr	r2, [r2, #4]
 800ba40:	605a      	str	r2, [r3, #4]
 800ba42:	4401      	add	r1, r0
 800ba44:	6019      	str	r1, [r3, #0]
 800ba46:	e7d7      	b.n	800b9f8 <_free_r+0x24>
 800ba48:	d902      	bls.n	800ba50 <_free_r+0x7c>
 800ba4a:	230c      	movs	r3, #12
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	e7d3      	b.n	800b9f8 <_free_r+0x24>
 800ba50:	6820      	ldr	r0, [r4, #0]
 800ba52:	1821      	adds	r1, r4, r0
 800ba54:	428a      	cmp	r2, r1
 800ba56:	bf04      	itt	eq
 800ba58:	6811      	ldreq	r1, [r2, #0]
 800ba5a:	6852      	ldreq	r2, [r2, #4]
 800ba5c:	6062      	str	r2, [r4, #4]
 800ba5e:	bf04      	itt	eq
 800ba60:	1809      	addeq	r1, r1, r0
 800ba62:	6021      	streq	r1, [r4, #0]
 800ba64:	605c      	str	r4, [r3, #4]
 800ba66:	e7c7      	b.n	800b9f8 <_free_r+0x24>
 800ba68:	bd38      	pop	{r3, r4, r5, pc}
 800ba6a:	bf00      	nop
 800ba6c:	200002a0 	.word	0x200002a0

0800ba70 <_malloc_r>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	1ccd      	adds	r5, r1, #3
 800ba74:	f025 0503 	bic.w	r5, r5, #3
 800ba78:	3508      	adds	r5, #8
 800ba7a:	2d0c      	cmp	r5, #12
 800ba7c:	bf38      	it	cc
 800ba7e:	250c      	movcc	r5, #12
 800ba80:	2d00      	cmp	r5, #0
 800ba82:	4606      	mov	r6, r0
 800ba84:	db01      	blt.n	800ba8a <_malloc_r+0x1a>
 800ba86:	42a9      	cmp	r1, r5
 800ba88:	d903      	bls.n	800ba92 <_malloc_r+0x22>
 800ba8a:	230c      	movs	r3, #12
 800ba8c:	6033      	str	r3, [r6, #0]
 800ba8e:	2000      	movs	r0, #0
 800ba90:	bd70      	pop	{r4, r5, r6, pc}
 800ba92:	f000 fa3d 	bl	800bf10 <__malloc_lock>
 800ba96:	4a21      	ldr	r2, [pc, #132]	; (800bb1c <_malloc_r+0xac>)
 800ba98:	6814      	ldr	r4, [r2, #0]
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	b991      	cbnz	r1, 800bac4 <_malloc_r+0x54>
 800ba9e:	4c20      	ldr	r4, [pc, #128]	; (800bb20 <_malloc_r+0xb0>)
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	b91b      	cbnz	r3, 800baac <_malloc_r+0x3c>
 800baa4:	4630      	mov	r0, r6
 800baa6:	f000 f97d 	bl	800bda4 <_sbrk_r>
 800baaa:	6020      	str	r0, [r4, #0]
 800baac:	4629      	mov	r1, r5
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 f978 	bl	800bda4 <_sbrk_r>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d124      	bne.n	800bb02 <_malloc_r+0x92>
 800bab8:	230c      	movs	r3, #12
 800baba:	6033      	str	r3, [r6, #0]
 800babc:	4630      	mov	r0, r6
 800babe:	f000 fa28 	bl	800bf12 <__malloc_unlock>
 800bac2:	e7e4      	b.n	800ba8e <_malloc_r+0x1e>
 800bac4:	680b      	ldr	r3, [r1, #0]
 800bac6:	1b5b      	subs	r3, r3, r5
 800bac8:	d418      	bmi.n	800bafc <_malloc_r+0x8c>
 800baca:	2b0b      	cmp	r3, #11
 800bacc:	d90f      	bls.n	800baee <_malloc_r+0x7e>
 800bace:	600b      	str	r3, [r1, #0]
 800bad0:	50cd      	str	r5, [r1, r3]
 800bad2:	18cc      	adds	r4, r1, r3
 800bad4:	4630      	mov	r0, r6
 800bad6:	f000 fa1c 	bl	800bf12 <__malloc_unlock>
 800bada:	f104 000b 	add.w	r0, r4, #11
 800bade:	1d23      	adds	r3, r4, #4
 800bae0:	f020 0007 	bic.w	r0, r0, #7
 800bae4:	1ac3      	subs	r3, r0, r3
 800bae6:	d0d3      	beq.n	800ba90 <_malloc_r+0x20>
 800bae8:	425a      	negs	r2, r3
 800baea:	50e2      	str	r2, [r4, r3]
 800baec:	e7d0      	b.n	800ba90 <_malloc_r+0x20>
 800baee:	428c      	cmp	r4, r1
 800baf0:	684b      	ldr	r3, [r1, #4]
 800baf2:	bf16      	itet	ne
 800baf4:	6063      	strne	r3, [r4, #4]
 800baf6:	6013      	streq	r3, [r2, #0]
 800baf8:	460c      	movne	r4, r1
 800bafa:	e7eb      	b.n	800bad4 <_malloc_r+0x64>
 800bafc:	460c      	mov	r4, r1
 800bafe:	6849      	ldr	r1, [r1, #4]
 800bb00:	e7cc      	b.n	800ba9c <_malloc_r+0x2c>
 800bb02:	1cc4      	adds	r4, r0, #3
 800bb04:	f024 0403 	bic.w	r4, r4, #3
 800bb08:	42a0      	cmp	r0, r4
 800bb0a:	d005      	beq.n	800bb18 <_malloc_r+0xa8>
 800bb0c:	1a21      	subs	r1, r4, r0
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f000 f948 	bl	800bda4 <_sbrk_r>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d0cf      	beq.n	800bab8 <_malloc_r+0x48>
 800bb18:	6025      	str	r5, [r4, #0]
 800bb1a:	e7db      	b.n	800bad4 <_malloc_r+0x64>
 800bb1c:	200002a0 	.word	0x200002a0
 800bb20:	200002a4 	.word	0x200002a4

0800bb24 <__sfputc_r>:
 800bb24:	6893      	ldr	r3, [r2, #8]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	b410      	push	{r4}
 800bb2c:	6093      	str	r3, [r2, #8]
 800bb2e:	da08      	bge.n	800bb42 <__sfputc_r+0x1e>
 800bb30:	6994      	ldr	r4, [r2, #24]
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	db01      	blt.n	800bb3a <__sfputc_r+0x16>
 800bb36:	290a      	cmp	r1, #10
 800bb38:	d103      	bne.n	800bb42 <__sfputc_r+0x1e>
 800bb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3e:	f7fe bbb1 	b.w	800a2a4 <__swbuf_r>
 800bb42:	6813      	ldr	r3, [r2, #0]
 800bb44:	1c58      	adds	r0, r3, #1
 800bb46:	6010      	str	r0, [r2, #0]
 800bb48:	7019      	strb	r1, [r3, #0]
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <__sfputs_r>:
 800bb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb54:	4606      	mov	r6, r0
 800bb56:	460f      	mov	r7, r1
 800bb58:	4614      	mov	r4, r2
 800bb5a:	18d5      	adds	r5, r2, r3
 800bb5c:	42ac      	cmp	r4, r5
 800bb5e:	d101      	bne.n	800bb64 <__sfputs_r+0x12>
 800bb60:	2000      	movs	r0, #0
 800bb62:	e007      	b.n	800bb74 <__sfputs_r+0x22>
 800bb64:	463a      	mov	r2, r7
 800bb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7ff ffda 	bl	800bb24 <__sfputc_r>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d1f3      	bne.n	800bb5c <__sfputs_r+0xa>
 800bb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb78 <_vfiprintf_r>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	b09d      	sub	sp, #116	; 0x74
 800bb80:	4617      	mov	r7, r2
 800bb82:	461d      	mov	r5, r3
 800bb84:	4606      	mov	r6, r0
 800bb86:	b118      	cbz	r0, 800bb90 <_vfiprintf_r+0x18>
 800bb88:	6983      	ldr	r3, [r0, #24]
 800bb8a:	b90b      	cbnz	r3, 800bb90 <_vfiprintf_r+0x18>
 800bb8c:	f7ff fb14 	bl	800b1b8 <__sinit>
 800bb90:	4b7c      	ldr	r3, [pc, #496]	; (800bd84 <_vfiprintf_r+0x20c>)
 800bb92:	429c      	cmp	r4, r3
 800bb94:	d158      	bne.n	800bc48 <_vfiprintf_r+0xd0>
 800bb96:	6874      	ldr	r4, [r6, #4]
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	0718      	lsls	r0, r3, #28
 800bb9c:	d55e      	bpl.n	800bc5c <_vfiprintf_r+0xe4>
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d05b      	beq.n	800bc5c <_vfiprintf_r+0xe4>
 800bba4:	2300      	movs	r3, #0
 800bba6:	9309      	str	r3, [sp, #36]	; 0x24
 800bba8:	2320      	movs	r3, #32
 800bbaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbae:	2330      	movs	r3, #48	; 0x30
 800bbb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbb4:	9503      	str	r5, [sp, #12]
 800bbb6:	f04f 0b01 	mov.w	fp, #1
 800bbba:	46b8      	mov	r8, r7
 800bbbc:	4645      	mov	r5, r8
 800bbbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bbc2:	b10b      	cbz	r3, 800bbc8 <_vfiprintf_r+0x50>
 800bbc4:	2b25      	cmp	r3, #37	; 0x25
 800bbc6:	d154      	bne.n	800bc72 <_vfiprintf_r+0xfa>
 800bbc8:	ebb8 0a07 	subs.w	sl, r8, r7
 800bbcc:	d00b      	beq.n	800bbe6 <_vfiprintf_r+0x6e>
 800bbce:	4653      	mov	r3, sl
 800bbd0:	463a      	mov	r2, r7
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff ffbc 	bl	800bb52 <__sfputs_r>
 800bbda:	3001      	adds	r0, #1
 800bbdc:	f000 80c2 	beq.w	800bd64 <_vfiprintf_r+0x1ec>
 800bbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe2:	4453      	add	r3, sl
 800bbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe6:	f898 3000 	ldrb.w	r3, [r8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80ba 	beq.w	800bd64 <_vfiprintf_r+0x1ec>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	9307      	str	r3, [sp, #28]
 800bbfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc02:	931a      	str	r3, [sp, #104]	; 0x68
 800bc04:	46a8      	mov	r8, r5
 800bc06:	2205      	movs	r2, #5
 800bc08:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bc0c:	485e      	ldr	r0, [pc, #376]	; (800bd88 <_vfiprintf_r+0x210>)
 800bc0e:	f7f4 fb2f 	bl	8000270 <memchr>
 800bc12:	9b04      	ldr	r3, [sp, #16]
 800bc14:	bb78      	cbnz	r0, 800bc76 <_vfiprintf_r+0xfe>
 800bc16:	06d9      	lsls	r1, r3, #27
 800bc18:	bf44      	itt	mi
 800bc1a:	2220      	movmi	r2, #32
 800bc1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc20:	071a      	lsls	r2, r3, #28
 800bc22:	bf44      	itt	mi
 800bc24:	222b      	movmi	r2, #43	; 0x2b
 800bc26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc2a:	782a      	ldrb	r2, [r5, #0]
 800bc2c:	2a2a      	cmp	r2, #42	; 0x2a
 800bc2e:	d02a      	beq.n	800bc86 <_vfiprintf_r+0x10e>
 800bc30:	9a07      	ldr	r2, [sp, #28]
 800bc32:	46a8      	mov	r8, r5
 800bc34:	2000      	movs	r0, #0
 800bc36:	250a      	movs	r5, #10
 800bc38:	4641      	mov	r1, r8
 800bc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc3e:	3b30      	subs	r3, #48	; 0x30
 800bc40:	2b09      	cmp	r3, #9
 800bc42:	d969      	bls.n	800bd18 <_vfiprintf_r+0x1a0>
 800bc44:	b360      	cbz	r0, 800bca0 <_vfiprintf_r+0x128>
 800bc46:	e024      	b.n	800bc92 <_vfiprintf_r+0x11a>
 800bc48:	4b50      	ldr	r3, [pc, #320]	; (800bd8c <_vfiprintf_r+0x214>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d101      	bne.n	800bc52 <_vfiprintf_r+0xda>
 800bc4e:	68b4      	ldr	r4, [r6, #8]
 800bc50:	e7a2      	b.n	800bb98 <_vfiprintf_r+0x20>
 800bc52:	4b4f      	ldr	r3, [pc, #316]	; (800bd90 <_vfiprintf_r+0x218>)
 800bc54:	429c      	cmp	r4, r3
 800bc56:	bf08      	it	eq
 800bc58:	68f4      	ldreq	r4, [r6, #12]
 800bc5a:	e79d      	b.n	800bb98 <_vfiprintf_r+0x20>
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f7fe fb72 	bl	800a348 <__swsetup_r>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d09d      	beq.n	800bba4 <_vfiprintf_r+0x2c>
 800bc68:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6c:	b01d      	add	sp, #116	; 0x74
 800bc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc72:	46a8      	mov	r8, r5
 800bc74:	e7a2      	b.n	800bbbc <_vfiprintf_r+0x44>
 800bc76:	4a44      	ldr	r2, [pc, #272]	; (800bd88 <_vfiprintf_r+0x210>)
 800bc78:	1a80      	subs	r0, r0, r2
 800bc7a:	fa0b f000 	lsl.w	r0, fp, r0
 800bc7e:	4318      	orrs	r0, r3
 800bc80:	9004      	str	r0, [sp, #16]
 800bc82:	4645      	mov	r5, r8
 800bc84:	e7be      	b.n	800bc04 <_vfiprintf_r+0x8c>
 800bc86:	9a03      	ldr	r2, [sp, #12]
 800bc88:	1d11      	adds	r1, r2, #4
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	9103      	str	r1, [sp, #12]
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	db01      	blt.n	800bc96 <_vfiprintf_r+0x11e>
 800bc92:	9207      	str	r2, [sp, #28]
 800bc94:	e004      	b.n	800bca0 <_vfiprintf_r+0x128>
 800bc96:	4252      	negs	r2, r2
 800bc98:	f043 0302 	orr.w	r3, r3, #2
 800bc9c:	9207      	str	r2, [sp, #28]
 800bc9e:	9304      	str	r3, [sp, #16]
 800bca0:	f898 3000 	ldrb.w	r3, [r8]
 800bca4:	2b2e      	cmp	r3, #46	; 0x2e
 800bca6:	d10e      	bne.n	800bcc6 <_vfiprintf_r+0x14e>
 800bca8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bcac:	2b2a      	cmp	r3, #42	; 0x2a
 800bcae:	d138      	bne.n	800bd22 <_vfiprintf_r+0x1aa>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	1d1a      	adds	r2, r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	9203      	str	r2, [sp, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bfb8      	it	lt
 800bcbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcc0:	f108 0802 	add.w	r8, r8, #2
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	4d33      	ldr	r5, [pc, #204]	; (800bd94 <_vfiprintf_r+0x21c>)
 800bcc8:	f898 1000 	ldrb.w	r1, [r8]
 800bccc:	2203      	movs	r2, #3
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f7f4 face 	bl	8000270 <memchr>
 800bcd4:	b140      	cbz	r0, 800bce8 <_vfiprintf_r+0x170>
 800bcd6:	2340      	movs	r3, #64	; 0x40
 800bcd8:	1b40      	subs	r0, r0, r5
 800bcda:	fa03 f000 	lsl.w	r0, r3, r0
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	4303      	orrs	r3, r0
 800bce2:	f108 0801 	add.w	r8, r8, #1
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	f898 1000 	ldrb.w	r1, [r8]
 800bcec:	482a      	ldr	r0, [pc, #168]	; (800bd98 <_vfiprintf_r+0x220>)
 800bcee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcf2:	2206      	movs	r2, #6
 800bcf4:	f108 0701 	add.w	r7, r8, #1
 800bcf8:	f7f4 faba 	bl	8000270 <memchr>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d037      	beq.n	800bd70 <_vfiprintf_r+0x1f8>
 800bd00:	4b26      	ldr	r3, [pc, #152]	; (800bd9c <_vfiprintf_r+0x224>)
 800bd02:	bb1b      	cbnz	r3, 800bd4c <_vfiprintf_r+0x1d4>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	3307      	adds	r3, #7
 800bd08:	f023 0307 	bic.w	r3, r3, #7
 800bd0c:	3308      	adds	r3, #8
 800bd0e:	9303      	str	r3, [sp, #12]
 800bd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd12:	444b      	add	r3, r9
 800bd14:	9309      	str	r3, [sp, #36]	; 0x24
 800bd16:	e750      	b.n	800bbba <_vfiprintf_r+0x42>
 800bd18:	fb05 3202 	mla	r2, r5, r2, r3
 800bd1c:	2001      	movs	r0, #1
 800bd1e:	4688      	mov	r8, r1
 800bd20:	e78a      	b.n	800bc38 <_vfiprintf_r+0xc0>
 800bd22:	2300      	movs	r3, #0
 800bd24:	f108 0801 	add.w	r8, r8, #1
 800bd28:	9305      	str	r3, [sp, #20]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	250a      	movs	r5, #10
 800bd2e:	4640      	mov	r0, r8
 800bd30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd34:	3a30      	subs	r2, #48	; 0x30
 800bd36:	2a09      	cmp	r2, #9
 800bd38:	d903      	bls.n	800bd42 <_vfiprintf_r+0x1ca>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0c3      	beq.n	800bcc6 <_vfiprintf_r+0x14e>
 800bd3e:	9105      	str	r1, [sp, #20]
 800bd40:	e7c1      	b.n	800bcc6 <_vfiprintf_r+0x14e>
 800bd42:	fb05 2101 	mla	r1, r5, r1, r2
 800bd46:	2301      	movs	r3, #1
 800bd48:	4680      	mov	r8, r0
 800bd4a:	e7f0      	b.n	800bd2e <_vfiprintf_r+0x1b6>
 800bd4c:	ab03      	add	r3, sp, #12
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	4622      	mov	r2, r4
 800bd52:	4b13      	ldr	r3, [pc, #76]	; (800bda0 <_vfiprintf_r+0x228>)
 800bd54:	a904      	add	r1, sp, #16
 800bd56:	4630      	mov	r0, r6
 800bd58:	f7fd fe32 	bl	80099c0 <_printf_float>
 800bd5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd60:	4681      	mov	r9, r0
 800bd62:	d1d5      	bne.n	800bd10 <_vfiprintf_r+0x198>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	065b      	lsls	r3, r3, #25
 800bd68:	f53f af7e 	bmi.w	800bc68 <_vfiprintf_r+0xf0>
 800bd6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd6e:	e77d      	b.n	800bc6c <_vfiprintf_r+0xf4>
 800bd70:	ab03      	add	r3, sp, #12
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	4622      	mov	r2, r4
 800bd76:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <_vfiprintf_r+0x228>)
 800bd78:	a904      	add	r1, sp, #16
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7fe f8c2 	bl	8009f04 <_printf_i>
 800bd80:	e7ec      	b.n	800bd5c <_vfiprintf_r+0x1e4>
 800bd82:	bf00      	nop
 800bd84:	0800c328 	.word	0x0800c328
 800bd88:	0800c474 	.word	0x0800c474
 800bd8c:	0800c348 	.word	0x0800c348
 800bd90:	0800c308 	.word	0x0800c308
 800bd94:	0800c47a 	.word	0x0800c47a
 800bd98:	0800c47e 	.word	0x0800c47e
 800bd9c:	080099c1 	.word	0x080099c1
 800bda0:	0800bb53 	.word	0x0800bb53

0800bda4 <_sbrk_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4c06      	ldr	r4, [pc, #24]	; (800bdc0 <_sbrk_r+0x1c>)
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4605      	mov	r5, r0
 800bdac:	4608      	mov	r0, r1
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	f7fd fc38 	bl	8009624 <_sbrk>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d102      	bne.n	800bdbe <_sbrk_r+0x1a>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	b103      	cbz	r3, 800bdbe <_sbrk_r+0x1a>
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	20007558 	.word	0x20007558

0800bdc4 <__sread>:
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdcc:	f000 f8a2 	bl	800bf14 <_read_r>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	bfab      	itete	ge
 800bdd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdd6:	89a3      	ldrhlt	r3, [r4, #12]
 800bdd8:	181b      	addge	r3, r3, r0
 800bdda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdde:	bfac      	ite	ge
 800bde0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bde2:	81a3      	strhlt	r3, [r4, #12]
 800bde4:	bd10      	pop	{r4, pc}

0800bde6 <__swrite>:
 800bde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdea:	461f      	mov	r7, r3
 800bdec:	898b      	ldrh	r3, [r1, #12]
 800bdee:	05db      	lsls	r3, r3, #23
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	4616      	mov	r6, r2
 800bdf6:	d505      	bpl.n	800be04 <__swrite+0x1e>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be00:	f000 f874 	bl	800beec <_lseek_r>
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be0e:	81a3      	strh	r3, [r4, #12]
 800be10:	4632      	mov	r2, r6
 800be12:	463b      	mov	r3, r7
 800be14:	4628      	mov	r0, r5
 800be16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be1a:	f000 b823 	b.w	800be64 <_write_r>

0800be1e <__sseek>:
 800be1e:	b510      	push	{r4, lr}
 800be20:	460c      	mov	r4, r1
 800be22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be26:	f000 f861 	bl	800beec <_lseek_r>
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	bf15      	itete	ne
 800be30:	6560      	strne	r0, [r4, #84]	; 0x54
 800be32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be3a:	81a3      	strheq	r3, [r4, #12]
 800be3c:	bf18      	it	ne
 800be3e:	81a3      	strhne	r3, [r4, #12]
 800be40:	bd10      	pop	{r4, pc}

0800be42 <__sclose>:
 800be42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be46:	f000 b81f 	b.w	800be88 <_close_r>

0800be4a <__ascii_wctomb>:
 800be4a:	b149      	cbz	r1, 800be60 <__ascii_wctomb+0x16>
 800be4c:	2aff      	cmp	r2, #255	; 0xff
 800be4e:	bf85      	ittet	hi
 800be50:	238a      	movhi	r3, #138	; 0x8a
 800be52:	6003      	strhi	r3, [r0, #0]
 800be54:	700a      	strbls	r2, [r1, #0]
 800be56:	f04f 30ff 	movhi.w	r0, #4294967295
 800be5a:	bf98      	it	ls
 800be5c:	2001      	movls	r0, #1
 800be5e:	4770      	bx	lr
 800be60:	4608      	mov	r0, r1
 800be62:	4770      	bx	lr

0800be64 <_write_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4c07      	ldr	r4, [pc, #28]	; (800be84 <_write_r+0x20>)
 800be68:	4605      	mov	r5, r0
 800be6a:	4608      	mov	r0, r1
 800be6c:	4611      	mov	r1, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	6022      	str	r2, [r4, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	f7fd fb86 	bl	8009584 <_write>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d102      	bne.n	800be82 <_write_r+0x1e>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	b103      	cbz	r3, 800be82 <_write_r+0x1e>
 800be80:	602b      	str	r3, [r5, #0]
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	20007558 	.word	0x20007558

0800be88 <_close_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4c06      	ldr	r4, [pc, #24]	; (800bea4 <_close_r+0x1c>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4605      	mov	r5, r0
 800be90:	4608      	mov	r0, r1
 800be92:	6023      	str	r3, [r4, #0]
 800be94:	f7fd fb92 	bl	80095bc <_close>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_close_r+0x1a>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_close_r+0x1a>
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	20007558 	.word	0x20007558

0800bea8 <_fstat_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4c07      	ldr	r4, [pc, #28]	; (800bec8 <_fstat_r+0x20>)
 800beac:	2300      	movs	r3, #0
 800beae:	4605      	mov	r5, r0
 800beb0:	4608      	mov	r0, r1
 800beb2:	4611      	mov	r1, r2
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	f7fd fb8d 	bl	80095d4 <_fstat>
 800beba:	1c43      	adds	r3, r0, #1
 800bebc:	d102      	bne.n	800bec4 <_fstat_r+0x1c>
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	b103      	cbz	r3, 800bec4 <_fstat_r+0x1c>
 800bec2:	602b      	str	r3, [r5, #0]
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	bf00      	nop
 800bec8:	20007558 	.word	0x20007558

0800becc <_isatty_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4c06      	ldr	r4, [pc, #24]	; (800bee8 <_isatty_r+0x1c>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4605      	mov	r5, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	f7fd fb8c 	bl	80095f4 <_isatty>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_isatty_r+0x1a>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_isatty_r+0x1a>
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	20007558 	.word	0x20007558

0800beec <_lseek_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4c07      	ldr	r4, [pc, #28]	; (800bf0c <_lseek_r+0x20>)
 800bef0:	4605      	mov	r5, r0
 800bef2:	4608      	mov	r0, r1
 800bef4:	4611      	mov	r1, r2
 800bef6:	2200      	movs	r2, #0
 800bef8:	6022      	str	r2, [r4, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f7fd fb85 	bl	800960a <_lseek>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_lseek_r+0x1e>
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_lseek_r+0x1e>
 800bf08:	602b      	str	r3, [r5, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20007558 	.word	0x20007558

0800bf10 <__malloc_lock>:
 800bf10:	4770      	bx	lr

0800bf12 <__malloc_unlock>:
 800bf12:	4770      	bx	lr

0800bf14 <_read_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4c07      	ldr	r4, [pc, #28]	; (800bf34 <_read_r+0x20>)
 800bf18:	4605      	mov	r5, r0
 800bf1a:	4608      	mov	r0, r1
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	6022      	str	r2, [r4, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	f7fd fb11 	bl	800954a <_read>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_read_r+0x1e>
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_read_r+0x1e>
 800bf30:	602b      	str	r3, [r5, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	20007558 	.word	0x20007558

0800bf38 <log>:
 800bf38:	b500      	push	{lr}
 800bf3a:	ed2d 8b02 	vpush	{d8}
 800bf3e:	eeb0 8b40 	vmov.f64	d8, d0
 800bf42:	b08b      	sub	sp, #44	; 0x2c
 800bf44:	f000 f868 	bl	800c018 <__ieee754_log>
 800bf48:	4b2d      	ldr	r3, [pc, #180]	; (800c000 <log+0xc8>)
 800bf4a:	f993 3000 	ldrsb.w	r3, [r3]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	d051      	beq.n	800bff6 <log+0xbe>
 800bf52:	eeb4 8b48 	vcmp.f64	d8, d8
 800bf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5a:	d64c      	bvs.n	800bff6 <log+0xbe>
 800bf5c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800bf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf64:	dc47      	bgt.n	800bff6 <log+0xbe>
 800bf66:	4a27      	ldr	r2, [pc, #156]	; (800c004 <log+0xcc>)
 800bf68:	9201      	str	r2, [sp, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	9208      	str	r2, [sp, #32]
 800bf6e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bf72:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bf76:	b993      	cbnz	r3, 800bf9e <log+0x66>
 800bf78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf7c:	4922      	ldr	r1, [pc, #136]	; (800c008 <log+0xd0>)
 800bf7e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800bf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf8a:	d025      	beq.n	800bfd8 <log+0xa0>
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	9200      	str	r2, [sp, #0]
 800bf92:	d116      	bne.n	800bfc2 <log+0x8a>
 800bf94:	f7fd fc5a 	bl	800984c <__errno>
 800bf98:	2321      	movs	r3, #33	; 0x21
 800bf9a:	6003      	str	r3, [r0, #0]
 800bf9c:	e016      	b.n	800bfcc <log+0x94>
 800bf9e:	491b      	ldr	r1, [pc, #108]	; (800c00c <log+0xd4>)
 800bfa0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bfae:	d1ed      	bne.n	800bf8c <log+0x54>
 800bfb0:	2202      	movs	r2, #2
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	9200      	str	r2, [sp, #0]
 800bfb6:	d111      	bne.n	800bfdc <log+0xa4>
 800bfb8:	f7fd fc48 	bl	800984c <__errno>
 800bfbc:	2322      	movs	r3, #34	; 0x22
 800bfbe:	6003      	str	r3, [r0, #0]
 800bfc0:	e011      	b.n	800bfe6 <log+0xae>
 800bfc2:	4668      	mov	r0, sp
 800bfc4:	f000 f942 	bl	800c24c <matherr>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0e3      	beq.n	800bf94 <log+0x5c>
 800bfcc:	4810      	ldr	r0, [pc, #64]	; (800c010 <log+0xd8>)
 800bfce:	f000 f93f 	bl	800c250 <nan>
 800bfd2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bfd6:	e006      	b.n	800bfe6 <log+0xae>
 800bfd8:	2302      	movs	r3, #2
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	4668      	mov	r0, sp
 800bfde:	f000 f935 	bl	800c24c <matherr>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d0e8      	beq.n	800bfb8 <log+0x80>
 800bfe6:	9b08      	ldr	r3, [sp, #32]
 800bfe8:	b11b      	cbz	r3, 800bff2 <log+0xba>
 800bfea:	f7fd fc2f 	bl	800984c <__errno>
 800bfee:	9b08      	ldr	r3, [sp, #32]
 800bff0:	6003      	str	r3, [r0, #0]
 800bff2:	ed9d 0b06 	vldr	d0, [sp, #24]
 800bff6:	b00b      	add	sp, #44	; 0x2c
 800bff8:	ecbd 8b02 	vpop	{d8}
 800bffc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c000:	2000025c 	.word	0x2000025c
 800c004:	0800c586 	.word	0x0800c586
 800c008:	c7efffff 	.word	0xc7efffff
 800c00c:	fff00000 	.word	0xfff00000
 800c010:	0800c479 	.word	0x0800c479
 800c014:	00000000 	.word	0x00000000

0800c018 <__ieee754_log>:
 800c018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c01a:	ed8d 0b00 	vstr	d0, [sp]
 800c01e:	9a01      	ldr	r2, [sp, #4]
 800c020:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800c024:	da26      	bge.n	800c074 <__ieee754_log+0x5c>
 800c026:	9900      	ldr	r1, [sp, #0]
 800c028:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c02c:	430b      	orrs	r3, r1
 800c02e:	d107      	bne.n	800c040 <__ieee754_log+0x28>
 800c030:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800c1e0 <__ieee754_log+0x1c8>
 800c034:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800c1e8 <__ieee754_log+0x1d0>
 800c038:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800c03c:	b003      	add	sp, #12
 800c03e:	bd30      	pop	{r4, r5, pc}
 800c040:	2a00      	cmp	r2, #0
 800c042:	da04      	bge.n	800c04e <__ieee754_log+0x36>
 800c044:	ed9d 7b00 	vldr	d7, [sp]
 800c048:	ee37 6b47 	vsub.f64	d6, d7, d7
 800c04c:	e7f2      	b.n	800c034 <__ieee754_log+0x1c>
 800c04e:	ed9d 6b00 	vldr	d6, [sp]
 800c052:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800c1f0 <__ieee754_log+0x1d8>
 800c056:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c05a:	ed8d 7b00 	vstr	d7, [sp]
 800c05e:	9a01      	ldr	r2, [sp, #4]
 800c060:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c064:	4b78      	ldr	r3, [pc, #480]	; (800c248 <__ieee754_log+0x230>)
 800c066:	429a      	cmp	r2, r3
 800c068:	dd06      	ble.n	800c078 <__ieee754_log+0x60>
 800c06a:	ed9d 7b00 	vldr	d7, [sp]
 800c06e:	ee37 0b07 	vadd.f64	d0, d7, d7
 800c072:	e7e3      	b.n	800c03c <__ieee754_log+0x24>
 800c074:	2100      	movs	r1, #0
 800c076:	e7f5      	b.n	800c064 <__ieee754_log+0x4c>
 800c078:	1513      	asrs	r3, r2, #20
 800c07a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800c07e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c082:	4419      	add	r1, r3
 800c084:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800c088:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c08c:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800c090:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800c094:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c098:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c09c:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800c0a0:	ea45 0300 	orr.w	r3, r5, r0
 800c0a4:	ec43 2b10 	vmov	d0, r2, r3
 800c0a8:	1c82      	adds	r2, r0, #2
 800c0aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c0ae:	2a02      	cmp	r2, #2
 800c0b0:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800c0b4:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c0b8:	dc31      	bgt.n	800c11e <__ieee754_log+0x106>
 800c0ba:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c2:	d10f      	bne.n	800c0e4 <__ieee754_log+0xcc>
 800c0c4:	2c00      	cmp	r4, #0
 800c0c6:	f000 8086 	beq.w	800c1d6 <__ieee754_log+0x1be>
 800c0ca:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c1f8 <__ieee754_log+0x1e0>
 800c0ce:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800c200 <__ieee754_log+0x1e8>
 800c0d2:	ee07 4a90 	vmov	s15, r4
 800c0d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c0da:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c0de:	eea7 0b06 	vfma.f64	d0, d7, d6
 800c0e2:	e7ab      	b.n	800c03c <__ieee754_log+0x24>
 800c0e4:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800c208 <__ieee754_log+0x1f0>
 800c0e8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c0ec:	eea0 6b47 	vfms.f64	d6, d0, d7
 800c0f0:	ee20 7b00 	vmul.f64	d7, d0, d0
 800c0f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c0f8:	b914      	cbnz	r4, 800c100 <__ieee754_log+0xe8>
 800c0fa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c0fe:	e79d      	b.n	800c03c <__ieee754_log+0x24>
 800c100:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800c1f8 <__ieee754_log+0x1e0>
 800c104:	ee07 4a90 	vmov	s15, r4
 800c108:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c10c:	eea7 6b45 	vfms.f64	d6, d7, d5
 800c110:	ee36 0b40 	vsub.f64	d0, d6, d0
 800c114:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800c200 <__ieee754_log+0x1e8>
 800c118:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800c11c:	e78e      	b.n	800c03c <__ieee754_log+0x24>
 800c11e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c122:	ee30 7b07 	vadd.f64	d7, d0, d7
 800c126:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800c12a:	ee07 4a90 	vmov	s15, r4
 800c12e:	ee24 2b04 	vmul.f64	d2, d4, d4
 800c132:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800c210 <__ieee754_log+0x1f8>
 800c136:	ee22 5b02 	vmul.f64	d5, d2, d2
 800c13a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c13e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800c218 <__ieee754_log+0x200>
 800c142:	eea5 7b03 	vfma.f64	d7, d5, d3
 800c146:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800c220 <__ieee754_log+0x208>
 800c14a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800c228 <__ieee754_log+0x210>
 800c14e:	eea7 3b05 	vfma.f64	d3, d7, d5
 800c152:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800c230 <__ieee754_log+0x218>
 800c156:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c15a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800c238 <__ieee754_log+0x220>
 800c15e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800c162:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800c166:	eea7 1b05 	vfma.f64	d1, d7, d5
 800c16a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800c16e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800c240 <__ieee754_log+0x228>
 800c172:	3251      	adds	r2, #81	; 0x51
 800c174:	430a      	orrs	r2, r1
 800c176:	2a00      	cmp	r2, #0
 800c178:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c17c:	ee27 7b02 	vmul.f64	d7, d7, d2
 800c180:	eea3 7b05 	vfma.f64	d7, d3, d5
 800c184:	dd1c      	ble.n	800c1c0 <__ieee754_log+0x1a8>
 800c186:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c18a:	ee20 5b05 	vmul.f64	d5, d0, d5
 800c18e:	ee25 5b00 	vmul.f64	d5, d5, d0
 800c192:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c196:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c19a:	b924      	cbnz	r4, 800c1a6 <__ieee754_log+0x18e>
 800c19c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c1a0:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c1a4:	e74a      	b.n	800c03c <__ieee754_log+0x24>
 800c1a6:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800c1f8 <__ieee754_log+0x1e0>
 800c1aa:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c1ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c1b2:	ee37 0b40 	vsub.f64	d0, d7, d0
 800c1b6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800c200 <__ieee754_log+0x1e8>
 800c1ba:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800c1be:	e73d      	b.n	800c03c <__ieee754_log+0x24>
 800c1c0:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c1c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c1c8:	2c00      	cmp	r4, #0
 800c1ca:	d0e9      	beq.n	800c1a0 <__ieee754_log+0x188>
 800c1cc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800c1f8 <__ieee754_log+0x1e0>
 800c1d0:	eea6 7b45 	vfms.f64	d7, d6, d5
 800c1d4:	e7ed      	b.n	800c1b2 <__ieee754_log+0x19a>
 800c1d6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800c1e8 <__ieee754_log+0x1d0>
 800c1da:	e72f      	b.n	800c03c <__ieee754_log+0x24>
 800c1dc:	f3af 8000 	nop.w
 800c1e0:	00000000 	.word	0x00000000
 800c1e4:	c3500000 	.word	0xc3500000
	...
 800c1f4:	43500000 	.word	0x43500000
 800c1f8:	35793c76 	.word	0x35793c76
 800c1fc:	3dea39ef 	.word	0x3dea39ef
 800c200:	fee00000 	.word	0xfee00000
 800c204:	3fe62e42 	.word	0x3fe62e42
 800c208:	55555555 	.word	0x55555555
 800c20c:	3fd55555 	.word	0x3fd55555
 800c210:	d078c69f 	.word	0xd078c69f
 800c214:	3fc39a09 	.word	0x3fc39a09
 800c218:	1d8e78af 	.word	0x1d8e78af
 800c21c:	3fcc71c5 	.word	0x3fcc71c5
 800c220:	9997fa04 	.word	0x9997fa04
 800c224:	3fd99999 	.word	0x3fd99999
 800c228:	df3e5244 	.word	0xdf3e5244
 800c22c:	3fc2f112 	.word	0x3fc2f112
 800c230:	96cb03de 	.word	0x96cb03de
 800c234:	3fc74664 	.word	0x3fc74664
 800c238:	94229359 	.word	0x94229359
 800c23c:	3fd24924 	.word	0x3fd24924
 800c240:	55555593 	.word	0x55555593
 800c244:	3fe55555 	.word	0x3fe55555
 800c248:	7fefffff 	.word	0x7fefffff

0800c24c <matherr>:
 800c24c:	2000      	movs	r0, #0
 800c24e:	4770      	bx	lr

0800c250 <nan>:
 800c250:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c258 <nan+0x8>
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	00000000 	.word	0x00000000
 800c25c:	7ff80000 	.word	0x7ff80000

0800c260 <_init>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	bf00      	nop
 800c264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c266:	bc08      	pop	{r3}
 800c268:	469e      	mov	lr, r3
 800c26a:	4770      	bx	lr

0800c26c <_fini>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	bf00      	nop
 800c270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c272:	bc08      	pop	{r3}
 800c274:	469e      	mov	lr, r3
 800c276:	4770      	bx	lr
